[
  {
    "objectID": "pages/Untitled.html",
    "href": "pages/Untitled.html",
    "title": "1. Markdown",
    "section": "",
    "text": "import os\n\nprint(os.getcwd())\nos.chdir('C:\\\\Users\\\\Park\\\\Desktop\\\\health\\\\myproj')\n\nC:\\Users\\Park\\Desktop\\health\\myproj\n\n\n\n!python --version\n\nPython 3.10.12\n\n\n\nimport pandas as pd\n\n\n# Create a sample dataframe\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age': [24, 27, 22, 32, 29],\n    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'],\n    'Salary': [70000, 80000, 60000, 75000, 82000]\n}\n\ndf = pd.DataFrame(data)\n\n# Display the dataframe\ndisplay(df)\n\n\n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n24\nNew York\n70000\n\n\n1\nBob\n27\nLos Angeles\n80000\n\n\n2\nCharlie\n22\nChicago\n60000\n\n\n3\nDavid\n32\nHouston\n75000\n\n\n4\nEva\n29\nPhoenix\n82000\n\n\n\n\n\n\n\n\n2. Markdown 2\n\nExample headerExample header 2\n\n\nsome text\n\n\nsome text2\n\n\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n\n\n\n\n\n\nLine Plot 1\n\n\n\n\n\n\n\nLine Plot 2\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/Final.html",
    "href": "pages/Final.html",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "",
    "text": "Yujin Song and Lu Yii Wong\nMUSA 550\n26 December, 2024"
  },
  {
    "objectID": "pages/Final.html#environment-setup",
    "href": "pages/Final.html#environment-setup",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "Environment Setup",
    "text": "Environment Setup\n\n# Imports\nfrom census import Census\nimport pandas as pd\nimport os\nimport cenpy\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport seaborn as sns\nimport pygris\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\n\n# Set your Census API key\nCENSUS_API_KEY = \"c914e209b7760882fdf1c8aa19f82f743e584747\"\nc = Census(CENSUS_API_KEY)\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\fuzzywuzzy\\fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')"
  },
  {
    "objectID": "pages/Final.html#load-spatial-data",
    "href": "pages/Final.html#load-spatial-data",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.1 Load Spatial Data",
    "text": "1.1 Load Spatial Data\nA GeoJSON holding for Philadelphia census tract boundary is available in the data/ directory.\n\ntract = gpd.read_file(\"data/Census_Tracts_2010 (2).geojson\")\n\ntract.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\nAWATER10\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n0\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-75.22927 39.96054, -75.22865 39.960...\n\n\n1\n2\n42\n101\n009500\n42101009500\n95\nCensus Tract 95\nG5020\nS\n319070\n0\n+39.9658709\n-075.2379140\n10430\nPOLYGON ((-75.23536 39.96852, -75.23545 39.969...\n\n\n2\n3\n42\n101\n009600\n42101009600\n96\nCensus Tract 96\nG5020\nS\n405273\n0\n+39.9655396\n-075.2435075\n10431\nPOLYGON ((-75.24343 39.96230, -75.24339 39.962...\n\n\n3\n4\n42\n101\n013800\n42101013800\n138\nCensus Tract 138\nG5020\nS\n341256\n0\n+39.9764504\n-075.1771771\n10468\nPOLYGON ((-75.17341 39.97779, -75.17386 39.977...\n\n\n4\n5\n42\n101\n013900\n42101013900\n139\nCensus Tract 139\nG5020\nS\n562934\n0\n+39.9750563\n-075.1711846\n10469\nPOLYGON ((-75.17313 39.97776, -75.17321 39.977...\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\nax =tract.to_crs(epsg=3857).plot(ax=ax, facecolor=\"none\", edgecolor=\"black\")\n\nax.set_axis_off()\nax.set_aspect(\"equal\")"
  },
  {
    "objectID": "pages/Final.html#child-lead-blood-level",
    "href": "pages/Final.html#child-lead-blood-level",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.2 Child Lead Blood Level",
    "text": "1.2 Child Lead Blood Level\n\nlead = gpd.read_file(\"data/child_blood_lead_levels_by_ct.geojson\")\n\n\nlead.head()\nprint(lead.crs)\nprint(tract.crs)\n\nEPSG:4326\nEPSG:4326\n\n\n\ntract = tract.to_crs(epsg=3857)  # Ensure 'tract' is in projected CRS\nlead = lead.to_crs(epsg=3857) \n\n\n# Spatial join between ceansus tracts and lead data\njoined = gpd.sjoin(tract, lead, how=\"left\", predicate=\"intersects\")\n\njoined.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\n...\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\nindex_right\ncensus_tract\ndata_redacted\nnum_bll_5plus\nnum_screen\nperc_5plus\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n83\n42101008500\nFalse\n30.0\n492.0\n6.1\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n93\n42101009300\nFalse\n19.0\n315.0\n6.0\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n94\n42101009400\nFalse\n14.0\n306.0\n4.6\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n95\n42101009500\nFalse\n11.0\n253.0\n4.3\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n101\n42101010200\nFalse\n17.0\n235.0\n7.2\n\n\n\n\n5 rows Ã— 21 columns\n\n\n\n\n# Replace 'NAMELSAD10' and 'perc_5plus' with the appropriate column names\nlead_aggregated = joined.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",  # Example: Average value from lead\n    \"geometry\": \"first\"     # Keep one geometry per tract\n}).reset_index()\n\nlead_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(type(lead_aggregated))\nprint(lead_aggregated.geometry.head())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n0    POLYGON ((-8364710.415 4858926.985, -8364708.8...\n1    POLYGON ((-8366008.694 4858067.328, -8366013.2...\n2    POLYGON ((-8365697.832 4857770.055, -8365707.4...\n3    POLYGON ((-8376459.164 4861101.785, -8376441.0...\n4    POLYGON ((-8375582.343 4861569.516, -8375572.4...\nName: geometry, dtype: geometry\n\n\n\nlead_aggregated = gpd.GeoDataFrame(lead_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n# Replace NaN values with -1 for visualization\nlead_aggregated[\"perc_5plus\"] = lead_aggregated[\"perc_5plus\"].fillna(-1)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\nlead_aggregated.plot(\n    ax=ax,\n    column=\"perc_5plus\",  # Use the column with lead level data\n    cmap=\"viridis\",       # Colormap for numerical data\n    edgecolor=\"white\",    # Boundary color\n    legend=True,          # Add legend\n    legend_kwds={\n        \"label\": \"Lead Level Percentage\\n(-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Format the plot\nax.set_title(\"Average Lead Level Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "pages/Final.html#cancer-and-asthma",
    "href": "pages/Final.html#cancer-and-asthma",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.3 Cancer and Asthma",
    "text": "1.3 Cancer and Asthma\n\ncancer_asthma= gpd.read_file(\"data/philadelphia_gdf.geojson\")\n\ncancer_asthma.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\ngeometry\n\n\n\n\n0\nPhiladelphia\n42101002500\n11.3\n5.2\n3769\nPOINT (-8365639.619 4856398.197)\n\n\n1\nPhiladelphia\n42101003702\n12.8\n4.8\n3707\nPOINT (-8369269.171 4854982.142)\n\n\n2\nPhiladelphia\n42101031401\n11.6\n4.1\n6664\nPOINT (-8356372.430 4872587.322)\n\n\n3\nPhiladelphia\n42101031502\n11.7\n6.2\n4018\nPOINT (-8355069.752 4871650.082)\n\n\n4\nPhiladelphia\n42101033200\n10.4\n6.7\n2741\nPOINT (-8353959.244 4872306.058)\n\n\n\n\n\n\n\n\ncancer_asthma = cancer_asthma.to_crs(epsg=3857)\n\n\nselected_columns = [\"countyname\", \"tractfips\",\"geometry\", \"casthma_crudeprev\", \"cancer_crudeprev\", \"totalpopulation\"]\nfiltered_gdf = cancer_asthma[selected_columns]\n\n# Check the result\nprint(filtered_gdf.head())\n\n     countyname    tractfips                          geometry  \\\n0  Philadelphia  42101002500  POINT (-8365639.619 4856398.197)   \n1  Philadelphia  42101003702  POINT (-8369269.171 4854982.142)   \n2  Philadelphia  42101031401  POINT (-8356372.430 4872587.322)   \n3  Philadelphia  42101031502  POINT (-8355069.752 4871650.082)   \n4  Philadelphia  42101033200  POINT (-8353959.244 4872306.058)   \n\n  casthma_crudeprev cancer_crudeprev totalpopulation  \n0              11.3              5.2            3769  \n1              12.8              4.8            3707  \n2              11.6              4.1            6664  \n3              11.7              6.2            4018  \n4              10.4              6.7            2741  \n\n\n\n# Filter for rows where CountyName is Philadelphia\nphiladelphia_gdf = filtered_gdf[filtered_gdf[\"countyname\"].str.contains(\"Philadelphia\", case=False, na=False)]\n\n# Check the result\nphiladelphia_gdf.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ngeometry\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\n\n\n\n\n0\nPhiladelphia\n42101002500\nPOINT (-8365639.619 4856398.197)\n11.3\n5.2\n3769\n\n\n1\nPhiladelphia\n42101003702\nPOINT (-8369269.171 4854982.142)\n12.8\n4.8\n3707\n\n\n2\nPhiladelphia\n42101031401\nPOINT (-8356372.430 4872587.322)\n11.6\n4.1\n6664\n\n\n3\nPhiladelphia\n42101031502\nPOINT (-8355069.752 4871650.082)\n11.7\n6.2\n4018\n\n\n4\nPhiladelphia\n42101033200\nPOINT (-8353959.244 4872306.058)\n10.4\n6.7\n2741\n\n\n\n\n\n\n\n\ncancer_asthma_aggregated = gpd.sjoin(lead_aggregated, philadelphia_gdf, how=\"left\", predicate=\"intersects\")\n\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\nindex_right\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n347.0\nPhiladelphia\n42101000100\n9.2\n3.4\n3478\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n306.0\nPhiladelphia\n42101001001\n8.9\n8.4\n2603\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n201.0\nPhiladelphia\n42101001002\n9.0\n7.2\n3612\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n261.0\nPhiladelphia\n42101010000\n13.5\n4.6\n4366\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n177.0\nPhiladelphia\n42101010100\n13.6\n5.5\n5459\n\n\n\n\n\n\n\n\n# Get the number of rows\nnum_rows = cancer_asthma_aggregated.shape[0]\nprint(f\"Number of rows: {num_rows}\")\n\nNumber of rows: 386\n\n\n\nprint(cancer_asthma_aggregated[\"casthma_crudeprev\"].dtype)\nprint(cancer_asthma_aggregated[\"cancer_crudeprev\"].dtype)\n\nobject\nobject\n\n\n\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"casthma_crudeprev\"], errors=\"coerce\")\ncancer_asthma_aggregated[\"cancer_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"cancer_crudeprev\"], errors=\"coerce\")\n\n\n# Get the range of 'casthma_crudeprev'\nasthma_min = cancer_asthma_aggregated[\"casthma_crudeprev\"].min()\nasthma_max = cancer_asthma_aggregated[\"casthma_crudeprev\"].max()\nprint(f\"Range of 'casthma_crudeprev': {asthma_min} to {asthma_max}\")\n\n# Get the range of 'cancer_crudeprev'\ncancer_min = cancer_asthma_aggregated[\"cancer_crudeprev\"].min()\ncancer_max = cancer_asthma_aggregated[\"cancer_crudeprev\"].max()\nprint(f\"Range of 'cancer_crudeprev': {cancer_min} to {cancer_max}\")\n\nRange of 'casthma_crudeprev': 8.3 to 17.4\nRange of 'cancer_crudeprev': 0.8 to 17.6\n\n\n\ncancer_asthma_aggregated = cancer_asthma_aggregated.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(f\"Number of rows after cleaning: {cancer_asthma_aggregated.shape[0]}\")\n\nNumber of rows after cleaning: 384\n\n\n\ncancer_asthma_aggregated = gpd.GeoDataFrame(cancer_asthma_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n# Fill NaN values with a placeholder (-1) for \"No Data\"\ncancer_asthma_aggregated[\"cancer_crudeprev_filled\"] = cancer_asthma_aggregated[\"cancer_crudeprev\"].fillna(-1)\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = cancer_asthma_aggregated[\"casthma_crudeprev\"].fillna(-1)\n\n\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\ncancer_asthma_aggregated.plot(\n    ax=axes[0],\n    column=\"cancer_crudeprev\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Cancer Prevalence (-1 = No Data)\"},\n)\naxes[0].set_title(\"Cancer Prevalence by Census Tract\")\naxes[0].set_axis_off()\n\ncancer_asthma_aggregated.plot(\n    ax=axes[1],\n    column=\"casthma_crudeprev\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Asthma Prevalence (-1 = No Data)\"},\n)\naxes[1].set_title(\"Asthma Prevalence by Census Tract\")\naxes[1].set_axis_off()\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "pages/Final.html#heat-vulnerability",
    "href": "pages/Final.html#heat-vulnerability",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.4 Heat Vulnerability",
    "text": "1.4 Heat Vulnerability\n\nheatindex = gpd.read_file(\"data/heat_vulnerability_ct.geojson\")\n\nheatindex.head()\n\n\n\n\n\n\n\n\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n42101002100\n21\n0\n2023\n0.502262\n-1.481429\n0.639224\n1\n4.044948e+05\n2580.858471\nPOLYGON ((-75.17370 39.93624, -75.17378 39.935...\n\n\n1\n42101002200\n22\n0\n2023\n-3.183298\n-1.658469\n-1.769318\n2\n3.894601e+05\n2518.894793\nPOLYGON ((-75.17370 39.93624, -75.17369 39.936...\n\n\n2\n42101002300\n23\n0\n2023\n-6.884403\n-1.193579\n-4.362779\n3\n3.616223e+05\n2771.142380\nPOLYGON ((-75.16702 39.93675, -75.16696 39.936...\n\n\n3\n42101002400\n24\n0\n2023\n-7.107618\n-1.382308\n-4.462616\n4\n9.117703e+05\n4810.554362\nPOLYGON ((-75.16629 39.94004, -75.16623 39.940...\n\n\n4\n42101034803\n348.03\n0\n2023\n-7.830042\n-0.358619\n-5.684468\n5\n2.186876e+06\n6444.130598\nPOLYGON ((-75.00888 40.05866, -75.00915 40.059...\n\n\n\n\n\n\n\n\nheatindex = heatindex.to_crs(epsg=3857)\n\n# Perform the spatial join\njoined_with_heatindex = gpd.sjoin(cancer_asthma_aggregated, heatindex, how=\"left\", predicate=\"intersects\")\n\n\n# Display the first few rows\njoined_with_heatindex.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\ncancer_crudeprev_filled\nindex_right\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n177\n42101036600\n366\n0\n2023\n-8.418257\n-2.202868\n-5.749989\n178\n4.168056e+06\n12166.444233\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n291\n42101000100\n1\n0\n2023\n-11.402807\n-3.314470\n-7.514585\n292\n1.202257e+06\n4528.078584\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n314\n42101036700\n367\n0\n2023\n-8.857523\n-4.177542\n-5.601159\n315\n1.365371e+06\n4905.453398\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n315\n42101037600\n376\n0\n2023\n-1.707536\n-2.097253\n-0.802943\n316\n1.222412e+06\n4704.678043\n\n\n1\nCensus Tract 10.01\n42101001001\n0.0\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n8.4\n23\n42101001001\n10.01\n0\n2023\n-8.117465\n-1.167082\n-5.634836\n24\n3.907849e+05\n2942.081107\n\n\n\n\n\n\n\n\n# Check the number of rows and columns\nprint(f\"Number of rows: {joined_with_heatindex.shape[0]}\")\nprint(f\"Number of columns: {joined_with_heatindex.shape[1]}\")\n\nNumber of rows: 1757\nNumber of columns: 18\n\n\n\naggregated_heat = joined_with_heatindex.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\naggregated_heat.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\nhvi_score\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\n2.479992\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\n3.499149\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(f\"Number of rows: {aggregated_heat.shape[0]}\")\n\nNumber of rows: 384\n\n\n\naggregated_heat = gpd.GeoDataFrame(aggregated_heat, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n# Handle missing data\naggregated_heat[\"hvi_score\"] = aggregated_heat[\"hvi_score\"].fillna(-1)  # Replace NaN with -1 for \"No Data\"\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_heat.plot(\n    ax=ax,\n    column=\"hvi_score\",  # Replace with the HVI column name\n    cmap=\"YlOrRd\",       # Colormap for heat index visualization\n    edgecolor=\"white\",  \n    linewidth = 0.5,\n    legend=True,         # Add a legend\n    legend_kwds={\n        \"label\": \"Heat Vulnerability Index (HVI) Score (-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Add title and remove axis\nax.set_title(\"Heat Vulnerability Index (HVI) Score by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "pages/Final.html#tree-canpoy",
    "href": "pages/Final.html#tree-canpoy",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.5 Tree Canpoy",
    "text": "1.5 Tree Canpoy\n\ntree_canopy = gpd.read_file(\"data/ppr_tree_canopy_outlines_2015.geojson\")\ntree_canopy.head()\n\n\n\n\n\n\n\n\nobjectid\navg_height\npolyid\nfcode\nshape_length\nshape_area\ngeometry\n\n\n\n\n0\n2\n6\n3\n3000\n66.000526\n279.453508\nMULTIPOLYGON (((-75.27506 39.97745, -75.27505 ...\n\n\n1\n14\n17\n23\n3000\n70.425045\n351.315225\nMULTIPOLYGON (((-75.26884 39.97958, -75.26884 ...\n\n\n2\n15\n32\n24\n3000\n46.593473\n108.578054\nMULTIPOLYGON (((-75.26510 39.96519, -75.26512 ...\n\n\n3\n19\n15\n28\n3000\n67.783315\n293.959714\nMULTIPOLYGON (((-75.27271 39.97838, -75.27271 ...\n\n\n4\n28\n32\n37\n3000\n979.079210\n9433.259404\nMULTIPOLYGON (((-75.26491 39.96518, -75.26497 ...\n\n\n\n\n\n\n\n\n# Check the projections for tree and heat files\nprint(aggregated_heat.crs)\nprint(tree_canopy.crs)\n\nEPSG:3857\nEPSG:4326\n\n\n\n# Ensure CRS alignment\ntree_canopy = tree_canopy.to_crs(\"EPSG:3857\")\naggregated_heat = aggregated_heat.to_crs(\"EPSG:3857\")\n\n# Perform spatial intersection\nintersected = gpd.overlay(tree_canopy, aggregated_heat, how=\"intersection\")\n\n# Calculate tree canopy area (in square meters)\nintersected[\"canopy_area\"] = intersected.geometry.area\n\n# Inspect results\nintersected.head()\n\n\n\n\n\n\n\n\nobjectid\navg_height\npolyid\nfcode\nshape_length\nshape_area\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\nhvi_score\ngeometry\ncanopy_area\n\n\n\n\n0\n2\n6\n3\n3000\n66.000526\n279.453508\nCensus Tract 98.02\n42101009802\n0.000000\n13.4\n4.7\n0.596485\nPOLYGON ((-8379580.792 4862666.206, -8379580.4...\n44.430651\n\n\n1\n14\n17\n23\n3000\n70.425045\n351.315225\nCensus Tract 98.01\n42101009801\n0.000000\n12.7\n4.8\n0.596485\nPOLYGON ((-8378888.830 4862975.199, -8378888.3...\n55.719950\n\n\n2\n15\n32\n24\n3000\n46.593473\n108.578054\nCensus Tract 9808\n42101980800\n5.666667\n-1.0\nNaN\n0.921918\nMULTIPOLYGON (((-8378475.723 4860887.543, -837...\n0.454082\n\n\n3\n19\n15\n28\n3000\n67.783315\n293.959714\nCensus Tract 98.02\n42101009802\n0.000000\n13.4\n4.7\n0.596485\nPOLYGON ((-8379319.525 4862800.000, -8379319.0...\n46.428431\n\n\n4\n28\n32\n37\n3000\n979.079210\n9433.259404\nCensus Tract 9808\n42101980800\n5.666667\n-1.0\nNaN\n0.921918\nPOLYGON ((-8378463.033 4860886.817, -8378463.2...\n1447.372296\n\n\n\n\n\n\n\n\naggregated_with_canopy = intersected.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"canopy_area\": \"sum\",         # Total canopy area within each tract\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\n# Merge the aggregated results back with the original GeoDataFrame\naggregated_with_canopy_full = aggregated_heat.merge(\n    aggregated_with_canopy, \n    on=\"NAMELSAD10\", \n    how=\"left\", \n    suffixes=(\"\", \"_aggregated\")\n)\n\n# Rename columns\naggregated_with_canopy_full = aggregated_with_canopy_full.rename(\n    columns={\n        \"GEOID10\": \"GEOID\" # Rename GEOID to match Census\n    }\n)\n\n# Fill missing values for 'canopy_area' and 'canopy_percent' with 0\naggregated_with_canopy_full[\"canopy_area\"] = aggregated_with_canopy_full[\"canopy_area\"].fillna(0)\naggregated_with_canopy_full[\"canopy_percent\"] = aggregated_with_canopy_full[\"canopy_area\"] / aggregated_with_canopy_full.geometry.area * 100\n\nprint(f\"Number of rows in aggregated_with_canopy_full: {aggregated_with_canopy_full.shape[0]}\")\n\nNumber of rows in aggregated_with_canopy_full: 384\n\n\n\naggregated_with_canopy_full.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\nhvi_score\ngeometry\nGEOID10_aggregated\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\ncanopy_area\ngeometry_aggregated\ncanopy_percent\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\n15295.431073\nPOLYGON ((-8365601.290 4859085.382, -8365600.7...\n1.272227\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\n18685.893835\nPOLYGON ((-8365867.678 4857764.287, -8365867.3...\n4.781632\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\n35866.481410\nPOLYGON ((-8365243.510 4858160.829, -8365243.0...\n4.464418\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\n2.479992\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n42101010000\n6.180000\n13.5\n4.6\n2.479992\n18194.466411\nPOLYGON ((-8377098.367 4862164.604, -8377097.8...\n2.147186\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\n3.499149\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n42101010100\n5.333333\n13.6\n5.5\n3.499149\n30726.883686\nPOLYGON ((-8376335.161 4861584.880, -8376334.7...\n2.996808\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_with_canopy_full.plot(\n    ax=ax,\n    column=\"canopy_percent\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth = 0.2,\n    legend=True,\n    legend_kwds={\n        \"label\": \"Tree Canopy Percentage\",\n        \"orientation\": \"vertical\",\n    },\n)\n\nax.set_title(\"Tree Canopy Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\nplt.show()"
  },
  {
    "objectID": "pages/Final.html#census-data",
    "href": "pages/Final.html#census-data",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.6 Census Data",
    "text": "1.6 Census Data\n\navailable = cenpy.explorer.available()\n\n# Return a dataframe for 5 year ACS\n# Axis=0 means to filter the index labels!\nacs = available.filter(regex=\"^ACSDT5Y\", axis=0)\n\nacs\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\cenpy\\explorer.py:70: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  listcols = raw_table.applymap(lambda x: isinstance(x, list)).any()\n\n\n\n\n\n\n\n\n\nc_isTimeseries\ntemporal\nspatial\nc_isAggregate\npublisher\nreferences\nprogramCode\nmodified\nlicense\nkeyword\n...\ndescription\nbureauCode\naccessLevel\ntitle\nc_isAvailable\nc_isCube\nc_isMicrodata\nc_documentationLink\nc_dataset\nvintage\n\n\n\n\nACSDT5Y2009\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-08-27 13:11:18.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2009.0\n\n\nACSDT5Y2010\nNaN\nNaN\nUnited States\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2010.0\n\n\nACSDT5Y2011\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2011.0\n\n\nACSDT5Y2012\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2012.0\n\n\nACSDT5Y2013\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2013.0\n\n\nACSDT5Y2014\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2014.0\n\n\nACSDT5Y2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-05 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2015.0\n\n\nACSDT5Y2016\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-05 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2016.0\n\n\nACSDT5Y2017\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-08-21 07:11:43.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2017.0\n\n\nACSDT5Y2018\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-22 16:28:02.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2018.0\n\n\nACSDT5Y2019\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-04-03 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2019.0\n\n\nACSDT5Y2020\nNaN\n2020/2020\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2021-07-13 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2020.0\n\n\nACSDT5Y2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-08-08 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2021.0\n\n\nACSDT5Y2022\nNaN\n2022/2022\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2023-09-05 12:01:39.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2022.0\n\n\nACSDT5Y2023\nNaN\n2023/2023\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2024-09-06 17:27:47.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2023.0\n\n\nACSDT5YAIAN2010\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-24 07:18:57.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: A...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2010.0\n\n\nACSDT5YAIAN2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-02-13 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nACS 5-Year AIAN Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2015.0\n\n\nACSDT5YAIAN2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-11-29 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: A...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2021.0\n\n\nACSDT5YSPT2010\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-11 14:16:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are rele...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2010.0\n\n\nACSDT5YSPT2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-02-18 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are rele...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2015.0\n\n\nACSDT5YSPT2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-11-29 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are relea...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2021.0\n\n\n\n\n21 rows Ã— 23 columns\n\n\n\n\n# Choosing only 2019 ACS 5-Year\n## 2019 chosen over 2021 because of the number of census tracts\nacs = cenpy.remote.APIConnection(\"ACSDT5Y2019\")\n\nFor the purpose of this project, we are interested in finding the following:\n- Average Median Income - Percentage Non-White Population - Population with High School Dipolma or Higher (Age 25+) - Percent Dependent Population (Age 0-15 and 65 and older)\n\n# Variables from Census\nvariables = [\n    \"NAME\",\n    \"B03002_001E\",  # Total population\n    \"B03002_003E\",  # Not Hispanic, White\n    \"B19013_001E\",  # Median household income\n    \"B15003_017E\",  # High School diploma \n    \"B15003_018E\",  # GED or alternative\n    \"B15003_019E\",  # Some college\n    \"B15003_020E\",  # Some college, more than 1 year\n    \"B15003_021E\",  # Associate's Degree\n    \"B15003_022E\",  # Bachelor's degree\n    \"B15003_023E\",  # Master's degree\n    \"B15003_024E\",  # Professional School\n    \"B15003_025E\",  # Doctorate degree\n    \"B01001_003E\",  # Male Population under 5\n    \"B01001_004E\",  # Male Population 5-9\n    \"B01001_005E\",  # Male Population 10-14\n    \"B01001_020E\",  # Male Population 65-66\n    \"B01001_021E\",  # Male Population 67-69\n    \"B01001_022E\",  # Male Population 70-74\n    \"B01001_023E\",  # Male Population 75-79\n    \"B01001_024E\",  # Male Population 80-84\n    \"B01001_025E\",  # Male Population 85 and older\n    \"B01001_027E\",  # Female Population under 5\n    \"B01001_028E\",  # Female Population 5-9\n    \"B01001_029E\",  # Female Population 10-14\n    \"B01001_044E\",  # Female Population 65-66\n    \"B01001_045E\",  # Female Population 67-69\n    \"B01001_046E\",  # Female Population 70-74\n    \"B01001_047E\",  # Female Population 75-79\n    \"B01001_048E\",  # Female Population 80-84\n    \"B01001_049E\"   # Female Population 85 and older\n]\n\n\n# Define codes for Philly\nphilly_county_code = \"101\"\npa_state_code = \"42\"\n\n# Adjust the geo_unit to query census tracts\nphilly_census_data = acs.query(\n    cols=variables,\n    geo_unit=\"tract:*\", \n    geo_filter={\"state\": pa_state_code, \"county\": philly_county_code}\n)\n\n# Display the first few rows of the data\nphilly_census_data.head()\n\n\n\n\n\n\n\n\nNAME\nB03002_001E\nB03002_003E\nB19013_001E\nB15003_017E\nB15003_018E\nB15003_019E\nB15003_020E\nB15003_021E\nB15003_022E\n...\nB01001_029E\nB01001_044E\nB01001_045E\nB01001_046E\nB01001_047E\nB01001_048E\nB01001_049E\nstate\ncounty\ntract\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n3055\n93\n52706\n854\n54\n128\n429\n220\n454\n...\n82\n75\n170\n71\n65\n39\n26\n42\n101\n026000\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4927\n130\n46166\n1148\n92\n216\n822\n226\n580\n...\n142\n21\n194\n266\n130\n89\n0\n42\n101\n026302\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5660\n36\n52895\n1077\n288\n269\n721\n506\n581\n...\n221\n32\n184\n277\n222\n111\n107\n42\n101\n026400\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6925\n122\n45540\n1637\n345\n590\n991\n101\n683\n...\n139\n43\n36\n213\n171\n69\n31\n42\n101\n010100\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3612\n176\n18476\n746\n130\n84\n373\n71\n135\n...\n160\n72\n29\n16\n68\n47\n0\n42\n101\n010700\n\n\n\n\n5 rows Ã— 34 columns\n\n\n\n\n# Check the data types for each column\n# print(philly_census_data.dtypes)\n\n# Convert the data types to numeric \nnumeric_columns = [\n    \"B03002_001E\", \"B03002_003E\", \"B19013_001E\", \n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\" \n]\n\nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].apply(pd.to_numeric, errors=\"coerce\")\n\n# Handle missing values \nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].fillna(0)\n\n\n# Combining Columns to aggregate population data\nphilly_census_data[\"Pop_15_and_Younger\"] = (\n    philly_census_data[\"B01001_003E\"] +  # Male under 5\n    philly_census_data[\"B01001_004E\"] +  # Male 5-9\n    philly_census_data[\"B01001_005E\"] +  # Male 10-14\n    philly_census_data[\"B01001_027E\"] +  # Female under 5\n    philly_census_data[\"B01001_028E\"] +  # Female 5-9\n    philly_census_data[\"B01001_029E\"]    # Female 10-14\n) \n\n\nphilly_census_data[\"Pop_65_and_Older\"] = (\n    philly_census_data[\"B01001_020E\"] +  # Male 65-66\n    philly_census_data[\"B01001_021E\"] +  # Male 67-69\n    philly_census_data[\"B01001_022E\"] +  # Male 70-74\n    philly_census_data[\"B01001_023E\"] +  # Male 75-79\n    philly_census_data[\"B01001_024E\"] +  # Male 80-84\n    philly_census_data[\"B01001_025E\"] +  # Male 85 and older\n    philly_census_data[\"B01001_044E\"] +  # Female 65-66\n    philly_census_data[\"B01001_045E\"] +  # Female 67-69\n    philly_census_data[\"B01001_046E\"] +  # Female 70-74\n    philly_census_data[\"B01001_047E\"] +  # Female 75-79\n    philly_census_data[\"B01001_048E\"] +  # Female 80-84\n    philly_census_data[\"B01001_049E\"]    # Female 85 and older\n)\n\n# Creating Dependent Population Column\nphilly_census_data[\"Dependent_Pop\"] = (\n    philly_census_data[\"Pop_15_and_Younger\"] + \n    philly_census_data[\"Pop_65_and_Older\"]\n)\n\n# Creating Percentage dependent population column\nphilly_census_data[\"Perc_Dependent_Pop\"] = (\n    (philly_census_data[\"Dependent_Pop\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n# Check the resulting DataFrame\nphilly_census_data[[\"NAME\", \"Pop_15_and_Younger\", \"Pop_65_and_Older\", \"Dependent_Pop\", \"Perc_Dependent_Pop\"]].head()\n\n\n\n\n\n\n\n\nNAME\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n375\n619\n994\n32.54\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n741\n1343\n2084\n42.30\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n831\n1450\n2281\n40.30\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n1361\n870\n2231\n32.22\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n988\n302\n1290\n35.71\n\n\n\n\n\n\n\n\n# Combining Columns to aggregate education data\n# Education attainment that is at least high school or more\nphilly_census_data[\"Edu_HS_Higher\"] = (\n    philly_census_data[\"B15003_017E\"] +  # High School diploma \n    philly_census_data[\"B15003_018E\"] +  # GED or alternative\n    philly_census_data[\"B15003_019E\"] +  # Some college\n    philly_census_data[\"B15003_020E\"] +  # Some college, more than 1 year\n    philly_census_data[\"B15003_021E\"] +  # Associate's Degree\n    philly_census_data[\"B15003_022E\"] +  # Bachelor's degree\n    philly_census_data[\"B15003_023E\"] +  # Master's degree\n    philly_census_data[\"B15003_024E\"] +  # Professional School\n    philly_census_data[\"B15003_025E\"]    # Doctorate degree\n) \n\n# Creating Percentage HS attainment or higher column\nphilly_census_data[\"Perc_Edu_HS_Higher\"] = (\n    (philly_census_data[\"Edu_HS_Higher\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n# Check the resulting DataFrame\nphilly_census_data[[\"NAME\", \"Edu_HS_Higher\", \"Perc_Edu_HS_Higher\"]].head()\n\n\n\n\n\n\n\n\nNAME\nEdu_HS_Higher\nPerc_Edu_HS_Higher\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n2271\n74.34\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n3394\n68.89\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n3733\n65.95\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n4631\n66.87\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n1596\n44.19\n\n\n\n\n\n\n\n\n# Creating Non-White Population Column\nphilly_census_data[\"Non_White\"] = (\n    philly_census_data[\"B03002_001E\"] - philly_census_data[\"B03002_003E\"]\n)\n\n# Creating Percentage Non-White Population column\nphilly_census_data[\"Perc_Non_White\"] = (\n    (philly_census_data[\"Non_White\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n# Check the resulting DataFrame\nphilly_census_data[[\"NAME\", \"Non_White\", \"Perc_Non_White\"]].head()\n\n\n\n\n\n\n\n\nNAME\nNon_White\nPerc_Non_White\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n2962\n96.96\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4797\n97.36\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5624\n99.36\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6803\n98.24\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3436\n95.13\n\n\n\n\n\n\n\n\n# Rename columns\nphilly_census_data = philly_census_data.rename(\n    columns={\n        \"B03002_001E\": \"Total_Pop\", # Total Population\n        \"B03002_003E\": \"White_Only\",  # Not Hispanic, White\n        \"B19013_001E\": \"Median_Household_Income\"\n    }\n)\n\n\n# Drop columns that are redundant \nphilly_census_data = philly_census_data.drop(columns = [\n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\"]) \n\nphilly_census_data.head()\n\n\n\n\n\n\n\n\nNAME\nTotal_Pop\nWhite_Only\nMedian_Household_Income\nstate\ncounty\ntract\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\nEdu_HS_Higher\nPerc_Edu_HS_Higher\nNon_White\nPerc_Non_White\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n3055\n93\n52706\n42\n101\n026000\n375\n619\n994\n32.54\n2271\n74.34\n2962\n96.96\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4927\n130\n46166\n42\n101\n026302\n741\n1343\n2084\n42.30\n3394\n68.89\n4797\n97.36\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5660\n36\n52895\n42\n101\n026400\n831\n1450\n2281\n40.30\n3733\n65.95\n5624\n99.36\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6925\n122\n45540\n42\n101\n010100\n1361\n870\n2231\n32.22\n4631\n66.87\n6803\n98.24\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3612\n176\n18476\n42\n101\n010700\n988\n302\n1290\n35.71\n1596\n44.19\n3436\n95.13\n\n\n\n\n\n\n\n\n# Fetch the census tracts for Philadelphia \nphilly_census_tracts = pygris.tracts(\n    state=pa_state_code, \n    county=philly_county_code, \n    year=2019\n)\n\n\nphilly_census_tracts.head()\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\nINTPTLAT\nINTPTLON\ngeometry\n\n\n\n\n60\n42\n101\n989100\n42101989100\n9891\nCensus Tract 9891\nG5020\nS\n2785522\n1532456\n+40.0360901\n-075.0053457\nPOLYGON ((-75.02251 40.03083, -75.02176 40.031...\n\n\n70\n42\n101\n001001\n42101001001\n10.01\nCensus Tract 10.01\nG5020\nS\n229397\n0\n+39.9456722\n-075.1516020\nPOLYGON ((-75.15384 39.94256, -75.15383 39.942...\n\n\n71\n42\n101\n000402\n42101000402\n4.02\nCensus Tract 4.02\nG5020\nS\n303680\n0\n+39.9532973\n-075.1686952\nPOLYGON ((-75.17337 39.95256, -75.17336 39.952...\n\n\n76\n42\n101\n036900\n42101036900\n369\nCensus Tract 369\nG5020\nS\n1855495\n193283\n+39.9487238\n-075.1937601\nPOLYGON ((-75.20774 39.94137, -75.20751 39.941...\n\n\n81\n42\n101\n037300\n42101037300\n373\nCensus Tract 373\nG5020\nS\n2587546\n145214\n+39.9024981\n-075.1879361\nPOLYGON ((-75.19399 39.90563, -75.19379 39.905...\n\n\n\n\n\n\n\n\n# Check that the number of rows are the same\nprint(len(philly_census_tracts))\nprint(len(philly_census_data))\n\n384\n384\n\n\n\n# Merge demographic data with geometries \ncensus_data = philly_census_tracts.merge(\n    philly_census_data,\n    left_on=[\"STATEFP\", \"COUNTYFP\", \"TRACTCE\"], \n    right_on=[\"state\", \"county\", \"tract\"],\n)\n\n\ncensus_data.head()\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME_x\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\n...\ncounty\ntract\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\nEdu_HS_Higher\nPerc_Edu_HS_Higher\nNon_White\nPerc_Non_White\n\n\n\n\n0\n42\n101\n989100\n42101989100\n9891\nCensus Tract 9891\nG5020\nS\n2785522\n1532456\n...\n101\n989100\n0\n26\n26\n1.44\n883\n48.76\n1615\n89.18\n\n\n1\n42\n101\n001001\n42101001001\n10.01\nCensus Tract 10.01\nG5020\nS\n229397\n0\n...\n101\n001001\n222\n1016\n1238\n46.37\n2297\n86.03\n260\n9.74\n\n\n2\n42\n101\n000402\n42101000402\n4.02\nCensus Tract 4.02\nG5020\nS\n303680\n0\n...\n101\n000402\n66\n1406\n1472\n35.93\n3920\n95.68\n846\n20.65\n\n\n3\n42\n101\n036900\n42101036900\n369\nCensus Tract 369\nG5020\nS\n1855495\n193283\n...\n101\n036900\n110\n179\n289\n4.91\n798\n13.55\n2827\n48.00\n\n\n4\n42\n101\n037300\n42101037300\n373\nCensus Tract 373\nG5020\nS\n2587546\n145214\n...\n101\n037300\n893\n1377\n2270\n39.42\n4077\n70.79\n1523\n26.45\n\n\n\n\n5 rows Ã— 28 columns\n\n\n\n\ncensus_data.explore(column=\"Total_Pop\", tiles=\"CartoDB positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Plot Population and Non-white Population\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Total Population\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Total_Pop\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Total Population by Census Tract\", fontsize = 14)\naxes[0].set_axis_off()\n\n# Plot 2: Percentage Non-White\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Perc_Non_White\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Percentage Non-Whites by Census Tract\", fontsize = 14)\naxes[1].set_axis_off()\n\n# Add a common subtitle\nfig.suptitle(\n    \"Demographic and Population Distribution (2019)\",\n    fontsize=20,\n    fontweight=\"bold\",\n    y=0.95,\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot total population by census tract\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\ncensus_data.plot(\n    column=\"Perc_Dependent_Pop\",  # Total population column\n    cmap=\"Blues\",          # Color map\n    legend=True,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    ax=ax\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nax.set_title(\"Total Population by Census Tract in Philadelphia\", fontsize=16)\nax.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot Education Attainment and Median Household Income\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Education Attainment\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Perc_Edu_HS_Higher\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Education Attainment by Census Tract\", fontsize=14)\naxes[0].set_axis_off()\n\n# Plot 2: Median Household Income\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Median_Household_Income\",\n    cmap=\"Purples\",\n    scheme=\"quantiles\",\n    k=5,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Median Household Income by Census Tract\", fontsize=14)\naxes[1].set_axis_off()\n\n# Customize legend for Median Household Income\nincome_legend = axes[1].get_legend()\nincome_legend.set_bbox_to_anchor((1.2, 0.1))  # Adjust position to bottom-right\nincome_legend.set_title(\"Income Levels\")\n\n# Add a common title\nfig.suptitle(\n    \"Demographic and Population Distribution (2019)\",\n    fontsize=20,\n    fontweight=\"bold\",\n    y=0.95,\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\nPercentage HS dipolma Percentage Dependent Percentage Non-white\nVisualize these"
  },
  {
    "objectID": "pages/Final.html#combining-all-data-sets",
    "href": "pages/Final.html#combining-all-data-sets",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "2.1 Combining All Data Sets",
    "text": "2.1 Combining All Data Sets\n\n# Ensure both data frames have a common key column, e.g., \"GEOID\"\nif \"GEOID\" not in aggregated_with_canopy_full.columns or \"GEOID\" not in census_data.columns:\n    raise KeyError(\"Both data frames must contain a 'GEOID' column for merging.\")\n\n# Merge the two data frames\ncombined_data = pd.merge(\n    census_data,\n    aggregated_with_canopy_full,\n    on=\"GEOID\",\n    how=\"outer\",  # Use 'outer' to retain all data; use 'inner' for only matching rows\n    suffixes=('', '_canopy')  # Add suffix to distinguish overlapping column names\n)\n\n# Check the result\n# There is a total of 42 Columns!\nprint(combined_data.info())\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 384 entries, 0 to 383\nData columns (total 42 columns):\n #   Column                        Non-Null Count  Dtype   \n---  ------                        --------------  -----   \n 0   STATEFP                       384 non-null    object  \n 1   COUNTYFP                      384 non-null    object  \n 2   TRACTCE                       384 non-null    object  \n 3   GEOID                         384 non-null    object  \n 4   NAME_x                        384 non-null    object  \n 5   NAMELSAD                      384 non-null    object  \n 6   MTFCC                         384 non-null    object  \n 7   FUNCSTAT                      384 non-null    object  \n 8   ALAND                         384 non-null    int64   \n 9   AWATER                        384 non-null    int64   \n 10  INTPTLAT                      384 non-null    object  \n 11  INTPTLON                      384 non-null    object  \n 12  geometry                      384 non-null    geometry\n 13  NAME_y                        384 non-null    object  \n 14  Total_Pop                     384 non-null    int64   \n 15  White_Only                    384 non-null    int64   \n 16  Median_Household_Income       384 non-null    int64   \n 17  state                         384 non-null    object  \n 18  county                        384 non-null    object  \n 19  tract                         384 non-null    object  \n 20  Pop_15_and_Younger            384 non-null    int64   \n 21  Pop_65_and_Older              384 non-null    int64   \n 22  Dependent_Pop                 384 non-null    int64   \n 23  Perc_Dependent_Pop            376 non-null    float64 \n 24  Edu_HS_Higher                 384 non-null    int64   \n 25  Perc_Edu_HS_Higher            376 non-null    float64 \n 26  Non_White                     384 non-null    int64   \n 27  Perc_Non_White                376 non-null    float64 \n 28  NAMELSAD10                    384 non-null    object  \n 29  perc_5plus                    384 non-null    float64 \n 30  casthma_crudeprev             384 non-null    float64 \n 31  cancer_crudeprev              373 non-null    float64 \n 32  hvi_score                     384 non-null    float64 \n 33  geometry_canopy               384 non-null    geometry\n 34  GEOID10_aggregated            377 non-null    object  \n 35  perc_5plus_aggregated         377 non-null    float64 \n 36  casthma_crudeprev_aggregated  377 non-null    float64 \n 37  cancer_crudeprev_aggregated   366 non-null    float64 \n 38  hvi_score_aggregated          377 non-null    float64 \n 39  canopy_area                   384 non-null    float64 \n 40  geometry_aggregated           377 non-null    geometry\n 41  canopy_percent                384 non-null    float64 \ndtypes: float64(13), geometry(3), int64(10), object(16)\nmemory usage: 126.1+ KB\nNone\n\n\n\ncombined_data.head()\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME_x\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\n...\nhvi_score\ngeometry_canopy\nGEOID10_aggregated\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\ncanopy_area\ngeometry_aggregated\ncanopy_percent\n\n\n\n\n0\n42\n101\n000100\n42101000100\n1\nCensus Tract 1\nG5020\nS\n704917\n0\n...\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n42101000100\n0.0\n9.2\n3.4\n-4.917169\n15295.431073\nPOLYGON ((-8365601.290 4859085.382, -8365600.7...\n1.272227\n\n\n1\n42\n101\n000200\n42101000200\n2\nCensus Tract 2\nG5020\nS\n382481\n0\n...\n-2.456924\nPOLYGON ((-8367037.612 4859790.661, -8367072.5...\n42101000200\n0.0\n8.3\n3.2\n-2.456924\n81.808400\nPOLYGON ((-8365814.579 4859375.530, -8365814.3...\n0.012554\n\n\n2\n42\n101\n000300\n42101000300\n3\nCensus Tract 3\nG5020\nS\n546269\n22680\n...\n-3.437875\nPOLYGON ((-8368799.480 4860104.192, -8368897.0...\n42101000300\n0.0\n9.5\n5.1\n-3.437875\n13232.065668\nPOLYGON ((-8367581.108 4859520.898, -8367580.6...\n1.419802\n\n\n3\n42\n101\n000401\n42101000401\n4.01\nCensus Tract 4.01\nG5020\nS\n216838\n15884\n...\n-4.305632\nPOLYGON ((-8368219.166 4859353.414, -8368214.1...\n42101000401\n0.0\n9.3\n5.1\n-4.305632\n5301.358134\nMULTIPOLYGON (((-8368816.086 4859067.085, -836...\n1.332644\n\n\n4\n42\n101\n000402\n42101000402\n4.02\nCensus Tract 4.02\nG5020\nS\n303680\n0\n...\n-2.525256\nPOLYGON ((-8367143.774 4859163.976, -8367128.5...\n42101000402\n0.0\n8.9\n10.0\n-2.525256\n3666.039706\nPOLYGON ((-8367759.219 4859363.332, -8367758.8...\n0.708517\n\n\n\n\n5 rows Ã— 42 columns\n\n\n\n\nprint(combined_data.columns)\n\nIndex(['STATEFP', 'COUNTYFP', 'TRACTCE', 'GEOID', 'NAME_x', 'NAMELSAD',\n       'MTFCC', 'FUNCSTAT', 'ALAND', 'AWATER', 'INTPTLAT', 'INTPTLON',\n       'geometry', 'NAME_y', 'Total_Pop', 'White_Only',\n       'Median_Household_Income', 'state', 'county', 'tract',\n       'Pop_15_and_Younger', 'Pop_65_and_Older', 'Dependent_Pop',\n       'Perc_Dependent_Pop', 'Edu_HS_Higher', 'Perc_Edu_HS_Higher',\n       'Non_White', 'Perc_Non_White', 'NAMELSAD10', 'perc_5plus',\n       'casthma_crudeprev', 'cancer_crudeprev', 'hvi_score', 'geometry_canopy',\n       'GEOID10_aggregated', 'perc_5plus_aggregated',\n       'casthma_crudeprev_aggregated', 'cancer_crudeprev_aggregated',\n       'hvi_score_aggregated', 'canopy_area', 'geometry_aggregated',\n       'canopy_percent'],\n      dtype='object')\n\n\nDo a correlation Do clustering based on median income - if there are differences in tree canopy How does tree canopy matter in reducing negative health outcomes"
  },
  {
    "objectID": "pages/Final.html#log-transformation-of-median-household-income",
    "href": "pages/Final.html#log-transformation-of-median-household-income",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "2.2 Log Transformation of Median Household Income",
    "text": "2.2 Log Transformation of Median Household Income\nThe log transformation is applied to the Median Household Income variable to address potential skewness in the data. Income distributions are often right-skewed, meaning that a small number of observations with very high incomes can disproportionately influence the analysis. By applying a log transformation, we can:\n\nReduce the impact of extreme values, making the data more normally distributed.\nEnhance the interpretability of relationships, as percentage changes in income are often more meaningful than absolute changes.\nImprove the performance of statistical models and clustering algorithms, which often assume normality or are sensitive to outliers.\n\nThe resulting Log_Median_Household_Income variable is used in subsequent analyses to ensure robust and meaningful insights. hts.\n\n# Create a new column with the logged values of \"Median_Household_Income\"\n# Use np.log1p to handle zeros and avoid -inf errors\ncombined_data[\"Log_Median_Household_Income\"] = np.log1p(combined_data[\"Median_Household_Income\"])\n\n# Display the first few rows to verify\nprint(combined_data[[\"Median_Household_Income\", \"Log_Median_Household_Income\"]].head())\n\n   Median_Household_Income  Log_Median_Household_Income\n0                   103585                    11.548157\n1                    49871                    10.817215\n2                    86296                    11.365550\n3                    62986                    11.050684\n4                    78947                    11.276545\n\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\pandas\\core\\arraylike.py:399: RuntimeWarning: invalid value encountered in log1p\n  result = getattr(ufunc, method)(*inputs, **kwargs)"
  },
  {
    "objectID": "pages/Final.html#scatter-plot-analysis",
    "href": "pages/Final.html#scatter-plot-analysis",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "3.1 Scatter Plot Analysis",
    "text": "3.1 Scatter Plot Analysis\nTo identify social and economic demographic indicators associated with areas at risk of health inequities, we explore relationships between the following variables:\n\nIndependent Variables:\n\nPerc_Non_White\nPerc_Dependent_Pop\nPerc_Edu_HS_Higher\nLog_Median_Household_Income\n\nDependent Variables:\n\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\n\n\nThe scatter plot analysis provides insights into potential correlations, while the log transformation of income reduces the impact of extreme values, making the data more normally distributed.\n\n# Independent and dependent variables\nindependent_vars = [\"Perc_Non_White\", \"Perc_Dependent_Pop\", \"Perc_Edu_HS_Higher\", \"Log_Median_Household_Income\"]\ndependent_vars = [\"perc_5plus_aggregated\", \"casthma_crudeprev_aggregated\", \"cancer_crudeprev_aggregated\", \"hvi_score_aggregated\"]\n\n# Enhanced scatter plot generation\nfor indep in independent_vars:\n    for dep in dependent_vars:\n        try:\n            plt.figure(figsize=(10, 6))\n            sns.scatterplot(data=combined_data, x=indep, y=dep, alpha=0.7, edgecolor=None)\n            plt.title(f\"Relationship Between {indep.replace('_', ' ')} and {dep.replace('_', ' ')}\", fontsize=14)\n            plt.xlabel(indep.replace('_', ' '), fontsize=12)\n            plt.ylabel(dep.replace('_', ' '), fontsize=12)\n            plt.grid(True, linestyle='--', alpha=0.5)\n            plt.tight_layout()\n            plt.show()\n        except Exception as e:\n            print(f\"Error encountered while plotting {indep} vs {dep}: {e}\")"
  },
  {
    "objectID": "pages/Final.html#correlation-heatmap-of-features",
    "href": "pages/Final.html#correlation-heatmap-of-features",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "3.2 Correlation Heatmap of Features",
    "text": "3.2 Correlation Heatmap of Features\nThe heatmap visualizes the Pearson correlation coefficients between selected social, economic, and health-related features. These values range from -1 to 1, where:\n\n1 indicates a perfect positive correlation.\n-1 indicates a perfect negative correlation.\n0 indicates no linear correlation.\n\nBy plotting the heatmap, we can identify: - Strong Positive Correlations: Features that move in the same direction. - Strong Negative Correlations: Features that move in opposite directions. - Weak or No Correlations: Features with little or no linear relationship.\nThis helps in understanding the relationships between demographic indicators and health inequities, providing valuable insights for further analysis.\n\n# Define the new column names as a dictionary\ncolumn_rename_map = {\n    \"Perc_Non_White\": \"Percent Non-White\",\n    \"Perc_Dependent_Pop\": \"Percent Dependent Population\",\n    \"Perc_Edu_HS_Higher\": \"Percent with HS or Higher Education\",\n    \"Log_Median_Household_Income\": \"Log Median Household Income\",\n    \"perc_5plus_aggregated\": \"Lead Exposure Percent\",\n    \"casthma_crudeprev_aggregated\": \"Asthma Prevalence\",\n    \"cancer_crudeprev_aggregated\": \"Cancer Prevalence\",\n    \"hvi_score_aggregated\": \"Heat Vulnerability Index\",\n}\n\n# Rename the columns in the dataset\nrenamed_data = combined_data.rename(columns=column_rename_map)\n\n# Select only the renamed columns for the heatmap\nfeature_cols = list(column_rename_map.values())\n\n# Plot the heatmap\nsns.heatmap(\n    renamed_data[feature_cols].corr(), \n    cmap=\"coolwarm\", \n    annot=True, \n    vmin=-1, \n    vmax=1\n)\n\n# Add title and show the plot\nplt.title(\"Correlation Heatmap of Features\")\nplt.show()"
  },
  {
    "objectID": "pages/Final.html#need-a-explanation-for-this-heatmap",
    "href": "pages/Final.html#need-a-explanation-for-this-heatmap",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "need a explanation for this heatmap",
    "text": "need a explanation for this heatmap\n\nPercent of Non-white population vs Percent of children under the age of 6 with higher blood lead levels: Positive relationship (0.63)\nPercent of Non-white population vs Prevalence of current asthma among adults aged &gt;=18 years : Positive relationship (0.71)\nPercent of Non-white population vs HVI Score : Positive relationship (0.89)\nPercent of Dependent Population vs Prevalence of cancer (excluding skin cancer) among adults aged &gt;=18 years: Positive relationship (0.62)\nPercent of High Degree vs Percent of children under the age of 6 with higher blood lead levels: Negative relationship (0.40)\nPercent of High Degree vs Prevalence of current asthma among adults aged &gt;=18 years: Negative relationship (0.54)\nPercent of High Degree vs HVI Score: Negative relationship (0.58)\nMedian Household Income (Logged) vs Percent of children under the age of 6 with higher blood lead levels: Negative relationship (0.61)\nMedian Household Income (Logged) vs Prevalence of current asthma among adults aged &gt;=18 years : Negative relationship (0.70)\nMedian Household Income (Logged) vs HVI Score: Negative relationship (0.78)"
  },
  {
    "objectID": "pages/Final.html#non-spatial-clustering",
    "href": "pages/Final.html#non-spatial-clustering",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "4.1 Non-Spatial Clustering",
    "text": "4.1 Non-Spatial Clustering\nTo analyze the socio-economic status and its potential impact on health outcomes, we create a new DataFrame focusing on tree canopy effects. The goal is to examine whether areas with similar socio-economic characteristics exhibit differences in the distribution of cancer prevalence, asthma rates, and the heat vulnerability index.\nIf significant differences are observed, it suggests the need for tailored policy interventions by the City of Philadelphia to address these disparities effectively.\nFor clustering, the following socio-economic variables were used as criteria: - Perc_Non_White (Percent Non-White) - Perc_Dependent_Pop (Percent Dependent Population) - Perc_Edu_HS_Higher (Percent with HS or Higher Education) - Log_Median_Household_Income (Log Median Househod Income)\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Step 1: Set the environment variable to suppress memory leak warning\nos.environ['OMP_NUM_THREADS'] = '2'\n\n# Step 2: Scale the data\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(combined_data[['Perc_Non_White', \n                                                  'Perc_Dependent_Pop', \n                                                  'Perc_Edu_HS_Higher', \n                                                  'Log_Median_Household_Income']])\n\n# Step 3: Run KMeans\nkmeans = KMeans(n_clusters=3, random_state=42)  # Adjust number of clusters\nkmeans.fit(data_scaled)\n\n# Step 4: Add labels to the original DataFrame\ncombined_data['label'] = kmeans.labels_\n\n# Step 5: Display the DataFrame with cluster labels\nprint(combined_data.head())\n\n  STATEFP COUNTYFP TRACTCE        GEOID NAME_x           NAMELSAD  MTFCC  \\\n0      42      101  000100  42101000100      1     Census Tract 1  G5020   \n1      42      101  000200  42101000200      2     Census Tract 2  G5020   \n2      42      101  000300  42101000300      3     Census Tract 3  G5020   \n3      42      101  000401  42101000401   4.01  Census Tract 4.01  G5020   \n4      42      101  000402  42101000402   4.02  Census Tract 4.02  G5020   \n\n  FUNCSTAT   ALAND  AWATER  ... GEOID10_aggregated perc_5plus_aggregated  \\\n0        S  704917       0  ...        42101000100                   0.0   \n1        S  382481       0  ...        42101000200                   0.0   \n2        S  546269   22680  ...        42101000300                   0.0   \n3        S  216838   15884  ...        42101000401                   0.0   \n4        S  303680       0  ...        42101000402                   0.0   \n\n  casthma_crudeprev_aggregated cancer_crudeprev_aggregated  \\\n0                          9.2                         3.4   \n1                          8.3                         3.2   \n2                          9.5                         5.1   \n3                          9.3                         5.1   \n4                          8.9                        10.0   \n\n   hvi_score_aggregated   canopy_area  \\\n0             -4.917169  15295.431073   \n1             -2.456924     81.808400   \n2             -3.437875  13232.065668   \n3             -4.305632   5301.358134   \n4             -2.525256   3666.039706   \n\n                                 geometry_aggregated canopy_percent  \\\n0  POLYGON ((-8365601.290 4859085.382, -8365600.7...       1.272227   \n1  POLYGON ((-8365814.579 4859375.530, -8365814.3...       0.012554   \n2  POLYGON ((-8367581.108 4859520.898, -8367580.6...       1.419802   \n3  MULTIPOLYGON (((-8368816.086 4859067.085, -836...       1.332644   \n4  POLYGON ((-8367759.219 4859363.332, -8367758.8...       0.708517   \n\n  Log_Median_Household_Income label  \n0                   11.548157     1  \n1                   10.817215     2  \n2                   11.365550     1  \n3                   11.050684     1  \n4                   11.276545     1  \n\n[5 rows x 44 columns]\n\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1446: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.\n  warnings.warn("
  },
  {
    "objectID": "pages/Final.html#plot-of-clustering-by-similar-socio-economic-status",
    "href": "pages/Final.html#plot-of-clustering-by-similar-socio-economic-status",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "4.2 Plot of Clustering by Similar Socio-Economic Status",
    "text": "4.2 Plot of Clustering by Similar Socio-Economic Status\nThis code visualizes KMeans clustering results on a map using GeoPandas and Matplotli.\n\n# Step 1: Convert the DataFrame to a GeoDataFrame if not already one\ngeo_combined_data = gpd.GeoDataFrame(combined_data, geometry='geometry')\n\n# Step 2: Ensure CRS is set and transform to EPSG:3857\nif geo_combined_data.crs is None:\n    geo_combined_data.set_crs(\"EPSG:4326\", inplace=True)  # Assuming original CRS is EPSG:4326\ngeo_combined_data = geo_combined_data.to_crs(\"EPSG:3857\")\n\n# Step 3: Plot the clusters without x and y information\nfig, ax = plt.subplots(figsize=(10, 8))\ngeo_combined_data.plot(column='label', categorical=True, legend=True, cmap='tab10', ax=ax, legend_kwds={'frameon': False})\n\n# Step 4: Add a title\nax.set_title('KMeans Clustering by Labels', fontsize=16)\n\n# Step 5: Remove axis labels, ticks, and bounding box\nax.set_axis_off()  # Turn off the entire axis\nplt.tight_layout()\n\n# Step 6: Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n4.3 Export Clusters by Label\nThis code ensures that the GeoDataFrame has only one active geometry column and exports each cluster as a separate GeoJSON file:\n\n# Handle Geometry Columns\ngeo_combined_data = geo_combined_data[[col for col in geo_combined_data.columns if not col.startswith('geometry_')]]\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n\n# Step 1: Define the base output directory\nbase_path = \"data/\"\noutput_dir = os.path.join(base_path, \"output_by_label\")\nos.makedirs(output_dir, exist_ok=True)\n\n# Step 2: Ensure only one geometry column\n# Drop other geometry columns if they exist\ngeometry_columns = [col for col in geo_combined_data.columns if geo_combined_data[col].dtype.name == 'geometry']\nif len(geometry_columns) &gt; 1:\n    print(\"Multiple geometry columns detected. Dropping all but the active one.\")\n    geo_combined_data = geo_combined_data.drop(columns=[col for col in geometry_columns if col != 'geometry'])\n\n# Ensure the 'geometry' column is set as the active geometry\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n# Step 3: Iterate over unique labels and save each subset\nfor label in geo_combined_data['label'].unique():\n    label_data = geo_combined_data[geo_combined_data['label'] == label]\n    file_path = os.path.join(output_dir, f\"label_{label}.geojson\")  # Output file path\n    label_data.to_file(file_path, driver=\"GeoJSON\")  # Save as GeoJSON\n    print(f\"Saved data for label {label} to {file_path}\")\n\nSaved data for label 1 to data/output_by_label\\label_1.geojson\nSaved data for label 2 to data/output_by_label\\label_2.geojson\nSaved data for label 0 to data/output_by_label\\label_0.geojson\n\n\n\n\n5.1 Clustering Analysis\nThis code creates box plots to analyze the distribution of selected socio-economic variables across different clusters.\n\n# List of columns to analyze\ncolumns_to_plot = ['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']\n\n# Create a box plot for each column\nfor column in columns_to_plot:\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n    plt.title(f\"Distribution of {column} Across Clusters\", fontsize=16)\n    plt.xlabel(\"Cluster Labels\", fontsize=12)\n    plt.ylabel(column, fontsize=12)\n    plt.tight_layout()\n    plt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")"
  },
  {
    "objectID": "pages/Final.html#box-plot-explanation",
    "href": "pages/Final.html#box-plot-explanation",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "Box Plot Explanation",
    "text": "Box Plot Explanation\n\nLabel == 0: Represents a group with low median household income, low percentage of individuals with a high school degree or higher, low dependent population percentage, and a relatively high percentage of non-white population.\nLabel == 1: Represents a group with high median income, high education levels, medium dependent population percentage, and a low percentage of non-white population.\nLabel == 2: Represents a group with a high percentage of non-white population and dependent population, along with relatively low median household income and lower education levels. In contrast to Label == 0 and Label == 1, this group has a significant number of outliers, suggesting the need to exclude these outliers in further analysis.\n\n\nFrom the box plots: - Label == 0 represents a socio-economically vulnerable population, with lower median household income, lower education levels, and a higher percentage of non-white population. - While Label == 1 has a higher dependent population percentage, Label == 0 demonstrates more socio-economic vulnerabilites overall.\n\n5.2 Tree Canopy Effect on Public Health\nThis analysis examines the relationship between tree canopy coverage and public health outcomes within clusters of similar socio-economic status.\n\nKey Variables: Includes tree canopy percentage, lead exposure, asthma prevalence, cancer prevalence, and heat vulnerability index.\nMethodology: For each cluster, correlations between these variables are computed and visualized using heatmaps.\nObjective: To identify how tree canopy affects public health indicators across different socio-economic groups.\n\n\n# Directory containing the GeoJSON files\ninput_dir = \"data/output_by_label\"\n\n# Iterate through each GeoJSON file\nfor file_name in os.listdir(input_dir):\n    if file_name.endswith(\".geojson\"):\n        file_path = os.path.join(input_dir, file_name)\n        \n        # Load the GeoJSON file into a GeoDataFrame\n        gdf = gpd.read_file(file_path)\n        \n        # Extract the required columns\n        required_columns = ['canopy_percent', 'perc_5plus_aggregated', \n                            'casthma_crudeprev_aggregated', 'cancer_crudeprev_aggregated', \n                            'hvi_score_aggregated']\n        \n        # Ensure columns exist in the GeoDataFrame\n        missing_columns = [col for col in required_columns if col not in gdf.columns]\n        if missing_columns:\n            print(f\"Skipping {file_name}: Missing columns {missing_columns}\")\n            continue\n        \n        # Compute the correlation matrix\n        correlation_matrix = gdf[required_columns].corr()\n        \n        # Plot the correlation matrix as a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", cbar=True)\n        plt.title(f\"Correlation Matrix for {file_name}\", fontsize=16)\n        plt.tight_layout()\n        \n        # Display the heatmap\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\nThis analysis highlights the role of tree canopy coverage in influencing public health outcomes across different socio-economic groups in Philadelphia.\n\nGroup 0 (Label-0 in Clustering):\n\nSocio-Economic Characteristics: Represents a socio-economically vulnerable population with lower median household income, lower education levels, lower dependent population percentage, and a higher percentage of non-white residents.\nFindings: Tree canopy coverage shows a negative correlation with:\n\nLead exposure (perc_5plus_aggregated)\nAsthma rate (casthma_crudeprev_aggregated)\nCancer rate (cancer_crudeprev_aggregated)\nHeat Vulnerability Index (hvi_score_aggregated)\n\nImplications: These results suggest that increasing tree canopy in vulnerable areas could lead to substantial improvements in public health outcomes. The City of Philadelphia should prioritize aggressive tree-planting initiatives in these regions.\n\n\n\nGroup 1 (Label-1 in Clustering):\n\nSocio-Economic Characteristics: Represents a less vulnerable population with higher median household income, higher education levels, medium dependent population percentage, and a lower percentage of non-white residents.\nFindings:\n\nNegative correlation between tree canopy and lead exposure, as well as asthma rates, indicating a continued beneficial effect of tree canopy coverage on these outcomes.\nWeak positive correlations between tree canopy and both cancer rates (cancer_crudeprev_aggregated) and heat vulnerability index (hvi_score_aggregated), suggesting a more complex relationship in this group.\n\nImplications: Tree canopy remains important in less vulnerable areas, but its impact may be more limited for certain public health indicators like cancer rates and heat vulnerability.\n\n\n\nGroup 2 (Label-2 in Clustering):\n\nExclusion: This group was excluded from the analysis due to significant outliers identified in the box plots, which undermine the reliability of the results for this cluster.\n\n\n\nKey Takeaways:\n\nThere is a distinct difference in the relationship between tree canopy coverage and public health outcomes across socio-economic groups.\n\nVulnerable Groups (Group 0): Strong negative correlations highlight the urgent need for targeted tree-planting initiatives to improve health outcomes.\nLess Vulnerable Groups (Group 1): While tree canopy remains beneficial, the impact is less pronounced, with some indicators showing positive correlations.\n\nThe City of Philadelphia should prioritize tree-planting efforts in highly vulnerable areas characterized by:\n\nLow median household income\nLow education levels\nLower dependent population percentages\nHigher non-white population percentages\n\n\nBy addressing health inequities through targeted tree canopy initiatives, the city can improve public health outcomes in communities that need it most."
  },
  {
    "objectID": "pages/Final-Copy2.html",
    "href": "pages/Final-Copy2.html",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "",
    "text": "Yujin Song and Lu Yii Wong\nMUSA 550\n26 December, 2024"
  },
  {
    "objectID": "pages/Final-Copy2.html#environment-setup",
    "href": "pages/Final-Copy2.html#environment-setup",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "Environment Setup",
    "text": "Environment Setup\n\n# Imports\nfrom census import Census\nimport pandas as pd\nimport os\nimport cenpy\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport seaborn as sns\nimport pygris\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\n\n# Set your Census API key\nCENSUS_API_KEY = \"c914e209b7760882fdf1c8aa19f82f743e584747\"\nc = Census(CENSUS_API_KEY)\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\fuzzywuzzy\\fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')"
  },
  {
    "objectID": "pages/Final-Copy2.html#load-spatial-data",
    "href": "pages/Final-Copy2.html#load-spatial-data",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.1 Load Spatial Data",
    "text": "1.1 Load Spatial Data\nA GeoJSON holding for Philadelphia census tract boundary is available in the data/ directory.\n\ntract = gpd.read_file(\"data/Census_Tracts_2010 (2).geojson\")\n\ntract.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\nAWATER10\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n0\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-75.22927 39.96054, -75.22865 39.960...\n\n\n1\n2\n42\n101\n009500\n42101009500\n95\nCensus Tract 95\nG5020\nS\n319070\n0\n+39.9658709\n-075.2379140\n10430\nPOLYGON ((-75.23536 39.96852, -75.23545 39.969...\n\n\n2\n3\n42\n101\n009600\n42101009600\n96\nCensus Tract 96\nG5020\nS\n405273\n0\n+39.9655396\n-075.2435075\n10431\nPOLYGON ((-75.24343 39.96230, -75.24339 39.962...\n\n\n3\n4\n42\n101\n013800\n42101013800\n138\nCensus Tract 138\nG5020\nS\n341256\n0\n+39.9764504\n-075.1771771\n10468\nPOLYGON ((-75.17341 39.97779, -75.17386 39.977...\n\n\n4\n5\n42\n101\n013900\n42101013900\n139\nCensus Tract 139\nG5020\nS\n562934\n0\n+39.9750563\n-075.1711846\n10469\nPOLYGON ((-75.17313 39.97776, -75.17321 39.977...\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\nax =tract.to_crs(epsg=3857).plot(ax=ax, facecolor=\"none\", edgecolor=\"black\")\n\nax.set_axis_off()\nax.set_aspect(\"equal\")"
  },
  {
    "objectID": "pages/Final-Copy2.html#child-lead-blood-level",
    "href": "pages/Final-Copy2.html#child-lead-blood-level",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.2 Child Lead Blood Level",
    "text": "1.2 Child Lead Blood Level\n\nlead = gpd.read_file(\"data/child_blood_lead_levels_by_ct.geojson\")\n\n\nlead.head()\nprint(lead.crs)\nprint(tract.crs)\n\nEPSG:4326\nEPSG:4326\n\n\n\ntract = tract.to_crs(epsg=3857)  # Ensure 'tract' is in projected CRS\nlead = lead.to_crs(epsg=3857) \n\n\n# Spatial join between ceansus tracts and lead data\njoined = gpd.sjoin(tract, lead, how=\"left\", predicate=\"intersects\")\n\njoined.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\n...\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\nindex_right\ncensus_tract\ndata_redacted\nnum_bll_5plus\nnum_screen\nperc_5plus\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n83\n42101008500\nFalse\n30.0\n492.0\n6.1\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n93\n42101009300\nFalse\n19.0\n315.0\n6.0\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n94\n42101009400\nFalse\n14.0\n306.0\n4.6\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n95\n42101009500\nFalse\n11.0\n253.0\n4.3\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n101\n42101010200\nFalse\n17.0\n235.0\n7.2\n\n\n\n\n5 rows Ã— 21 columns\n\n\n\n\n# Replace 'NAMELSAD10' and 'perc_5plus' with the appropriate column names\nlead_aggregated = joined.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",  # Example: Average value from lead\n    \"geometry\": \"first\"     # Keep one geometry per tract\n}).reset_index()\n\nlead_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(type(lead_aggregated))\nprint(lead_aggregated.geometry.head())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n0    POLYGON ((-8364710.415 4858926.985, -8364708.8...\n1    POLYGON ((-8366008.694 4858067.328, -8366013.2...\n2    POLYGON ((-8365697.832 4857770.055, -8365707.4...\n3    POLYGON ((-8376459.164 4861101.785, -8376441.0...\n4    POLYGON ((-8375582.343 4861569.516, -8375572.4...\nName: geometry, dtype: geometry\n\n\n\nlead_aggregated = gpd.GeoDataFrame(lead_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n# Replace NaN values with -1 for visualization\nlead_aggregated[\"perc_5plus\"] = lead_aggregated[\"perc_5plus\"].fillna(-1)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\nlead_aggregated.plot(\n    ax=ax,\n    column=\"perc_5plus\",  # Use the column with lead level data\n    cmap=\"viridis\",       # Colormap for numerical data\n    edgecolor=\"white\",    # Boundary color\n    legend=True,          # Add legend\n    legend_kwds={\n        \"label\": \"Lead Level Percentage\\n(-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Format the plot\nax.set_title(\"Average Lead Level Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy2.html#cancer-and-asthma",
    "href": "pages/Final-Copy2.html#cancer-and-asthma",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.3 Cancer and Asthma",
    "text": "1.3 Cancer and Asthma\n\ncancer_asthma= gpd.read_file(\"data/philadelphia_gdf.geojson\")\n\ncancer_asthma.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\ngeometry\n\n\n\n\n0\nPhiladelphia\n42101002500\n11.3\n5.2\n3769\nPOINT (-8365639.619 4856398.197)\n\n\n1\nPhiladelphia\n42101003702\n12.8\n4.8\n3707\nPOINT (-8369269.171 4854982.142)\n\n\n2\nPhiladelphia\n42101031401\n11.6\n4.1\n6664\nPOINT (-8356372.430 4872587.322)\n\n\n3\nPhiladelphia\n42101031502\n11.7\n6.2\n4018\nPOINT (-8355069.752 4871650.082)\n\n\n4\nPhiladelphia\n42101033200\n10.4\n6.7\n2741\nPOINT (-8353959.244 4872306.058)\n\n\n\n\n\n\n\n\ncancer_asthma = cancer_asthma.to_crs(epsg=3857)\n\n\nselected_columns = [\"countyname\", \"tractfips\",\"geometry\", \"casthma_crudeprev\", \"cancer_crudeprev\", \"totalpopulation\"]\nfiltered_gdf = cancer_asthma[selected_columns]\n\n# Check the result\nprint(filtered_gdf.head())\n\n     countyname    tractfips                          geometry  \\\n0  Philadelphia  42101002500  POINT (-8365639.619 4856398.197)   \n1  Philadelphia  42101003702  POINT (-8369269.171 4854982.142)   \n2  Philadelphia  42101031401  POINT (-8356372.430 4872587.322)   \n3  Philadelphia  42101031502  POINT (-8355069.752 4871650.082)   \n4  Philadelphia  42101033200  POINT (-8353959.244 4872306.058)   \n\n  casthma_crudeprev cancer_crudeprev totalpopulation  \n0              11.3              5.2            3769  \n1              12.8              4.8            3707  \n2              11.6              4.1            6664  \n3              11.7              6.2            4018  \n4              10.4              6.7            2741  \n\n\n\n# Filter for rows where CountyName is Philadelphia\nphiladelphia_gdf = filtered_gdf[filtered_gdf[\"countyname\"].str.contains(\"Philadelphia\", case=False, na=False)]\n\n# Check the result\nphiladelphia_gdf.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ngeometry\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\n\n\n\n\n0\nPhiladelphia\n42101002500\nPOINT (-8365639.619 4856398.197)\n11.3\n5.2\n3769\n\n\n1\nPhiladelphia\n42101003702\nPOINT (-8369269.171 4854982.142)\n12.8\n4.8\n3707\n\n\n2\nPhiladelphia\n42101031401\nPOINT (-8356372.430 4872587.322)\n11.6\n4.1\n6664\n\n\n3\nPhiladelphia\n42101031502\nPOINT (-8355069.752 4871650.082)\n11.7\n6.2\n4018\n\n\n4\nPhiladelphia\n42101033200\nPOINT (-8353959.244 4872306.058)\n10.4\n6.7\n2741\n\n\n\n\n\n\n\n\ncancer_asthma_aggregated = gpd.sjoin(lead_aggregated, philadelphia_gdf, how=\"left\", predicate=\"intersects\")\n\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\nindex_right\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n347.0\nPhiladelphia\n42101000100\n9.2\n3.4\n3478\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n306.0\nPhiladelphia\n42101001001\n8.9\n8.4\n2603\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n201.0\nPhiladelphia\n42101001002\n9.0\n7.2\n3612\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n261.0\nPhiladelphia\n42101010000\n13.5\n4.6\n4366\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n177.0\nPhiladelphia\n42101010100\n13.6\n5.5\n5459\n\n\n\n\n\n\n\n\n# Get the number of rows\nnum_rows = cancer_asthma_aggregated.shape[0]\nprint(f\"Number of rows: {num_rows}\")\n\nNumber of rows: 386\n\n\n\nprint(cancer_asthma_aggregated[\"casthma_crudeprev\"].dtype)\nprint(cancer_asthma_aggregated[\"cancer_crudeprev\"].dtype)\n\nobject\nobject\n\n\n\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"casthma_crudeprev\"], errors=\"coerce\")\ncancer_asthma_aggregated[\"cancer_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"cancer_crudeprev\"], errors=\"coerce\")\n\n\n# Get the range of 'casthma_crudeprev'\nasthma_min = cancer_asthma_aggregated[\"casthma_crudeprev\"].min()\nasthma_max = cancer_asthma_aggregated[\"casthma_crudeprev\"].max()\nprint(f\"Range of 'casthma_crudeprev': {asthma_min} to {asthma_max}\")\n\n# Get the range of 'cancer_crudeprev'\ncancer_min = cancer_asthma_aggregated[\"cancer_crudeprev\"].min()\ncancer_max = cancer_asthma_aggregated[\"cancer_crudeprev\"].max()\nprint(f\"Range of 'cancer_crudeprev': {cancer_min} to {cancer_max}\")\n\nRange of 'casthma_crudeprev': 8.3 to 17.4\nRange of 'cancer_crudeprev': 0.8 to 17.6\n\n\n\ncancer_asthma_aggregated = cancer_asthma_aggregated.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(f\"Number of rows after cleaning: {cancer_asthma_aggregated.shape[0]}\")\n\nNumber of rows after cleaning: 384\n\n\n\ncancer_asthma_aggregated = gpd.GeoDataFrame(cancer_asthma_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n# Fill NaN values with a placeholder (-1) for \"No Data\"\ncancer_asthma_aggregated[\"cancer_crudeprev_filled\"] = cancer_asthma_aggregated[\"cancer_crudeprev\"].fillna(-1)\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = cancer_asthma_aggregated[\"casthma_crudeprev\"].fillna(-1)\n\n\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\ncancer_asthma_aggregated.plot(\n    ax=axes[0],\n    column=\"cancer_crudeprev\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Cancer Prevalence (-1 = No Data)\"},\n)\naxes[0].set_title(\"Cancer Prevalence by Census Tract\")\naxes[0].set_axis_off()\n\ncancer_asthma_aggregated.plot(\n    ax=axes[1],\n    column=\"casthma_crudeprev\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Asthma Prevalence (-1 = No Data)\"},\n)\naxes[1].set_title(\"Asthma Prevalence by Census Tract\")\naxes[1].set_axis_off()\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy2.html#heat-vulnerability",
    "href": "pages/Final-Copy2.html#heat-vulnerability",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.4 Heat Vulnerability",
    "text": "1.4 Heat Vulnerability\n\nheatindex = gpd.read_file(\"data/heat_vulnerability_ct.geojson\")\n\nheatindex.head()\n\n\n\n\n\n\n\n\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n42101002100\n21\n0\n2023\n0.502262\n-1.481429\n0.639224\n1\n4.044948e+05\n2580.858471\nPOLYGON ((-75.17370 39.93624, -75.17378 39.935...\n\n\n1\n42101002200\n22\n0\n2023\n-3.183298\n-1.658469\n-1.769318\n2\n3.894601e+05\n2518.894793\nPOLYGON ((-75.17370 39.93624, -75.17369 39.936...\n\n\n2\n42101002300\n23\n0\n2023\n-6.884403\n-1.193579\n-4.362779\n3\n3.616223e+05\n2771.142380\nPOLYGON ((-75.16702 39.93675, -75.16696 39.936...\n\n\n3\n42101002400\n24\n0\n2023\n-7.107618\n-1.382308\n-4.462616\n4\n9.117703e+05\n4810.554362\nPOLYGON ((-75.16629 39.94004, -75.16623 39.940...\n\n\n4\n42101034803\n348.03\n0\n2023\n-7.830042\n-0.358619\n-5.684468\n5\n2.186876e+06\n6444.130598\nPOLYGON ((-75.00888 40.05866, -75.00915 40.059...\n\n\n\n\n\n\n\n\nheatindex = heatindex.to_crs(epsg=3857)\n\n# Perform the spatial join\njoined_with_heatindex = gpd.sjoin(cancer_asthma_aggregated, heatindex, how=\"left\", predicate=\"intersects\")\n\n\n# Display the first few rows\njoined_with_heatindex.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\ncancer_crudeprev_filled\nindex_right\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n177\n42101036600\n366\n0\n2023\n-8.418257\n-2.202868\n-5.749989\n178\n4.168056e+06\n12166.444233\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n291\n42101000100\n1\n0\n2023\n-11.402807\n-3.314470\n-7.514585\n292\n1.202257e+06\n4528.078584\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n314\n42101036700\n367\n0\n2023\n-8.857523\n-4.177542\n-5.601159\n315\n1.365371e+06\n4905.453398\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n315\n42101037600\n376\n0\n2023\n-1.707536\n-2.097253\n-0.802943\n316\n1.222412e+06\n4704.678043\n\n\n1\nCensus Tract 10.01\n42101001001\n0.0\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n8.4\n23\n42101001001\n10.01\n0\n2023\n-8.117465\n-1.167082\n-5.634836\n24\n3.907849e+05\n2942.081107\n\n\n\n\n\n\n\n\n# Check the number of rows and columns\nprint(f\"Number of rows: {joined_with_heatindex.shape[0]}\")\nprint(f\"Number of columns: {joined_with_heatindex.shape[1]}\")\n\nNumber of rows: 1757\nNumber of columns: 18\n\n\n\naggregated_heat = joined_with_heatindex.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\naggregated_heat.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\nhvi_score\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\n2.479992\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\n3.499149\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(f\"Number of rows: {aggregated_heat.shape[0]}\")\n\nNumber of rows: 384\n\n\n\naggregated_heat = gpd.GeoDataFrame(aggregated_heat, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n# Handle missing data\naggregated_heat[\"hvi_score\"] = aggregated_heat[\"hvi_score\"].fillna(-1)  # Replace NaN with -1 for \"No Data\"\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_heat.plot(\n    ax=ax,\n    column=\"hvi_score\",  # Replace with the HVI column name\n    cmap=\"YlOrRd\",       # Colormap for heat index visualization\n    edgecolor=\"white\",  \n    linewidth = 0.5,\n    legend=True,         # Add a legend\n    legend_kwds={\n        \"label\": \"Heat Vulnerability Index (HVI) Score (-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Add title and remove axis\nax.set_title(\"Heat Vulnerability Index (HVI) Score by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy2.html#tree-canpoy",
    "href": "pages/Final-Copy2.html#tree-canpoy",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.5 Tree Canpoy",
    "text": "1.5 Tree Canpoy\n\ntree_canopy = gpd.read_file(\"data/ppr_tree_canopy_outlines_2015.geojson\")\n# Ensure CRS alignment\ntree_canopy = tree_canopy.to_crs(\"EPSG:3857\")\naggregated_heat = aggregated_heat.to_crs(\"EPSG:3857\")\n\n# Perform spatial intersection\nintersected = gpd.overlay(tree_canopy, aggregated_heat, how=\"intersection\")\n\n# Calculate tree canopy area (in square meters)\nintersected[\"canopy_area\"] = intersected.geometry.area\n\naggregated_with_canopy = intersected.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"canopy_area\": \"sum\",         # Total canopy area within each tract\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n# Merge the aggregated results back with the original GeoDataFrame\naggregated_with_canopy_full = aggregated_heat.merge(\n    aggregated_with_canopy, \n    on=\"NAMELSAD10\", \n    how=\"left\", \n    suffixes=(\"\", \"_aggregated\")\n)\n\n# Rename columns\naggregated_with_canopy_full = aggregated_with_canopy_full.rename(\n    columns={\n        \"GEOID10\": \"GEOID\" # Rename GEOID to match Census\n    }\n)\n\n# Fill missing values for 'canopy_area' and 'canopy_percent' with 0\naggregated_with_canopy_full[\"canopy_area\"] = aggregated_with_canopy_full[\"canopy_area\"].fillna(0)\naggregated_with_canopy_full[\"canopy_percent\"] = aggregated_with_canopy_full[\"canopy_area\"] / aggregated_with_canopy_full.geometry.area * 100\n\naggregated_with_canopy_full.head()\n\n\n\n\n\n\n\n\nobjectid\navg_height\npolyid\nfcode\nshape_length\nshape_area\ngeometry\n\n\n\n\n0\n2\n6\n3\n3000\n66.000526\n279.453508\nMULTIPOLYGON (((-75.27506 39.97745, -75.27505 ...\n\n\n1\n14\n17\n23\n3000\n70.425045\n351.315225\nMULTIPOLYGON (((-75.26884 39.97958, -75.26884 ...\n\n\n2\n15\n32\n24\n3000\n46.593473\n108.578054\nMULTIPOLYGON (((-75.26510 39.96519, -75.26512 ...\n\n\n3\n19\n15\n28\n3000\n67.783315\n293.959714\nMULTIPOLYGON (((-75.27271 39.97838, -75.27271 ...\n\n\n4\n28\n32\n37\n3000\n979.079210\n9433.259404\nMULTIPOLYGON (((-75.26491 39.96518, -75.26497 ...\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_with_canopy_full.plot(\n    ax=ax,\n    column=\"canopy_percent\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth = 0.2,\n    legend=True,\n    legend_kwds={\n        \"label\": \"Tree Canopy Percentage\",\n        \"orientation\": \"vertical\",\n    },\n)\n\nax.set_title(\"Tree Canopy Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy2.html#census-data",
    "href": "pages/Final-Copy2.html#census-data",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.6 Census Data",
    "text": "1.6 Census Data\n\navailable = cenpy.explorer.available()\n\n# Return a dataframe for 5 year ACS\n# Axis=0 means to filter the index labels!\nacs = available.filter(regex=\"^ACSDT5Y\", axis=0)\n\n# Choosing only 2019 ACS 5-Year\n## 2019 chosen over 2021 because of the number of census tracts\nacs = cenpy.remote.APIConnection(\"ACSDT5Y2019\")\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\cenpy\\explorer.py:70: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  listcols = raw_table.applymap(lambda x: isinstance(x, list)).any()\n\n\n\n\n\n\n\n\n\nc_isTimeseries\ntemporal\nspatial\nc_isAggregate\npublisher\nreferences\nprogramCode\nmodified\nlicense\nkeyword\n...\ndescription\nbureauCode\naccessLevel\ntitle\nc_isAvailable\nc_isCube\nc_isMicrodata\nc_documentationLink\nc_dataset\nvintage\n\n\n\n\nACSDT5Y2009\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-08-27 13:11:18.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2009.0\n\n\nACSDT5Y2010\nNaN\nNaN\nUnited States\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2010.0\n\n\nACSDT5Y2011\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2011.0\n\n\nACSDT5Y2012\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2012.0\n\n\nACSDT5Y2013\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2013.0\n\n\nACSDT5Y2014\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2014.0\n\n\nACSDT5Y2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-05 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2015.0\n\n\nACSDT5Y2016\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-05 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2016.0\n\n\nACSDT5Y2017\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-08-21 07:11:43.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2017.0\n\n\nACSDT5Y2018\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-22 16:28:02.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2018.0\n\n\nACSDT5Y2019\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-04-03 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2019.0\n\n\nACSDT5Y2020\nNaN\n2020/2020\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2021-07-13 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2020.0\n\n\nACSDT5Y2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-08-08 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2021.0\n\n\nACSDT5Y2022\nNaN\n2022/2022\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2023-09-05 12:01:39.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2022.0\n\n\nACSDT5Y2023\nNaN\n2023/2023\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2024-09-06 17:27:47.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2023.0\n\n\nACSDT5YAIAN2010\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-24 07:18:57.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: A...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2010.0\n\n\nACSDT5YAIAN2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-02-13 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nACS 5-Year AIAN Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2015.0\n\n\nACSDT5YAIAN2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-11-29 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: A...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2021.0\n\n\nACSDT5YSPT2010\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-11 14:16:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are rele...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2010.0\n\n\nACSDT5YSPT2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-02-18 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are rele...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2015.0\n\n\nACSDT5YSPT2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-11-29 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are relea...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2021.0\n\n\n\n\n21 rows Ã— 23 columns\n\n\n\nFor the purpose of this project, we are interested in finding the following:\n- Average Median Income - Percentage Non-White Population - Population with High School Dipolma or Higher (Age 25+) - Percent Dependent Population (Age 0-15 and 65 and older)\n\n# Variables from Census\nvariables = [\n    \"NAME\",\n    \"B03002_001E\",  # Total population\n    \"B03002_003E\",  # Not Hispanic, White\n    \"B19013_001E\",  # Median household income\n    \"B15003_017E\",  # High School diploma \n    \"B15003_018E\",  # GED or alternative\n    \"B15003_019E\",  # Some college\n    \"B15003_020E\",  # Some college, more than 1 year\n    \"B15003_021E\",  # Associate's Degree\n    \"B15003_022E\",  # Bachelor's degree\n    \"B15003_023E\",  # Master's degree\n    \"B15003_024E\",  # Professional School\n    \"B15003_025E\",  # Doctorate degree\n    \"B01001_003E\",  # Male Population under 5\n    \"B01001_004E\",  # Male Population 5-9\n    \"B01001_005E\",  # Male Population 10-14\n    \"B01001_020E\",  # Male Population 65-66\n    \"B01001_021E\",  # Male Population 67-69\n    \"B01001_022E\",  # Male Population 70-74\n    \"B01001_023E\",  # Male Population 75-79\n    \"B01001_024E\",  # Male Population 80-84\n    \"B01001_025E\",  # Male Population 85 and older\n    \"B01001_027E\",  # Female Population under 5\n    \"B01001_028E\",  # Female Population 5-9\n    \"B01001_029E\",  # Female Population 10-14\n    \"B01001_044E\",  # Female Population 65-66\n    \"B01001_045E\",  # Female Population 67-69\n    \"B01001_046E\",  # Female Population 70-74\n    \"B01001_047E\",  # Female Population 75-79\n    \"B01001_048E\",  # Female Population 80-84\n    \"B01001_049E\"   # Female Population 85 and older\n]\n\n\n# Define codes for Philly\nphilly_county_code = \"101\"\npa_state_code = \"42\"\n\n# Adjust the geo_unit to query census tracts\nphilly_census_data = acs.query(\n    cols=variables,\n    geo_unit=\"tract:*\", \n    geo_filter={\"state\": pa_state_code, \"county\": philly_county_code}\n)\n\n\n\n\n\n\n\n\nNAME\nB03002_001E\nB03002_003E\nB19013_001E\nB15003_017E\nB15003_018E\nB15003_019E\nB15003_020E\nB15003_021E\nB15003_022E\n...\nB01001_029E\nB01001_044E\nB01001_045E\nB01001_046E\nB01001_047E\nB01001_048E\nB01001_049E\nstate\ncounty\ntract\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n3055\n93\n52706\n854\n54\n128\n429\n220\n454\n...\n82\n75\n170\n71\n65\n39\n26\n42\n101\n026000\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4927\n130\n46166\n1148\n92\n216\n822\n226\n580\n...\n142\n21\n194\n266\n130\n89\n0\n42\n101\n026302\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5660\n36\n52895\n1077\n288\n269\n721\n506\n581\n...\n221\n32\n184\n277\n222\n111\n107\n42\n101\n026400\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6925\n122\n45540\n1637\n345\n590\n991\n101\n683\n...\n139\n43\n36\n213\n171\n69\n31\n42\n101\n010100\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3612\n176\n18476\n746\n130\n84\n373\n71\n135\n...\n160\n72\n29\n16\n68\n47\n0\n42\n101\n010700\n\n\n\n\n5 rows Ã— 34 columns\n\n\n\n\n# Convert the data types to numeric \nnumeric_columns = [\n    \"B03002_001E\", \"B03002_003E\", \"B19013_001E\", \n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\" \n]\n\nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].apply(pd.to_numeric, errors=\"coerce\")\n\n# Handle missing values \nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].fillna(0)\n\n\n# Combining Columns to aggregate population data\nphilly_census_data[\"Pop_15_and_Younger\"] = (\n    philly_census_data[\"B01001_003E\"] +  # Male under 5\n    philly_census_data[\"B01001_004E\"] +  # Male 5-9\n    philly_census_data[\"B01001_005E\"] +  # Male 10-14\n    philly_census_data[\"B01001_027E\"] +  # Female under 5\n    philly_census_data[\"B01001_028E\"] +  # Female 5-9\n    philly_census_data[\"B01001_029E\"]    # Female 10-14\n) \n\n\nphilly_census_data[\"Pop_65_and_Older\"] = (\n    philly_census_data[\"B01001_020E\"] +  # Male 65-66\n    philly_census_data[\"B01001_021E\"] +  # Male 67-69\n    philly_census_data[\"B01001_022E\"] +  # Male 70-74\n    philly_census_data[\"B01001_023E\"] +  # Male 75-79\n    philly_census_data[\"B01001_024E\"] +  # Male 80-84\n    philly_census_data[\"B01001_025E\"] +  # Male 85 and older\n    philly_census_data[\"B01001_044E\"] +  # Female 65-66\n    philly_census_data[\"B01001_045E\"] +  # Female 67-69\n    philly_census_data[\"B01001_046E\"] +  # Female 70-74\n    philly_census_data[\"B01001_047E\"] +  # Female 75-79\n    philly_census_data[\"B01001_048E\"] +  # Female 80-84\n    philly_census_data[\"B01001_049E\"]    # Female 85 and older\n)\n\n# Creating Dependent Population Column\nphilly_census_data[\"Dependent_Pop\"] = (\n    philly_census_data[\"Pop_15_and_Younger\"] + \n    philly_census_data[\"Pop_65_and_Older\"]\n)\n\n# Creating Percentage dependent population column\nphilly_census_data[\"Perc_Dependent_Pop\"] = (\n    (philly_census_data[\"Dependent_Pop\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n# Check the resulting DataFrame\nphilly_census_data[[\"NAME\", \"Pop_15_and_Younger\", \"Pop_65_and_Older\", \"Dependent_Pop\", \"Perc_Dependent_Pop\"]].head()\n\n\n\n\n\n\n\n\nNAME\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n375\n619\n994\n32.54\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n741\n1343\n2084\n42.30\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n831\n1450\n2281\n40.30\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n1361\n870\n2231\n32.22\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n988\n302\n1290\n35.71\n\n\n\n\n\n\n\n\n# Combining Columns to aggregate education data\n# Education attainment that is at least high school or more\nphilly_census_data[\"Edu_HS_Higher\"] = (\n    philly_census_data[\"B15003_017E\"] +  # High School diploma \n    philly_census_data[\"B15003_018E\"] +  # GED or alternative\n    philly_census_data[\"B15003_019E\"] +  # Some college\n    philly_census_data[\"B15003_020E\"] +  # Some college, more than 1 year\n    philly_census_data[\"B15003_021E\"] +  # Associate's Degree\n    philly_census_data[\"B15003_022E\"] +  # Bachelor's degree\n    philly_census_data[\"B15003_023E\"] +  # Master's degree\n    philly_census_data[\"B15003_024E\"] +  # Professional School\n    philly_census_data[\"B15003_025E\"]    # Doctorate degree\n) \n\n# Creating Percentage HS attainment or higher column\nphilly_census_data[\"Perc_Edu_HS_Higher\"] = (\n    (philly_census_data[\"Edu_HS_Higher\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n\n\n\n\n\n\nNAME\nEdu_HS_Higher\nPerc_Edu_HS_Higher\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n2271\n74.34\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n3394\n68.89\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n3733\n65.95\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n4631\n66.87\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n1596\n44.19\n\n\n\n\n\n\n\n\n# Creating Non-White Population Column\nphilly_census_data[\"Non_White\"] = (\n    philly_census_data[\"B03002_001E\"] - philly_census_data[\"B03002_003E\"]\n)\n\n# Creating Percentage Non-White Population column\nphilly_census_data[\"Perc_Non_White\"] = (\n    (philly_census_data[\"Non_White\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n\n\n\n\n\n\nNAME\nNon_White\nPerc_Non_White\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n2962\n96.96\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4797\n97.36\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5624\n99.36\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6803\n98.24\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3436\n95.13\n\n\n\n\n\n\n\n\n# Rename columns\nphilly_census_data = philly_census_data.rename(\n    columns={\n        \"B03002_001E\": \"Total_Pop\", # Total Population\n        \"B03002_003E\": \"White_Only\",  # Not Hispanic, White\n        \"B19013_001E\": \"Median_Household_Income\"\n    }\n)\n\n\n# Drop columns that are redundant \nphilly_census_data = philly_census_data.drop(columns = [\n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\"]) \n\n\n\n\n\n\n\n\nNAME\nTotal_Pop\nWhite_Only\nMedian_Household_Income\nstate\ncounty\ntract\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\nEdu_HS_Higher\nPerc_Edu_HS_Higher\nNon_White\nPerc_Non_White\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n3055\n93\n52706\n42\n101\n026000\n375\n619\n994\n32.54\n2271\n74.34\n2962\n96.96\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4927\n130\n46166\n42\n101\n026302\n741\n1343\n2084\n42.30\n3394\n68.89\n4797\n97.36\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5660\n36\n52895\n42\n101\n026400\n831\n1450\n2281\n40.30\n3733\n65.95\n5624\n99.36\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6925\n122\n45540\n42\n101\n010100\n1361\n870\n2231\n32.22\n4631\n66.87\n6803\n98.24\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3612\n176\n18476\n42\n101\n010700\n988\n302\n1290\n35.71\n1596\n44.19\n3436\n95.13\n\n\n\n\n\n\n\n\n# Fetch the census tracts for Philadelphia \nphilly_census_tracts = pygris.tracts(\n    state=pa_state_code, \n    county=philly_county_code, \n    year=2019\n)\n\n\n# Merge demographic data with geometries \ncensus_data = philly_census_tracts.merge(\n    philly_census_data,\n    left_on=[\"STATEFP\", \"COUNTYFP\", \"TRACTCE\"], \n    right_on=[\"state\", \"county\", \"tract\"],\n)\n\n\ncensus_data.explore(column=\"Total_Pop\", tiles=\"CartoDB positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Plot Population and Non-white Population\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Total Population\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Total_Pop\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Total Population by Census Tract\", fontsize = 14)\naxes[0].set_axis_off()\n\n# Plot 2: Percentage Non-White\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Perc_Non_White\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Percentage Non-Whites by Census Tract\", fontsize = 14)\naxes[1].set_axis_off()\n\n# Add a common subtitle\nfig.suptitle(\n    \"Demographic and Population Distribution (2019)\",\n    fontsize=20,\n    fontweight=\"bold\",\n    y=0.95,\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot total population by census tract\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\ncensus_data.plot(\n    column=\"Perc_Dependent_Pop\",  # Total population column\n    cmap=\"Blues\",          # Color map\n    legend=True,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    ax=ax\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nax.set_title(\"Total Population by Census Tract in Philadelphia\", fontsize=16)\nax.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot Education Attainment and Median Household Income\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Education Attainment\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Perc_Edu_HS_Higher\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Education Attainment by Census Tract\", fontsize=14)\naxes[0].set_axis_off()\n\n# Plot 2: Median Household Income\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Median_Household_Income\",\n    cmap=\"Purples\",\n    scheme=\"quantiles\",\n    k=5,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Median Household Income by Census Tract\", fontsize=14)\naxes[1].set_axis_off()\n\n# Customize legend for Median Household Income\nincome_legend = axes[1].get_legend()\nincome_legend.set_bbox_to_anchor((1.2, 0.1))  # Adjust position to bottom-right\nincome_legend.set_title(\"Income Levels\")\n\n# Add a common title\nfig.suptitle(\n    \"Demographic and Population Distribution (2019)\",\n    fontsize=20,\n    fontweight=\"bold\",\n    y=0.95,\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\nPercentage HS dipolma Percentage Dependent Percentage Non-white\nVisualize these"
  },
  {
    "objectID": "pages/Final-Copy2.html#combining-all-data-sets",
    "href": "pages/Final-Copy2.html#combining-all-data-sets",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "2.1 Combining All Data Sets",
    "text": "2.1 Combining All Data Sets\n\n# Ensure both data frames have a common key column, e.g., \"GEOID\"\nif \"GEOID\" not in aggregated_with_canopy_full.columns or \"GEOID\" not in census_data.columns:\n    raise KeyError(\"Both data frames must contain a 'GEOID' column for merging.\")\n\n# Merge the two data frames\ncombined_data = pd.merge(\n    census_data,\n    aggregated_with_canopy_full,\n    on=\"GEOID\",\n    how=\"outer\",  # Use 'outer' to retain all data; use 'inner' for only matching rows\n    suffixes=('', '_canopy')  # Add suffix to distinguish overlapping column names\n)\n\n# Check the result\n# There is a total of 42 Columns!\nprint(combined_data.info())\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 384 entries, 0 to 383\nData columns (total 42 columns):\n #   Column                        Non-Null Count  Dtype   \n---  ------                        --------------  -----   \n 0   STATEFP                       384 non-null    object  \n 1   COUNTYFP                      384 non-null    object  \n 2   TRACTCE                       384 non-null    object  \n 3   GEOID                         384 non-null    object  \n 4   NAME_x                        384 non-null    object  \n 5   NAMELSAD                      384 non-null    object  \n 6   MTFCC                         384 non-null    object  \n 7   FUNCSTAT                      384 non-null    object  \n 8   ALAND                         384 non-null    int64   \n 9   AWATER                        384 non-null    int64   \n 10  INTPTLAT                      384 non-null    object  \n 11  INTPTLON                      384 non-null    object  \n 12  geometry                      384 non-null    geometry\n 13  NAME_y                        384 non-null    object  \n 14  Total_Pop                     384 non-null    int64   \n 15  White_Only                    384 non-null    int64   \n 16  Median_Household_Income       384 non-null    int64   \n 17  state                         384 non-null    object  \n 18  county                        384 non-null    object  \n 19  tract                         384 non-null    object  \n 20  Pop_15_and_Younger            384 non-null    int64   \n 21  Pop_65_and_Older              384 non-null    int64   \n 22  Dependent_Pop                 384 non-null    int64   \n 23  Perc_Dependent_Pop            376 non-null    float64 \n 24  Edu_HS_Higher                 384 non-null    int64   \n 25  Perc_Edu_HS_Higher            376 non-null    float64 \n 26  Non_White                     384 non-null    int64   \n 27  Perc_Non_White                376 non-null    float64 \n 28  NAMELSAD10                    384 non-null    object  \n 29  perc_5plus                    384 non-null    float64 \n 30  casthma_crudeprev             384 non-null    float64 \n 31  cancer_crudeprev              373 non-null    float64 \n 32  hvi_score                     384 non-null    float64 \n 33  geometry_canopy               384 non-null    geometry\n 34  GEOID10_aggregated            377 non-null    object  \n 35  perc_5plus_aggregated         377 non-null    float64 \n 36  casthma_crudeprev_aggregated  377 non-null    float64 \n 37  cancer_crudeprev_aggregated   366 non-null    float64 \n 38  hvi_score_aggregated          377 non-null    float64 \n 39  canopy_area                   384 non-null    float64 \n 40  geometry_aggregated           377 non-null    geometry\n 41  canopy_percent                384 non-null    float64 \ndtypes: float64(13), geometry(3), int64(10), object(16)\nmemory usage: 126.1+ KB\nNone\n\n\n\ncombined_data.head()\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME_x\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\n...\nhvi_score\ngeometry_canopy\nGEOID10_aggregated\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\ncanopy_area\ngeometry_aggregated\ncanopy_percent\n\n\n\n\n0\n42\n101\n000100\n42101000100\n1\nCensus Tract 1\nG5020\nS\n704917\n0\n...\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n42101000100\n0.0\n9.2\n3.4\n-4.917169\n15295.431073\nPOLYGON ((-8365601.290 4859085.382, -8365600.7...\n1.272227\n\n\n1\n42\n101\n000200\n42101000200\n2\nCensus Tract 2\nG5020\nS\n382481\n0\n...\n-2.456924\nPOLYGON ((-8367037.612 4859790.661, -8367072.5...\n42101000200\n0.0\n8.3\n3.2\n-2.456924\n81.808400\nPOLYGON ((-8365814.579 4859375.530, -8365814.3...\n0.012554\n\n\n2\n42\n101\n000300\n42101000300\n3\nCensus Tract 3\nG5020\nS\n546269\n22680\n...\n-3.437875\nPOLYGON ((-8368799.480 4860104.192, -8368897.0...\n42101000300\n0.0\n9.5\n5.1\n-3.437875\n13232.065668\nPOLYGON ((-8367581.108 4859520.898, -8367580.6...\n1.419802\n\n\n3\n42\n101\n000401\n42101000401\n4.01\nCensus Tract 4.01\nG5020\nS\n216838\n15884\n...\n-4.305632\nPOLYGON ((-8368219.166 4859353.414, -8368214.1...\n42101000401\n0.0\n9.3\n5.1\n-4.305632\n5301.358134\nMULTIPOLYGON (((-8368816.086 4859067.085, -836...\n1.332644\n\n\n4\n42\n101\n000402\n42101000402\n4.02\nCensus Tract 4.02\nG5020\nS\n303680\n0\n...\n-2.525256\nPOLYGON ((-8367143.774 4859163.976, -8367128.5...\n42101000402\n0.0\n8.9\n10.0\n-2.525256\n3666.039706\nPOLYGON ((-8367759.219 4859363.332, -8367758.8...\n0.708517\n\n\n\n\n5 rows Ã— 42 columns\n\n\n\n\nprint(combined_data.columns)\n\nIndex(['STATEFP', 'COUNTYFP', 'TRACTCE', 'GEOID', 'NAME_x', 'NAMELSAD',\n       'MTFCC', 'FUNCSTAT', 'ALAND', 'AWATER', 'INTPTLAT', 'INTPTLON',\n       'geometry', 'NAME_y', 'Total_Pop', 'White_Only',\n       'Median_Household_Income', 'state', 'county', 'tract',\n       'Pop_15_and_Younger', 'Pop_65_and_Older', 'Dependent_Pop',\n       'Perc_Dependent_Pop', 'Edu_HS_Higher', 'Perc_Edu_HS_Higher',\n       'Non_White', 'Perc_Non_White', 'NAMELSAD10', 'perc_5plus',\n       'casthma_crudeprev', 'cancer_crudeprev', 'hvi_score', 'geometry_canopy',\n       'GEOID10_aggregated', 'perc_5plus_aggregated',\n       'casthma_crudeprev_aggregated', 'cancer_crudeprev_aggregated',\n       'hvi_score_aggregated', 'canopy_area', 'geometry_aggregated',\n       'canopy_percent'],\n      dtype='object')\n\n\nDo a correlation Do clustering based on median income - if there are differences in tree canopy How does tree canopy matter in reducing negative health outcomes"
  },
  {
    "objectID": "pages/Final-Copy2.html#log-transformation-of-median-household-income",
    "href": "pages/Final-Copy2.html#log-transformation-of-median-household-income",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "2.2 Log Transformation of Median Household Income",
    "text": "2.2 Log Transformation of Median Household Income\nThe log transformation is applied to the Median Household Income variable to address potential skewness in the data. Income distributions are often right-skewed, meaning that a small number of observations with very high incomes can disproportionately influence the analysis. By applying a log transformation, we can:\n\nReduce the impact of extreme values, making the data more normally distributed.\nEnhance the interpretability of relationships, as percentage changes in income are often more meaningful than absolute changes.\nImprove the performance of statistical models and clustering algorithms, which often assume normality or are sensitive to outliers.\n\nThe resulting Log_Median_Household_Income variable is used in subsequent analyses to ensure robust and meaningful insights. hts.\n\n# Create a new column with the logged values of \"Median_Household_Income\"\n# Use np.log1p to handle zeros and avoid -inf errors\ncombined_data[\"Log_Median_Household_Income\"] = np.log1p(combined_data[\"Median_Household_Income\"])\n\n# Display the first few rows to verify\nprint(combined_data[[\"Median_Household_Income\", \"Log_Median_Household_Income\"]].head())\n\n   Median_Household_Income  Log_Median_Household_Income\n0                   103585                    11.548157\n1                    49871                    10.817215\n2                    86296                    11.365550\n3                    62986                    11.050684\n4                    78947                    11.276545\n\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\pandas\\core\\arraylike.py:399: RuntimeWarning: invalid value encountered in log1p\n  result = getattr(ufunc, method)(*inputs, **kwargs)"
  },
  {
    "objectID": "pages/Final-Copy2.html#scatter-plot-analysis",
    "href": "pages/Final-Copy2.html#scatter-plot-analysis",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "3.1 Scatter Plot Analysis",
    "text": "3.1 Scatter Plot Analysis\nTo identify social and economic demographic indicators associated with areas at risk of health inequities, we explore relationships between the following variables:\n\nIndependent Variables:\n\nPerc_Non_White\nPerc_Dependent_Pop\nPerc_Edu_HS_Higher\nLog_Median_Household_Income\n\nDependent Variables:\n\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\n\n\nThe scatter plot analysis provides insights into potential correlations, while the log transformation of income reduces the impact of extreme values, making the data more normally distributed.\n\n# Independent and dependent variables\nindependent_vars = [\"Perc_Non_White\", \"Perc_Dependent_Pop\", \"Perc_Edu_HS_Higher\", \"Log_Median_Household_Income\"]\ndependent_vars = [\"perc_5plus_aggregated\", \"casthma_crudeprev_aggregated\", \"cancer_crudeprev_aggregated\", \"hvi_score_aggregated\"]\n\n# Enhanced scatter plot generation\nfor indep in independent_vars:\n    for dep in dependent_vars:\n        try:\n            plt.figure(figsize=(10, 6))\n            sns.scatterplot(data=combined_data, x=indep, y=dep, alpha=0.7, edgecolor=None)\n            plt.title(f\"Relationship Between {indep.replace('_', ' ')} and {dep.replace('_', ' ')}\", fontsize=14)\n            plt.xlabel(indep.replace('_', ' '), fontsize=12)\n            plt.ylabel(dep.replace('_', ' '), fontsize=12)\n            plt.grid(True, linestyle='--', alpha=0.5)\n            plt.tight_layout()\n            plt.show()\n        except Exception as e:\n            print(f\"Error encountered while plotting {indep} vs {dep}: {e}\")"
  },
  {
    "objectID": "pages/Final-Copy2.html#correlation-heatmap-of-features",
    "href": "pages/Final-Copy2.html#correlation-heatmap-of-features",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "3.2 Correlation Heatmap of Features",
    "text": "3.2 Correlation Heatmap of Features\nThe heatmap visualizes the Pearson correlation coefficients between selected social, economic, and health-related features. These values range from -1 to 1, where:\n\n1 indicates a perfect positive correlation.\n-1 indicates a perfect negative correlation.\n0 indicates no linear correlation.\n\nBy plotting the heatmap, we can identify: - Strong Positive Correlations: Features that move in the same direction. - Strong Negative Correlations: Features that move in opposite directions. - Weak or No Correlations: Features with little or no linear relationship.\nThis helps in understanding the relationships between demographic indicators and health inequities, providing valuable insights for further analysis.\n\n# Define the new column names as a dictionary\ncolumn_rename_map = {\n    \"Perc_Non_White\": \"Percent Non-White\",\n    \"Perc_Dependent_Pop\": \"Percent Dependent Population\",\n    \"Perc_Edu_HS_Higher\": \"Percent with HS or Higher Education\",\n    \"Log_Median_Household_Income\": \"Log Median Household Income\",\n    \"perc_5plus_aggregated\": \"Lead Exposure Percent\",\n    \"casthma_crudeprev_aggregated\": \"Asthma Prevalence\",\n    \"cancer_crudeprev_aggregated\": \"Cancer Prevalence\",\n    \"hvi_score_aggregated\": \"Heat Vulnerability Index\",\n}\n\n# Rename the columns in the dataset\nrenamed_data = combined_data.rename(columns=column_rename_map)\n\n# Select only the renamed columns for the heatmap\nfeature_cols = list(column_rename_map.values())\n\n# Plot the heatmap\nsns.heatmap(\n    renamed_data[feature_cols].corr(), \n    cmap=\"coolwarm\", \n    annot=True, \n    vmin=-1, \n    vmax=1\n)\n\n# Add title and show the plot\nplt.title(\"Correlation Heatmap of Features\")\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy2.html#need-a-explanation-for-this-heatmap",
    "href": "pages/Final-Copy2.html#need-a-explanation-for-this-heatmap",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "need a explanation for this heatmap",
    "text": "need a explanation for this heatmap\n\nPercent of Non-white population vs Percent of children under the age of 6 with higher blood lead levels: Positive relationship (0.63)\nPercent of Non-white population vs Prevalence of current asthma among adults aged &gt;=18 years : Positive relationship (0.71)\nPercent of Non-white population vs HVI Score : Positive relationship (0.89)\nPercent of Dependent Population vs Prevalence of cancer (excluding skin cancer) among adults aged &gt;=18 years: Positive relationship (0.62)\nPercent of High Degree vs Percent of children under the age of 6 with higher blood lead levels: Negative relationship (0.40)\nPercent of High Degree vs Prevalence of current asthma among adults aged &gt;=18 years: Negative relationship (0.54)\nPercent of High Degree vs HVI Score: Negative relationship (0.58)\nMedian Household Income (Logged) vs Percent of children under the age of 6 with higher blood lead levels: Negative relationship (0.61)\nMedian Household Income (Logged) vs Prevalence of current asthma among adults aged &gt;=18 years : Negative relationship (0.70)\nMedian Household Income (Logged) vs HVI Score: Negative relationship (0.78)"
  },
  {
    "objectID": "pages/Final-Copy2.html#non-spatial-clustering",
    "href": "pages/Final-Copy2.html#non-spatial-clustering",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "4.1 Non-Spatial Clustering",
    "text": "4.1 Non-Spatial Clustering\nTo analyze the socio-economic status and its potential impact on health outcomes, we create a new DataFrame focusing on tree canopy effects. The goal is to examine whether areas with similar socio-economic characteristics exhibit differences in the distribution of cancer prevalence, asthma rates, and the heat vulnerability index.\nIf significant differences are observed, it suggests the need for tailored policy interventions by the City of Philadelphia to address these disparities effectively.\nFor clustering, the following socio-economic variables were used as criteria: - Perc_Non_White (Percent Non-White) - Perc_Dependent_Pop (Percent Dependent Population) - Perc_Edu_HS_Higher (Percent with HS or Higher Education) - Log_Median_Household_Income (Log Median Househod Income)\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Step 1: Set the environment variable to suppress memory leak warning\nos.environ['OMP_NUM_THREADS'] = '2'\n\n# Step 2: Scale the data\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(combined_data[['Perc_Non_White', \n                                                  'Perc_Dependent_Pop', \n                                                  'Perc_Edu_HS_Higher', \n                                                  'Log_Median_Household_Income']])\n\n# Step 3: Run KMeans\nkmeans = KMeans(n_clusters=3, random_state=42)  # Adjust number of clusters\nkmeans.fit(data_scaled)\n\n# Step 4: Add labels to the original DataFrame\ncombined_data['label'] = kmeans.labels_\n\n# Step 5: Display the DataFrame with cluster labels\nprint(combined_data.head())\n\n  STATEFP COUNTYFP TRACTCE        GEOID NAME_x           NAMELSAD  MTFCC  \\\n0      42      101  000100  42101000100      1     Census Tract 1  G5020   \n1      42      101  000200  42101000200      2     Census Tract 2  G5020   \n2      42      101  000300  42101000300      3     Census Tract 3  G5020   \n3      42      101  000401  42101000401   4.01  Census Tract 4.01  G5020   \n4      42      101  000402  42101000402   4.02  Census Tract 4.02  G5020   \n\n  FUNCSTAT   ALAND  AWATER  ... GEOID10_aggregated perc_5plus_aggregated  \\\n0        S  704917       0  ...        42101000100                   0.0   \n1        S  382481       0  ...        42101000200                   0.0   \n2        S  546269   22680  ...        42101000300                   0.0   \n3        S  216838   15884  ...        42101000401                   0.0   \n4        S  303680       0  ...        42101000402                   0.0   \n\n  casthma_crudeprev_aggregated cancer_crudeprev_aggregated  \\\n0                          9.2                         3.4   \n1                          8.3                         3.2   \n2                          9.5                         5.1   \n3                          9.3                         5.1   \n4                          8.9                        10.0   \n\n   hvi_score_aggregated   canopy_area  \\\n0             -4.917169  15295.431073   \n1             -2.456924     81.808400   \n2             -3.437875  13232.065668   \n3             -4.305632   5301.358134   \n4             -2.525256   3666.039706   \n\n                                 geometry_aggregated canopy_percent  \\\n0  POLYGON ((-8365601.290 4859085.382, -8365600.7...       1.272227   \n1  POLYGON ((-8365814.579 4859375.530, -8365814.3...       0.012554   \n2  POLYGON ((-8367581.108 4859520.898, -8367580.6...       1.419802   \n3  MULTIPOLYGON (((-8368816.086 4859067.085, -836...       1.332644   \n4  POLYGON ((-8367759.219 4859363.332, -8367758.8...       0.708517   \n\n  Log_Median_Household_Income label  \n0                   11.548157     1  \n1                   10.817215     2  \n2                   11.365550     1  \n3                   11.050684     1  \n4                   11.276545     1  \n\n[5 rows x 44 columns]\n\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1446: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.\n  warnings.warn("
  },
  {
    "objectID": "pages/Final-Copy2.html#plot-of-clustering-by-similar-socio-economic-status",
    "href": "pages/Final-Copy2.html#plot-of-clustering-by-similar-socio-economic-status",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "4.2 Plot of Clustering by Similar Socio-Economic Status",
    "text": "4.2 Plot of Clustering by Similar Socio-Economic Status\nThis code visualizes KMeans clustering results on a map using GeoPandas and Matplotli.\n\n# Step 1: Convert the DataFrame to a GeoDataFrame if not already one\ngeo_combined_data = gpd.GeoDataFrame(combined_data, geometry='geometry')\n\n# Step 2: Ensure CRS is set and transform to EPSG:3857\nif geo_combined_data.crs is None:\n    geo_combined_data.set_crs(\"EPSG:4326\", inplace=True)  # Assuming original CRS is EPSG:4326\ngeo_combined_data = geo_combined_data.to_crs(\"EPSG:3857\")\n\n# Step 3: Plot the clusters without x and y information\nfig, ax = plt.subplots(figsize=(10, 8))\ngeo_combined_data.plot(column='label', categorical=True, legend=True, cmap='tab10', ax=ax, legend_kwds={'frameon': False})\n\n# Step 4: Add a title\nax.set_title('KMeans Clustering by Labels', fontsize=16)\n\n# Step 5: Remove axis labels, ticks, and bounding box\nax.set_axis_off()  # Turn off the entire axis\nplt.tight_layout()\n\n# Step 6: Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n4.3 Export Clusters by Label\nThis code ensures that the GeoDataFrame has only one active geometry column and exports each cluster as a separate GeoJSON file:\n\n# Handle Geometry Columns\ngeo_combined_data = geo_combined_data[[col for col in geo_combined_data.columns if not col.startswith('geometry_')]]\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n\n# Step 1: Define the base output directory\nbase_path = \"data/\"\noutput_dir = os.path.join(base_path, \"output_by_label\")\nos.makedirs(output_dir, exist_ok=True)\n\n# Step 2: Ensure only one geometry column\n# Drop other geometry columns if they exist\ngeometry_columns = [col for col in geo_combined_data.columns if geo_combined_data[col].dtype.name == 'geometry']\nif len(geometry_columns) &gt; 1:\n    print(\"Multiple geometry columns detected. Dropping all but the active one.\")\n    geo_combined_data = geo_combined_data.drop(columns=[col for col in geometry_columns if col != 'geometry'])\n\n# Ensure the 'geometry' column is set as the active geometry\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n# Step 3: Iterate over unique labels and save each subset\nfor label in geo_combined_data['label'].unique():\n    label_data = geo_combined_data[geo_combined_data['label'] == label]\n    file_path = os.path.join(output_dir, f\"label_{label}.geojson\")  # Output file path\n    label_data.to_file(file_path, driver=\"GeoJSON\")  # Save as GeoJSON\n    print(f\"Saved data for label {label} to {file_path}\")\n\nSaved data for label 1 to data/output_by_label\\label_1.geojson\nSaved data for label 2 to data/output_by_label\\label_2.geojson\nSaved data for label 0 to data/output_by_label\\label_0.geojson\n\n\n\n\n5.1 Clustering Analysis\nThis code creates box plots to analyze the distribution of selected socio-economic variables across different clusters.\n\n# List of columns to analyze\ncolumns_to_plot = ['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']\n\n# Create a box plot for each column\nfor column in columns_to_plot:\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n    plt.title(f\"Distribution of {column} Across Clusters\", fontsize=16)\n    plt.xlabel(\"Cluster Labels\", fontsize=12)\n    plt.ylabel(column, fontsize=12)\n    plt.tight_layout()\n    plt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_33880\\3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")"
  },
  {
    "objectID": "pages/Final-Copy2.html#box-plot-explanation",
    "href": "pages/Final-Copy2.html#box-plot-explanation",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "Box Plot Explanation",
    "text": "Box Plot Explanation\n\nLabel == 0: Represents a group with low median household income, low percentage of individuals with a high school degree or higher, low dependent population percentage, and a relatively high percentage of non-white population.\nLabel == 1: Represents a group with high median income, high education levels, medium dependent population percentage, and a low percentage of non-white population.\nLabel == 2: Represents a group with a high percentage of non-white population and dependent population, along with relatively low median household income and lower education levels. In contrast to Label == 0 and Label == 1, this group has a significant number of outliers, suggesting the need to exclude these outliers in further analysis.\n\n\nFrom the box plots: - Label == 0 represents a socio-economically vulnerable population, with lower median household income, lower education levels, and a higher percentage of non-white population. - While Label == 1 has a higher dependent population percentage, Label == 0 demonstrates more socio-economic vulnerabilites overall.\n\n5.2 Tree Canopy Effect on Public Health\nThis analysis examines the relationship between tree canopy coverage and public health outcomes within clusters of similar socio-economic status.\n\nKey Variables: Includes tree canopy percentage, lead exposure, asthma prevalence, cancer prevalence, and heat vulnerability index.\nMethodology: For each cluster, correlations between these variables are computed and visualized using heatmaps.\nObjective: To identify how tree canopy affects public health indicators across different socio-economic groups.\n\n\n# Directory containing the GeoJSON files\ninput_dir = \"data/output_by_label\"\n\n# Iterate through each GeoJSON file\nfor file_name in os.listdir(input_dir):\n    if file_name.endswith(\".geojson\"):\n        file_path = os.path.join(input_dir, file_name)\n        \n        # Load the GeoJSON file into a GeoDataFrame\n        gdf = gpd.read_file(file_path)\n        \n        # Extract the required columns\n        required_columns = ['canopy_percent', 'perc_5plus_aggregated', \n                            'casthma_crudeprev_aggregated', 'cancer_crudeprev_aggregated', \n                            'hvi_score_aggregated']\n        \n        # Ensure columns exist in the GeoDataFrame\n        missing_columns = [col for col in required_columns if col not in gdf.columns]\n        if missing_columns:\n            print(f\"Skipping {file_name}: Missing columns {missing_columns}\")\n            continue\n        \n        # Compute the correlation matrix\n        correlation_matrix = gdf[required_columns].corr()\n        \n        # Plot the correlation matrix as a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", cbar=True)\n        plt.title(f\"Correlation Matrix for {file_name}\", fontsize=16)\n        plt.tight_layout()\n        \n        # Display the heatmap\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\nThis analysis highlights the role of tree canopy coverage in influencing public health outcomes across different socio-economic groups in Philadelphia.\n\nGroup 0 (Label-0 in Clustering):\n\nSocio-Economic Characteristics: Represents a socio-economically vulnerable population with lower median household income, lower education levels, lower dependent population percentage, and a higher percentage of non-white residents.\nFindings: Tree canopy coverage shows a negative correlation with:\n\nLead exposure (perc_5plus_aggregated)\nAsthma rate (casthma_crudeprev_aggregated)\nCancer rate (cancer_crudeprev_aggregated)\nHeat Vulnerability Index (hvi_score_aggregated)\n\nImplications: These results suggest that increasing tree canopy in vulnerable areas could lead to substantial improvements in public health outcomes. The City of Philadelphia should prioritize aggressive tree-planting initiatives in these regions.\n\n\n\nGroup 1 (Label-1 in Clustering):\n\nSocio-Economic Characteristics: Represents a less vulnerable population with higher median household income, higher education levels, medium dependent population percentage, and a lower percentage of non-white residents.\nFindings:\n\nNegative correlation between tree canopy and lead exposure, as well as asthma rates, indicating a continued beneficial effect of tree canopy coverage on these outcomes.\nWeak positive correlations between tree canopy and both cancer rates (cancer_crudeprev_aggregated) and heat vulnerability index (hvi_score_aggregated), suggesting a more complex relationship in this group.\n\nImplications: Tree canopy remains important in less vulnerable areas, but its impact may be more limited for certain public health indicators like cancer rates and heat vulnerability.\n\n\n\nGroup 2 (Label-2 in Clustering):\n\nExclusion: This group was excluded from the analysis due to significant outliers identified in the box plots, which undermine the reliability of the results for this cluster.\n\n\n\nKey Takeaways:\n\nThere is a distinct difference in the relationship between tree canopy coverage and public health outcomes across socio-economic groups.\n\nVulnerable Groups (Group 0): Strong negative correlations highlight the urgent need for targeted tree-planting initiatives to improve health outcomes.\nLess Vulnerable Groups (Group 1): While tree canopy remains beneficial, the impact is less pronounced, with some indicators showing positive correlations.\n\nThe City of Philadelphia should prioritize tree-planting efforts in highly vulnerable areas characterized by:\n\nLow median household income\nLow education levels\nLower dependent population percentages\nHigher non-white population percentages\n\n\nBy addressing health inequities through targeted tree canopy initiatives, the city can improve public health outcomes in communities that need it most."
  },
  {
    "objectID": "pages/DataPrep.html",
    "href": "pages/DataPrep.html",
    "title": "Data Preparation",
    "section": "",
    "text": "from census import Census\nimport pandas as pd\nimport os\nimport cenpy\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport seaborn as sns\nimport pygris\nfrom matplotlib import pyplot as plt",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#environment-setup",
    "href": "pages/DataPrep.html#environment-setup",
    "title": "Data Preparation",
    "section": "",
    "text": "from census import Census\nimport pandas as pd\nimport os\nimport cenpy\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport seaborn as sns\nimport pygris\nfrom matplotlib import pyplot as plt",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#load-spatial-data",
    "href": "pages/DataPrep.html#load-spatial-data",
    "title": "Data Preparation",
    "section": "1.2. Load Spatial Data",
    "text": "1.2. Load Spatial Data\n\n\n\n\n\n\nNote\n\n\n\nA GeoJSON holding for Philadelphia census tract boundary is available in the /data directory.\n\n\n\ntract = gpd.read_file(\"./data/Census_Tracts_2010.geojson\")\ntract.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\nAWATER10\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n0\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-75.22927 39.96054, -75.22865 39.960...\n\n\n1\n2\n42\n101\n009500\n42101009500\n95\nCensus Tract 95\nG5020\nS\n319070\n0\n+39.9658709\n-075.2379140\n10430\nPOLYGON ((-75.23536 39.96852, -75.23545 39.969...\n\n\n2\n3\n42\n101\n009600\n42101009600\n96\nCensus Tract 96\nG5020\nS\n405273\n0\n+39.9655396\n-075.2435075\n10431\nPOLYGON ((-75.24343 39.96230, -75.24339 39.962...\n\n\n3\n4\n42\n101\n013800\n42101013800\n138\nCensus Tract 138\nG5020\nS\n341256\n0\n+39.9764504\n-075.1771771\n10468\nPOLYGON ((-75.17341 39.97779, -75.17386 39.977...\n\n\n4\n5\n42\n101\n013900\n42101013900\n139\nCensus Tract 139\nG5020\nS\n562934\n0\n+39.9750563\n-075.1711846\n10469\nPOLYGON ((-75.17313 39.97776, -75.17321 39.977...\n\n\n\n\n\n\n\n\n\nCode for Visualization\nfig, ax = plt.subplots(figsize=(8, 8))\n\nax =tract.to_crs(epsg=3857).plot(ax=ax, facecolor=\"none\", edgecolor=\"black\")\nax.set_axis_off()\nax.set_aspect(\"equal\")\n\n\n\n\n\n\n\n\nFigureÂ 1: Census tract of Philadelphia",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#child-blood-lead-level",
    "href": "pages/DataPrep.html#child-blood-lead-level",
    "title": "Data Preparation",
    "section": "1.3. Child Blood Lead Level",
    "text": "1.3. Child Blood Lead Level\n\nlead = gpd.read_file(\"./data/child_blood_lead_levels_by_ct.geojson\")\n\ntract = tract.to_crs(epsg=3857)  # Ensure 'tract' is in projected CRS\nlead = lead.to_crs(epsg=3857) \n\n# Spatial join between ceansus tracts and lead data\njoined = gpd.sjoin(tract, lead, how=\"left\", predicate=\"intersects\")\n\n# Replace 'NAMELSAD10' and 'perc_5plus' with the appropriate column names\nlead_aggregated = joined.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",  # Example: Average value from lead\n    \"geometry\": \"first\"     # Keep one geometry per tract\n}).reset_index()\n\ndisplay(lead_aggregated.head())\n\nlead_aggregated = gpd.GeoDataFrame(lead_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\n\nCode for Visualization\n# Replace NaN values with -1 for visualization\nlead_aggregated[\"perc_5plus\"] = lead_aggregated[\"perc_5plus\"].fillna(-1)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\nlead_aggregated.plot(\n    ax=ax,\n    column=\"perc_5plus\",  # Use the column with lead level data\n    cmap=\"viridis\",       # Colormap for numerical data\n    edgecolor=\"white\",    # Boundary color\n    legend=True,          # Add legend\n    legend_kwds={\n        \"label\": \"Lead Level Percentage\\n(-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Format the plot\n# ax.set_title(\"Average Lead Level Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 2: Average Lead Level Percentage by Census Tract",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#cancer-and-asthma",
    "href": "pages/DataPrep.html#cancer-and-asthma",
    "title": "Data Preparation",
    "section": "1.4. Cancer and Asthma",
    "text": "1.4. Cancer and Asthma\n\ncancer_asthma= gpd.read_file(\"data/philadelphia_gdf.geojson\")\ncancer_asthma.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\ngeometry\n\n\n\n\n0\nPhiladelphia\n42101002500\n11.3\n5.2\n3769\nPOINT (-8365639.619 4856398.197)\n\n\n1\nPhiladelphia\n42101003702\n12.8\n4.8\n3707\nPOINT (-8369269.171 4854982.142)\n\n\n2\nPhiladelphia\n42101031401\n11.6\n4.1\n6664\nPOINT (-8356372.430 4872587.322)\n\n\n3\nPhiladelphia\n42101031502\n11.7\n6.2\n4018\nPOINT (-8355069.752 4871650.082)\n\n\n4\nPhiladelphia\n42101033200\n10.4\n6.7\n2741\nPOINT (-8353959.244 4872306.058)\n\n\n\n\n\n\n\n\ncancer_asthma = cancer_asthma.to_crs(epsg=3857)\n\nselected_columns = [\"countyname\", \"tractfips\",\"geometry\", \"casthma_crudeprev\", \"cancer_crudeprev\", \"totalpopulation\"]\nfiltered_gdf = cancer_asthma[selected_columns]\n\n# Filter for rows where CountyName is Philadelphia\nphiladelphia_gdf = filtered_gdf[filtered_gdf[\"countyname\"].str.contains(\"Philadelphia\", case=False, na=False)]\n\ncancer_asthma_aggregated = gpd.sjoin(lead_aggregated, philadelphia_gdf, how=\"left\", predicate=\"intersects\")\n\n\n# Get the number of rows\nnum_rows = cancer_asthma_aggregated.shape[0]\n\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"casthma_crudeprev\"], errors=\"coerce\")\ncancer_asthma_aggregated[\"cancer_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"cancer_crudeprev\"], errors=\"coerce\")\n\n# Get the range of 'casthma_crudeprev'\nasthma_min = cancer_asthma_aggregated[\"casthma_crudeprev\"].min()\nasthma_max = cancer_asthma_aggregated[\"casthma_crudeprev\"].max()\n\n# Get the range of 'cancer_crudeprev'\ncancer_min = cancer_asthma_aggregated[\"cancer_crudeprev\"].min()\ncancer_max = cancer_asthma_aggregated[\"cancer_crudeprev\"].max()\n\ncancer_asthma_aggregated = cancer_asthma_aggregated.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\ncancer_asthma_aggregated = gpd.GeoDataFrame(cancer_asthma_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n# Fill NaN values with a placeholder (-1) for \"No Data\"\ncancer_asthma_aggregated[\"cancer_crudeprev_filled\"] = cancer_asthma_aggregated[\"cancer_crudeprev\"].fillna(-1)\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = cancer_asthma_aggregated[\"casthma_crudeprev\"].fillna(-1)\n\n\n\nCode for Visualization\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\ncancer_asthma_aggregated.plot(\n    ax=axes[0],\n    column=\"cancer_crudeprev\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Cancer Prevalence (-1 = No Data)\"},\n)\naxes[0].set_title(\"Cancer Prevalence by Census Tract\")\naxes[0].set_axis_off()\n\ncancer_asthma_aggregated.plot(\n    ax=axes[1],\n    column=\"casthma_crudeprev\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Asthma Prevalence (-1 = No Data)\"},\n)\naxes[1].set_title(\"Asthma Prevalence by Census Tract\")\naxes[1].set_axis_off()\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 3: Cancer and Asthma Prevalence by Census Tract",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#heat-vulerability",
    "href": "pages/DataPrep.html#heat-vulerability",
    "title": "Data Preparation",
    "section": "1.5. Heat Vulerability",
    "text": "1.5. Heat Vulerability\n\nheatindex = gpd.read_file(\"data/heat_vulnerability_ct.geojson\")\nheatindex.head()\n\n\n\n\n\n\n\n\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n42101002100\n21\n0\n2023\n0.502262\n-1.481429\n0.639224\n1\n4.044948e+05\n2580.858471\nPOLYGON ((-75.17370 39.93624, -75.17378 39.935...\n\n\n1\n42101002200\n22\n0\n2023\n-3.183298\n-1.658469\n-1.769318\n2\n3.894601e+05\n2518.894793\nPOLYGON ((-75.17370 39.93624, -75.17369 39.936...\n\n\n2\n42101002300\n23\n0\n2023\n-6.884403\n-1.193579\n-4.362779\n3\n3.616223e+05\n2771.142380\nPOLYGON ((-75.16702 39.93675, -75.16696 39.936...\n\n\n3\n42101002400\n24\n0\n2023\n-7.107618\n-1.382308\n-4.462616\n4\n9.117703e+05\n4810.554362\nPOLYGON ((-75.16629 39.94004, -75.16623 39.940...\n\n\n4\n42101034803\n348.03\n0\n2023\n-7.830042\n-0.358619\n-5.684468\n5\n2.186876e+06\n6444.130598\nPOLYGON ((-75.00888 40.05866, -75.00915 40.059...\n\n\n\n\n\n\n\n\nheatindex = heatindex.to_crs(epsg=3857)\n\n# Perform the spatial join\njoined_with_heatindex = gpd.sjoin(cancer_asthma_aggregated, heatindex, how=\"left\", predicate=\"intersects\")\n\naggregated_heat = joined_with_heatindex.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\naggregated_heat = gpd.GeoDataFrame(aggregated_heat, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n# Handle missing data\naggregated_heat[\"hvi_score\"] = aggregated_heat[\"hvi_score\"].fillna(-1)  # Replace NaN with -1 for \"No Data\"\n\n\n\nCode for Visualization\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_heat.plot(\n    ax=ax,\n    column=\"hvi_score\",  # Replace with the HVI column name\n    cmap=\"YlOrRd\",       # Colormap for heat index visualization\n    edgecolor=\"white\",  \n    linewidth = 0.5,\n    legend=True,         # Add a legend\n    legend_kwds={\n        \"label\": \"Heat Vulnerability Index (HVI) Score (-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Remove axis\nax.set_axis_off()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 4: Heat Vulnerability Index (HVI) Score by Census Tract",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#tree-canpoy",
    "href": "pages/DataPrep.html#tree-canpoy",
    "title": "Data Preparation",
    "section": "1.6. Tree Canpoy",
    "text": "1.6. Tree Canpoy\n\ntree_canopy = gpd.read_file(\"data/ppr_tree_canopy_outlines_2015.geojson\")\n# Ensure CRS alignment\ntree_canopy = tree_canopy.to_crs(\"EPSG:3857\")\naggregated_heat = aggregated_heat.to_crs(\"EPSG:3857\")\n\n# Perform spatial intersection\nintersected = gpd.overlay(tree_canopy, aggregated_heat, how=\"intersection\")\n\n# Calculate tree canopy area (in square meters)\nintersected[\"canopy_area\"] = intersected.geometry.area\n\naggregated_with_canopy = intersected.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"canopy_area\": \"sum\",         # Total canopy area within each tract\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n# Merge the aggregated results back with the original GeoDataFrame\naggregated_with_canopy_full = aggregated_heat.merge(\n    aggregated_with_canopy, \n    on=\"NAMELSAD10\", \n    how=\"left\", \n    suffixes=(\"\", \"_aggregated\")\n)\n\n# Rename columns\naggregated_with_canopy_full = aggregated_with_canopy_full.rename(\n    columns={\n        \"GEOID10\": \"GEOID\" # Rename GEOID to match Census\n    }\n)\n\n# Fill missing values for 'canopy_area' and 'canopy_percent' with 0\naggregated_with_canopy_full[\"canopy_area\"] = aggregated_with_canopy_full[\"canopy_area\"].fillna(0)\naggregated_with_canopy_full[\"canopy_percent\"] = aggregated_with_canopy_full[\"canopy_area\"] / aggregated_with_canopy_full.geometry.area * 100\n\naggregated_with_canopy_full.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\nhvi_score\ngeometry\nGEOID10_aggregated\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\ncanopy_area\ngeometry_aggregated\ncanopy_percent\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\n15295.431073\nPOLYGON ((-8365601.290 4859085.382, -8365600.7...\n1.272227\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\n18685.893835\nPOLYGON ((-8365867.678 4857764.287, -8365867.3...\n4.781632\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\n35866.481410\nPOLYGON ((-8365243.510 4858160.829, -8365243.0...\n4.464418\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\n2.479992\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n42101010000\n6.180000\n13.5\n4.6\n2.479992\n18194.466411\nPOLYGON ((-8377098.367 4862164.604, -8377097.8...\n2.147186\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\n3.499149\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n42101010100\n5.333333\n13.6\n5.5\n3.499149\n30726.883686\nPOLYGON ((-8376335.161 4861584.880, -8376334.7...\n2.996808\n\n\n\n\n\n\n\n\n\nCode for Visualization\n# Plot Tree Canopy (unedited and quantile)\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Tree Canopy\naggregated_with_canopy_full.plot(\n    ax=axes[0],\n    column=\"canopy_percent\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Tree Canopy by Census Tract\", fontsize=14)\naxes[0].set_axis_off()\n\n# Plot 2: Tree Canopy (Quantile)\naggregated_with_canopy_full.plot(\n    ax=axes[1],\n    column=\"canopy_percent\",\n    cmap=\"Greens\",\n    scheme=\"quantiles\",\n    k=5,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Tree Canopy by Census Tract (Quantile)\", fontsize=14)\naxes[1].set_axis_off()\n\n# Customize legend for Median Household Income\nincome_legend = axes[1].get_legend()\nincome_legend.set_bbox_to_anchor((1.2, 0.1))  # Adjust position to bottom-right\nincome_legend.set_title(\"Percentage Coverage\")\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 5: Tree Canopy Converage",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#census-data",
    "href": "pages/DataPrep.html#census-data",
    "title": "Data Preparation",
    "section": "1.7. Census Data",
    "text": "1.7. Census Data\n\navailable = cenpy.explorer.available()\n\n# Return a dataframe for 5 year ACS\n# Axis=0 means to filter the index labels!\nacs = available.filter(regex=\"^ACSDT5Y\", axis=0)\n\n# Choosing only 2019 ACS 5-Year\n## 2019 chosen over 2021 because of the number of census tracts\nacs = cenpy.remote.APIConnection(\"ACSDT5Y2019\")\n\nFor the purpose of this project, we are interested in finding the following:\n\nAverage Median Income\nPercentage Non-White Population\nPopulation with High School Dipolma or Higher (Age 25+)\nPercent Dependent Population (Age 0-15 and 65 and older)\n\n\n# Variables from Census\nvariables = [\n    \"NAME\",\n    \"B03002_001E\",  # Total population\n    \"B03002_003E\",  # Not Hispanic, White\n    \"B19013_001E\",  # Median household income\n    \"B15003_017E\",  # High School diploma \n    \"B15003_018E\",  # GED or alternative\n    \"B15003_019E\",  # Some college\n    \"B15003_020E\",  # Some college, more than 1 year\n    \"B15003_021E\",  # Associate's Degree\n    \"B15003_022E\",  # Bachelor's degree\n    \"B15003_023E\",  # Master's degree\n    \"B15003_024E\",  # Professional School\n    \"B15003_025E\",  # Doctorate degree\n    \"B01001_003E\",  # Male Population under 5\n    \"B01001_004E\",  # Male Population 5-9\n    \"B01001_005E\",  # Male Population 10-14\n    \"B01001_020E\",  # Male Population 65-66\n    \"B01001_021E\",  # Male Population 67-69\n    \"B01001_022E\",  # Male Population 70-74\n    \"B01001_023E\",  # Male Population 75-79\n    \"B01001_024E\",  # Male Population 80-84\n    \"B01001_025E\",  # Male Population 85 and older\n    \"B01001_027E\",  # Female Population under 5\n    \"B01001_028E\",  # Female Population 5-9\n    \"B01001_029E\",  # Female Population 10-14\n    \"B01001_044E\",  # Female Population 65-66\n    \"B01001_045E\",  # Female Population 67-69\n    \"B01001_046E\",  # Female Population 70-74\n    \"B01001_047E\",  # Female Population 75-79\n    \"B01001_048E\",  # Female Population 80-84\n    \"B01001_049E\"   # Female Population 85 and older\n]\n\n\n# Define codes for Philly\nphilly_county_code = \"101\"\npa_state_code = \"42\"\n\n# Adjust the geo_unit to query census tracts\nphilly_census_data = acs.query(\n    cols=variables,\n    geo_unit=\"tract:*\", \n    geo_filter={\"state\": pa_state_code, \"county\": philly_county_code}\n)\n\n\n# Check the data types for each column\n# print(philly_census_data.dtypes)\n\n# Convert the data types to numeric \nnumeric_columns = [\n    \"B03002_001E\", \"B03002_003E\", \"B19013_001E\", \n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\" \n]\n\nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].apply(pd.to_numeric, errors=\"coerce\")\n\n# Handle missing values \nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].fillna(0)\n\n\n# Combining Columns to aggregate population data\nphilly_census_data[\"Pop_15_and_Younger\"] = (\n    philly_census_data[\"B01001_003E\"] +  # Male under 5\n    philly_census_data[\"B01001_004E\"] +  # Male 5-9\n    philly_census_data[\"B01001_005E\"] +  # Male 10-14\n    philly_census_data[\"B01001_027E\"] +  # Female under 5\n    philly_census_data[\"B01001_028E\"] +  # Female 5-9\n    philly_census_data[\"B01001_029E\"]    # Female 10-14\n) \n\n\nphilly_census_data[\"Pop_65_and_Older\"] = (\n    philly_census_data[\"B01001_020E\"] +  # Male 65-66\n    philly_census_data[\"B01001_021E\"] +  # Male 67-69\n    philly_census_data[\"B01001_022E\"] +  # Male 70-74\n    philly_census_data[\"B01001_023E\"] +  # Male 75-79\n    philly_census_data[\"B01001_024E\"] +  # Male 80-84\n    philly_census_data[\"B01001_025E\"] +  # Male 85 and older\n    philly_census_data[\"B01001_044E\"] +  # Female 65-66\n    philly_census_data[\"B01001_045E\"] +  # Female 67-69\n    philly_census_data[\"B01001_046E\"] +  # Female 70-74\n    philly_census_data[\"B01001_047E\"] +  # Female 75-79\n    philly_census_data[\"B01001_048E\"] +  # Female 80-84\n    philly_census_data[\"B01001_049E\"]    # Female 85 and older\n)\n\n# Creating Dependent Population Column\nphilly_census_data[\"Dependent_Pop\"] = (\n    philly_census_data[\"Pop_15_and_Younger\"] + \n    philly_census_data[\"Pop_65_and_Older\"]\n)\n\n# Creating Percentage dependent population column\nphilly_census_data[\"Perc_Dependent_Pop\"] = (\n    (philly_census_data[\"Dependent_Pop\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n# Combining Columns to aggregate education data\n# Education attainment that is at least high school or more\nphilly_census_data[\"Edu_HS_Higher\"] = (\n    philly_census_data[\"B15003_017E\"] +  # High School diploma \n    philly_census_data[\"B15003_018E\"] +  # GED or alternative\n    philly_census_data[\"B15003_019E\"] +  # Some college\n    philly_census_data[\"B15003_020E\"] +  # Some college, more than 1 year\n    philly_census_data[\"B15003_021E\"] +  # Associate's Degree\n    philly_census_data[\"B15003_022E\"] +  # Bachelor's degree\n    philly_census_data[\"B15003_023E\"] +  # Master's degree\n    philly_census_data[\"B15003_024E\"] +  # Professional School\n    philly_census_data[\"B15003_025E\"]    # Doctorate degree\n) \n\n# Creating Percentage HS attainment or higher column\nphilly_census_data[\"Perc_Edu_HS_Higher\"] = (\n    (philly_census_data[\"Edu_HS_Higher\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n# Creating Non-White Population Column\nphilly_census_data[\"Non_White\"] = (\n    philly_census_data[\"B03002_001E\"] - philly_census_data[\"B03002_003E\"]\n)\n\n# Creating Percentage Non-White Population column\nphilly_census_data[\"Perc_Non_White\"] = (\n    (philly_census_data[\"Non_White\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n# Rename columns\nphilly_census_data = philly_census_data.rename(\n    columns={\n        \"B03002_001E\": \"Total_Pop\", # Total Population\n        \"B03002_003E\": \"White_Only\",  # Not Hispanic, White\n        \"B19013_001E\": \"Median_Household_Income\"\n    }\n)\n\n\n# Drop columns that are redundant \nphilly_census_data = philly_census_data.drop(columns = [\n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\"]) \n\n\n# Fetch the census tracts for Philadelphia \nphilly_census_tracts = pygris.tracts(\n    state=pa_state_code, \n    county=philly_county_code, \n    year=2019\n)\n\n\n# Merge demographic data with geometries \ncensus_data = philly_census_tracts.merge(\n    philly_census_data,\n    left_on=[\"STATEFP\", \"COUNTYFP\", \"TRACTCE\"], \n    right_on=[\"state\", \"county\", \"tract\"],\n)\n\n\ncensus_data.explore(column=\"Total_Pop\", tiles=\"CartoDB positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nCode for Visualization\n# Plot Population and Non-white Population\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Total Population\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Total_Pop\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Total Population by Census Tract\", fontsize = 14)\naxes[0].set_axis_off()\n\n# Plot 2: Percentage Non-White\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Perc_Non_White\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Percentage Non-Whites by Census Tract\", fontsize = 14)\naxes[1].set_axis_off()\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 6: Demographic and Population Distribution (2019)\n\n\n\n\n\n\n\nCode for Visualization\n# Plot total population by census tract\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\ncensus_data.plot(\n    column=\"Perc_Dependent_Pop\",  # Total population column\n    cmap=\"Blues\",          # Color map\n    legend=True,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    ax=ax\n)\n\nax.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 7: Percentage Dependent Population by Census Tract in Philadelphia\n\n\n\n\n\n\n\nCode for Visualization\n# Plot Education Attainment and Median Household Income\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Education Attainment\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Perc_Edu_HS_Higher\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Education Attainment by Census Tract\", fontsize=14)\naxes[0].set_axis_off()\n\n# Plot 2: Median Household Income\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Median_Household_Income\",\n    cmap=\"Purples\",\n    scheme=\"quantiles\",\n    k=5,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Median Household Income by Census Tract\", fontsize=14)\naxes[1].set_axis_off()\n\n# Customize legend for Median Household Income\nincome_legend = axes[1].get_legend()\nincome_legend.set_bbox_to_anchor((1.2, 0.1))  # Adjust position to bottom-right\nincome_legend.set_title(\"Income Levels\")\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 8: Demographic and Population Distribution (2019)",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/DataPrep.html#spatial-patterns-and-trends",
    "href": "pages/DataPrep.html#spatial-patterns-and-trends",
    "title": "Data Preparation",
    "section": "Spatial Patterns and Trends",
    "text": "Spatial Patterns and Trends\nUsing the cleaned datasets, we created a series of maps to visualize key variables across Philadelphia by census tracts. The visualizations revealed the following:\n\nChild Blood Lead Levels\n\nElevated rates of lead exposure were concentrated in areas around North Philadelphia and Kensington.\n\n\n\nAsthma and Cancer Prevalence\n\nCancer Prevalence: Higher concentrations were found in tracts within northeast and northwest Philadelphia.\nAsthma Prevalence: Higher concentrations were observed in areas around north and west Philadelphia.\n\n\n\nTree Canopy Coverage\n\nHigher Coverage: Concentrated in northwest, southwest, and parts of northeast Philadelphia.\nLower Coverage: Sparse canopy coverage was observed in central and northern tracts.\n\n\n\nHeat Vulnerability\n\nAreas with the highest heat vulnerability scores were concentrated around north and west Philadelphia, where tree canopy coverage was minimal.\n\n\n\nNon-White Populations\n\nCensus tracts in north, west, and southwest Philadelphia exhibited the highest concentration of non-white populations.\n\n\n\nEducational Attainment\n\nHigher proportions of adults with at least a high school diploma were concentrated in northwest, south Philadelphia, and Center City.\n\n\n\nMedian Household Income\n\nAreas around Center City, lower north, and northeast Philadelphia had the highest concentration of high median household incomes by census tract.",
    "crumbs": [
      "1. Preparing Data"
    ]
  },
  {
    "objectID": "pages/Conclusion.html",
    "href": "pages/Conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "This analysis highlights the role of tree canopy coverage in influencing public health outcomes across different socio-economic groups in Philadelphia.\n\nGroup 0 (Label-0 in Clustering):\n\nSocio-Economic Characteristics: Represents a socio-economically vulnerable population with lower median household income, lower education levels, lower dependent population percentage, and a higher percentage of non-white residents.\nFindings: Tree canopy coverage shows a negative correlation with:\n\nLead exposure (perc_5plus_aggregated)\nAsthma rate (casthma_crudeprev_aggregated)\nCancer rate (cancer_crudeprev_aggregated)\nHeat Vulnerability Index (hvi_score_aggregated)\n\nImplications: These results suggest that increasing tree canopy in vulnerable areas could lead to substantial improvements in public health outcomes. The City of Philadelphia should prioritize aggressive tree-planting initiatives in these regions.\n\n\n\nGroup 1 (Label-1 in Clustering):\n\nSocio-Economic Characteristics: Represents a less vulnerable population with higher median household income, higher education levels, medium dependent population percentage, and a lower percentage of non-white residents.\nFindings:\n\nNegative correlation between tree canopy and lead exposure, as well as asthma rates, indicating a continued beneficial effect of tree canopy coverage on these outcomes.\nWeak positive correlations between tree canopy and both cancer rates (cancer_crudeprev_aggregated) and heat vulnerability index (hvi_score_aggregated), suggesting a more complex relationship in this group.\n\nImplications: Tree canopy remains important in less vulnerable areas, but its impact may be more limited for certain public health indicators like cancer rates and heat vulnerability.\n\n\n\nGroup 2 (Label-2 in Clustering):\n\nExclusion: This group was excluded from the analysis due to significant outliers identified in the box plots, which undermine the reliability of the results for this cluster.\n\n\n\nKey Takeaways:\n\nThere is a distinct difference in the relationship between tree canopy coverage and public health outcomes across socio-economic groups.\n\nVulnerable Groups (Group 0): strong negative correlations between tree canopy and indicators such as lead exposure, asthma prevalence, cancer rates, and the heat vulnerability index underscore the urgent need for targeted tree-planting initiatives in these areas to mitigate health inequities.\nLess Vulnerable Groups (Group 1): while tree canopy remains beneficial, its impact is less pronounced, reflecting differing needs and priorities across socio-economic groups. This suggests that tree-planting efforts should be tailored to address the unique challenges faced by vulnerable communities, ensuring equitable improvements in health outcomes citywide.\n\nTo address health inequities, the City of Philadelphia should prioritize expanding tree canopy coverage in vulnerable communities characterized by:\n\nLow median household income\nLow education levels\nLower dependent population percentages\nHigher non-white population percentages\n\n\nTargeting these areas can significantly enhance public health outcomes, reduce environmental disparities, and promote greater equity across the city.\nThe Health Equity Index reveals significant disparities in health outcomes across Philadelphiaâ€™s census tracts, with vulnerable communities disproportionately burdened by environmental and socioeconomic inequities. Strong negative correlations between tree canopy coverage and health challenges such as asthma prevalence, lead exposure, and heat vulnerability emphasize the critical role of urban greening initiatives in improving public health. These findings highlight the urgent need to prioritize vulnerable neighborhoodsâ€”characterized by low income, low education levels, and higher percentages of non-white residentsâ€”in tree-planting and public health interventions.\nWhile less vulnerable communities also benefit from environmental improvements, the analysis underscores the differing needs and priorities across socio-economic groups. Tailoring initiatives to address these unique challenges can reduce environmental and health disparities, ultimately advancing Philadelphiaâ€™s goals for environmental justice and equity. By using the HEI as a guide, city leaders can make data-driven decisions that foster healthier, more resilient neighborhoods for all residents.\n\n\n\n\n Back to top",
    "crumbs": [
      "4. Conclusion"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Defining the Health Equity Index in Philadelphia\nAt the Census Tract Level",
    "section": "",
    "text": "We are excited to present Defining the Health Equity Index in Philadelphia at the Census Tract Level.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Us",
    "section": "",
    "text": "Yujin Song and Lu Yii Wong are second-year graduate students in the Master of City Planning program at the University of Pennsylvaniaâ€™s Weitzman School of Design. Both specialize in land use and environmental planning, with a shared passion for leveraging data-driven approaches to address urban and environmental challenges.\nThis is a final project for MUSA 550: Geospatial Data Science in Python. The project combines their expertise in urban planning and geospatial analytics to explore pressing issues in health equity and environmental justice.\n\n\n\n\n\nYujin Song, Lu Yii Wong\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About Us"
    ]
  },
  {
    "objectID": "about.html#meet-the-team",
    "href": "about.html#meet-the-team",
    "title": "About Us",
    "section": "Meet the Team",
    "text": "Meet the Team\n\n\n\n\n\n\n\nYujin Song\n\n\n\nLu Yii Wong",
    "crumbs": [
      "About Us"
    ]
  },
  {
    "objectID": "pages/Clustering.html#non-spatial-clustering",
    "href": "pages/Clustering.html#non-spatial-clustering",
    "title": "Clustering Analysis",
    "section": "3.1. Non-Spatial Clustering",
    "text": "3.1. Non-Spatial Clustering\nWe developed a clustering approach focusing on tree canopy coverage to analyze the socioeconomic status of Philadelphia neighborhoods and its potential impact on health outcomes. This analysis explores whether areas with similar socioeconomic characteristics exhibit differences in health outcomes, such as cancer prevalence, asthma rates, and heat vulnerability. Identifying such disparities informs the need for tailored policy interventions by the City of Philadelphia.\nWe constructed a new dataset combining key socio-economic variables and public health indicators, with the following socio-economic criteria used for clustering:\n\nPerc_Non_White Percentage of Non-White Population\nPerc_Dependent_Pop Percentage of Dependent Population (ages 0-15 and 65+)\nPerc_Edu_HS_Higher Percentage of the Population with High School Education or Higher\nLog_Median_Household_Income Log-transformed Median Household Income\n\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\n\n\n# Check for null values\nprint(combined_data[['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']].isnull().sum())\n\nPerc_Non_White                  8\nPerc_Dependent_Pop              8\nPerc_Edu_HS_Higher              8\nLog_Median_Household_Income    10\ndtype: int64\n\n\n\n# Input missing values, using mean as proxy\nimputer = SimpleImputer(strategy=\"mean\") \ncombined_data[['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']] = imputer.fit_transform(\n    combined_data[['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']]\n)\n\n\n# Step 1: Set the environment variable to suppress memory leak warning\nos.environ['OMP_NUM_THREADS'] = '2'\n\n# Step 2: Scale the data\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(combined_data[['Perc_Non_White', \n                                                  'Perc_Dependent_Pop', \n                                                  'Perc_Edu_HS_Higher', \n                                                  'Log_Median_Household_Income']])\n\n# Step 3: Run KMeans\nkmeans = KMeans(n_clusters=3, random_state=42)  # Adjust number of clusters\nkmeans.fit(data_scaled)\n\n# Step 4: Add labels to the original DataFrame\ncombined_data['label'] = kmeans.labels_",
    "crumbs": [
      "3. Clustering Analysis"
    ]
  },
  {
    "objectID": "pages/Clustering.html#plot-of-clustering-by-similar-socio-economic-status",
    "href": "pages/Clustering.html#plot-of-clustering-by-similar-socio-economic-status",
    "title": "Clustering Analysis",
    "section": "3.2. Plot of Clustering by Similar Socio-Economic Status",
    "text": "3.2. Plot of Clustering by Similar Socio-Economic Status\nThis code visualizes KMeans clustering results on a map using GeoPandas and Matplotlib.\n\n\nCode for Visualization\n# Step 1: Convert the DataFrame to a GeoDataFrame if not already one\ngeo_combined_data = gpd.GeoDataFrame(combined_data, geometry='geometry')\n\n# Step 2: Ensure CRS is set and transform to EPSG:3857\nif geo_combined_data.crs is None:\n    geo_combined_data.set_crs(\"EPSG:4326\", inplace=True)  # Assuming original CRS is EPSG:4326\ngeo_combined_data = geo_combined_data.to_crs(\"EPSG:3857\")\n\n# Step 3: Plot the clusters without x and y information\nfig, ax = plt.subplots(figsize=(10, 8))\ngeo_combined_data.plot(column='label', categorical=True, legend=True, cmap='tab10', ax=ax, legend_kwds={'frameon': False})\n\n# Step 4: Remove axis labels, ticks, and bounding box\nax.set_axis_off()  # Turn off the entire axis\nplt.tight_layout()\n\n# Step 5: Show the plot\nplt.show()\n\n\n\n\n\nKMeans Clustering by Labels\n\n\n\n\nUsing K-means clustering, we segmented the data into three clusters based on socioeconomic status. The clusters were visualized on a map of Philadelphia by census tracts to display spatial distribution patterns:\n\nCluster 0 (Blue): Concentrated in central Philadelphia and a few scattered tracts throughout the city.\nCluster 1 (Brown): Primarily located in northern, eastern, and northwestern Philadelphia.\nCluster 2 (Teal): Dominates large areas in Philadelphiaâ€™s southern, western, and northeastern parts.",
    "crumbs": [
      "3. Clustering Analysis"
    ]
  },
  {
    "objectID": "pages/Clustering.html#export-clusters-by-label",
    "href": "pages/Clustering.html#export-clusters-by-label",
    "title": "Clustering Analysis",
    "section": "3.3. Export Clusters by Label",
    "text": "3.3. Export Clusters by Label\nThis code ensures that the GeoDataFrame has only one active geometry column and exports each cluster as a separate GeoJSON file:\n\n# Handle Geometry Columns\ngeo_combined_data = geo_combined_data[[col for col in geo_combined_data.columns if not col.startswith('geometry_')]]\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n\n# Step 1: Define the base output directory\nbase_path = \"data/\"\noutput_dir = os.path.join(base_path, \"output_by_label\")\nos.makedirs(output_dir, exist_ok=True)\n\n# Step 2: Ensure only one geometry column\n# Drop other geometry columns if they exist\ngeometry_columns = [col for col in geo_combined_data.columns if geo_combined_data[col].dtype.name == 'geometry']\nif len(geometry_columns) &gt; 1:\n    print(\"Multiple geometry columns detected. Dropping all but the active one.\")\n    geo_combined_data = geo_combined_data.drop(columns=[col for col in geometry_columns if col != 'geometry'])\n\n# Ensure the 'geometry' column is set as the active geometry\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n# Step 3: Iterate over unique labels and save each subset\nfor label in geo_combined_data['label'].unique():\n    label_data = geo_combined_data[geo_combined_data['label'] == label]\n    file_path = os.path.join(output_dir, f\"label_{label}.geojson\")  # Output file path\n    label_data.to_file(file_path, driver=\"GeoJSON\")  # Save as GeoJSON\n    print(f\"Saved data for label {label} to {file_path}\")\n\nSaved data for label 0 to data/output_by_label\\label_0.geojson\nSaved data for label 1 to data/output_by_label\\label_1.geojson\nSaved data for label 2 to data/output_by_label\\label_2.geojson",
    "crumbs": [
      "3. Clustering Analysis"
    ]
  },
  {
    "objectID": "pages/Clustering.html#clustering-analysis",
    "href": "pages/Clustering.html#clustering-analysis",
    "title": "Clustering Analysis",
    "section": "3.4. Clustering Analysis",
    "text": "3.4. Clustering Analysis\nNext, we created box plots to analyze the distribution of socioeconomic variables across clusters, providing insights into their unique characteristics. Each group had the following characteristics:\nThis code creates box plots to analyze the distribution of selected socio-economic variables across different clusters.\n# List of columns to analyze\ncolumns_to_plot = ['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']\n\n# Create a box plot for each column\nfor column in columns_to_plot:\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n    plt.title(f\"Distribution of {column} Across Clusters\", fontsize=16)\n    plt.xlabel(\"Cluster Labels\", fontsize=12)\n    plt.ylabel(column, fontsize=12)\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBox Plot Explanation\n\nGroup 0 (Socioeconomically vulnerable): Low median household income, low percentage of individuals with high school or higher education, low dependent population percentage, and high percentage of non-white residents.\nGroup 1 (Less socioeconomically vulnerable): High median household income, high education attainment, medium dependent population percentage, and low percentage of non-white residents\nGroup 2 (Excluded from further analysis): This group had a high percentage of non-white and dependent population, low median household income, and lower education levels. Some significant outliers were present in this group, suggesting the need to exclude them from further analysis and limiting the reliability of the analysis for this cluster.\n\n\nFrom the box plots:\n\nGroup 0 represents a socio-economically vulnerable population, with lower median household income, lower education levels, and a higher percentage of non-white population.\nWhile Group 1 has a higher dependent population percentage, Group 0 demonstrates more socio-economic vulnerabilites overall.",
    "crumbs": [
      "3. Clustering Analysis"
    ]
  },
  {
    "objectID": "pages/Clustering.html#tree-canopy-effect-on-public-health",
    "href": "pages/Clustering.html#tree-canopy-effect-on-public-health",
    "title": "Clustering Analysis",
    "section": "3.5. Tree Canopy Effect on Public Health",
    "text": "3.5. Tree Canopy Effect on Public Health\nThis analysis examines the relationship between tree canopy coverage and public health outcomes within clusters of similar socio-economic status.\n\nKey Variables: Includes tree canopy percentage, lead exposure, asthma prevalence, cancer prevalence, and heat vulnerability index.\nMethodology: For each cluster, correlations between these variables are computed and visualized using heatmaps.\nObjective: To identify how tree canopy affects public health indicators across different socio-economic groups.\n\n\n# Directory containing the GeoJSON files\ninput_dir = \"data/output_by_label\"\n\n# Iterate through each GeoJSON file\nfor file_name in os.listdir(input_dir):\n    if file_name.endswith(\".geojson\"):\n        file_path = os.path.join(input_dir, file_name)\n        \n        # Load the GeoJSON file into a GeoDataFrame\n        gdf = gpd.read_file(file_path)\n        \n        # Extract the required columns\n        required_columns = ['canopy_percent', 'perc_5plus_aggregated', \n                            'casthma_crudeprev_aggregated', 'cancer_crudeprev_aggregated', \n                            'hvi_score_aggregated']\n        \n        # Ensure columns exist in the GeoDataFrame\n        missing_columns = [col for col in required_columns if col not in gdf.columns]\n        if missing_columns:\n            print(f\"Skipping {file_name}: Missing columns {missing_columns}\")\n            continue\n        \n        # Compute the correlation matrix\n        correlation_matrix = gdf[required_columns].corr()\n        \n        # Plot the correlation matrix as a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", cbar=True)\n        plt.title(f\"Correlation Matrix for {file_name}\", fontsize=16)\n        plt.tight_layout()\n        \n        # Display the heatmap\n        plt.show()",
    "crumbs": [
      "3. Clustering Analysis"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html",
    "href": "pages/DataAnalysis.html",
    "title": "Getting Insights",
    "section": "",
    "text": "# Ensure both data frames have a common key column, e.g., \"GEOID\"\nif \"GEOID\" not in aggregated_with_canopy_full.columns or \"GEOID\" not in census_data.columns:\n    raise KeyError(\"Both data frames must contain a 'GEOID' column for merging.\")\n\n# Merge the two data frames\ncombined_data = pd.merge(\n    census_data,\n    aggregated_with_canopy_full,\n    on=\"GEOID\",\n    how=\"outer\",  # Use 'outer' to retain all data; use 'inner' for only matching rows\n    suffixes=('', '_canopy')  # Add suffix to distinguish overlapping column names\n)",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#combining-all-data-sets",
    "href": "pages/DataAnalysis.html#combining-all-data-sets",
    "title": "Getting Insights",
    "section": "",
    "text": "# Ensure both data frames have a common key column, e.g., \"GEOID\"\nif \"GEOID\" not in aggregated_with_canopy_full.columns or \"GEOID\" not in census_data.columns:\n    raise KeyError(\"Both data frames must contain a 'GEOID' column for merging.\")\n\n# Merge the two data frames\ncombined_data = pd.merge(\n    census_data,\n    aggregated_with_canopy_full,\n    on=\"GEOID\",\n    how=\"outer\",  # Use 'outer' to retain all data; use 'inner' for only matching rows\n    suffixes=('', '_canopy')  # Add suffix to distinguish overlapping column names\n)",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#log-transformation-of-median-household-income",
    "href": "pages/DataAnalysis.html#log-transformation-of-median-household-income",
    "title": "Getting Insights",
    "section": "2.2. Log Transformation of Median Household Income",
    "text": "2.2. Log Transformation of Median Household Income\nThe log transformation is applied to the Median Household Income variable to address potential skewness in the data. Income distributions are often right-skewed, meaning that a small number of observations with very high incomes can disproportionately influence the analysis. By applying a log transformation, we can:\n\nReduce the impact of extreme values, making the data more normally distributed.\nEnhance the interpretability of relationships, as percentage changes in income are often more meaningful than absolute changes.\nImprove the performance of statistical models and clustering algorithms, which often assume normality or are sensitive to outliers.\n\nThe resulting Log_Median_Household_Income variable is used in subsequent analyses to ensure robust and meaningful insights. hts.\n\n# Create a new column with the logged values of \"Median_Household_Income\"\n# Use np.log1p to handle zeros and avoid -inf errors\ncombined_data[\"Log_Median_Household_Income\"] = np.log1p(combined_data[\"Median_Household_Income\"])",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#scatter-plot-analysis",
    "href": "pages/DataAnalysis.html#scatter-plot-analysis",
    "title": "Getting Insights",
    "section": "2.3. Scatter Plot Analysis",
    "text": "2.3. Scatter Plot Analysis\nWe examined the relationships between socioeconomic, demographic, and environmental health indicators. The analysis revealed significant correlations, shedding light on areas of concern and the interplay between various factors. The analysis focused on the following variables:\n\nIndependent Variables:\n\nPerc_Non_White\nPerc_Dependent_Pop\nPerc_Edu_HS_Higher\nLog_Median_Household_Income(Logged)\n\nDependent Variables:\n\nPercentage of Children with Lead Exposure\nPercentage of Adults with Asthma\nPercentage of Adults with Cancer\nHeat Vulnerability Index Score\n\n\n# Independent and dependent variables\nindependent_vars = [\"Perc_Non_White\", \"Perc_Dependent_Pop\", \"Perc_Edu_HS_Higher\", \"Log_Median_Household_Income\"]\ndependent_vars = [\"perc_5plus_aggregated\", \"casthma_crudeprev_aggregated\", \"cancer_crudeprev_aggregated\", \"hvi_score_aggregated\"]\n\n# Enhanced scatter plot generation\nfor indep in independent_vars:\n    for dep in dependent_vars:\n        try:\n            plt.figure(figsize=(10, 6))\n            sns.scatterplot(data=combined_data, x=indep, y=dep, alpha=0.7, edgecolor=None)\n            plt.title(f\"Relationship Between {indep.replace('_', ' ')} and {dep.replace('_', ' ')}\", fontsize=14)\n            plt.xlabel(indep.replace('_', ' '), fontsize=12)\n            plt.ylabel(dep.replace('_', ' '), fontsize=12)\n            plt.grid(True, linestyle='--', alpha=0.5)\n            plt.tight_layout()\n            plt.show()\n        except Exception as e:\n            print(f\"Error encountered while plotting {indep} vs {dep}: {e}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe used scatter plot analysis to explore these relationships and provide insight into potential correlations. In this analysis, we logged median household income as it reduces the influence of extreme values and ensures a more normalized data distribution, facilitating a clearer interpretation of trends. This approach revealed positive and negative relationships between various variables, highlighting areas of concern and pointing to potential socio-environmental inequities in Philadelphia.\nThis exploratory analysis underscored the spatial inequities present across Philadelphia, where socio-economic disadvantages and environmental risks intersect. Vulnerable neighborhoodsâ€”characterized by low income, low education levels, and high percentages of non-white residentsâ€”face disproportionate exposure to heat, asthma, and lead-related health risks. These initial insights laid the groundwork for further analysis, including scatter plot and clustering techniques, to better understand the relationships between socio-economic factors and environmental health outcomes.\nBy visualizing and statistically examining the datasets, we gained a clearer understanding of the challenges faced by different communities, allowing us to shape subsequent analyses toward identifying actionable solutions for addressing health inequities in Philadelphia.",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#correlation-heatmap-of-features",
    "href": "pages/DataAnalysis.html#correlation-heatmap-of-features",
    "title": "Getting Insights",
    "section": "2.4. Correlation Heatmap of Features",
    "text": "2.4. Correlation Heatmap of Features\nWe utilized a correlation heatmap to visualize the Pearson correlation coefficients to deepen our understanding of the relationships between social, economic, and health-related features. This statistical measure quantifies the strength and direction of linear relationships between variables, with values ranging from -1 to 1:\n\n1 indicates a perfect positive correlation, where both variables measure increase together\n-1 indicates a perfect negative correlation, where one variable increases as another decreases\n0 indicates no linear correlation between the variables\n\nThe correlation heatmap serves as a diagnostic tool, enabling us to:\n\nIdentify strong positive correlations, where closely aligned variables tend to increase or decrease together.\nIdentify strong negative correlations where variables move in opposite directions.\nDetect weak or no correlations, where variables have little to no linear relationship. This suggests other forms of association or independence.\n\nThis helps in understanding the relationships between demographic indicators and health inequities, providing valuable insights for further analysis.\n\n# Define the new column names as a dictionary\ncolumn_rename_map = {\n    \"Perc_Non_White\": \"Percent Non-White\",\n    \"Perc_Dependent_Pop\": \"Percent Dependent Population\",\n    \"Perc_Edu_HS_Higher\": \"Percent with HS or Higher Education\",\n    \"Log_Median_Household_Income\": \"Log Median Household Income\",\n    \"perc_5plus_aggregated\": \"Lead Exposure Percent\",\n    \"casthma_crudeprev_aggregated\": \"Asthma Prevalence\",\n    \"cancer_crudeprev_aggregated\": \"Cancer Prevalence\",\n    \"hvi_score_aggregated\": \"Heat Vulnerability Index\",\n}\n\n# Rename the columns in the dataset\nrenamed_data = combined_data.rename(columns=column_rename_map)\n\n# Select only the renamed columns for the heatmap\nfeature_cols = list(column_rename_map.values())\n\n# Plot the heatmap\nsns.heatmap(\n    renamed_data[feature_cols].corr(), \n    cmap=\"coolwarm\", \n    annot=True, \n    vmin=-1, \n    vmax=1\n)\n\n# Add title and show the plot\nplt.title(\"Correlation Heatmap of Features\")\nplt.show()",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#positive-relationships",
    "href": "pages/DataAnalysis.html#positive-relationships",
    "title": "Getting Insights",
    "section": "Positive Relationships",
    "text": "Positive Relationships\n\nPercent of Non-White Population vs.Â Percent of Children Under 6 with High Blood Lead Levels\n\nCorrelation: 0.63\n\nCensus tracts with higher percentages of non-white populations experience higher rates of lead exposure among young children.\n\nPercent of Non-White Population vs.Â Prevalence of Current Asthma Among Adults\n\nCorrelation: 0.71\n\nAsthma prevalence is higher in areas with larger non-white populations.\n\nPercent of Non-White Population vs.Â Heat Vulnerability Index (HVI) Score\n\nCorrelation: 0.89\n\nHighlights significant overlap between racial demographics and heat vulnerability, emphasizing environmental justice concerns.\n\nPercent of Dependent Population vs.Â Prevalence of Cancer Among Adults\n\nCorrelation: 0.62\n\nAreas with higher proportions of dependent populations (children and older adults) also experience higher cancer prevalence.",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#negative-relationships",
    "href": "pages/DataAnalysis.html#negative-relationships",
    "title": "Getting Insights",
    "section": "Negative Relationships",
    "text": "Negative Relationships\n\nPercent of High Educational Attainment vs.Â Percent of Children Under 6 with High Blood Lead Levels\n\nCorrelation: -0.40\n\nHigher educational attainment is associated with lower rates of childhood lead exposure.\n\nPercent of High Educational Attainment vs.Â Prevalence of Current Asthma Among Adults\n\nCorrelation: -0.54\n\nAreas with higher education attainment tend to have lower asthma prevalence.\n\nPercent of High Educational Attainment vs.Â HVI Score\n\nCorrelation: -0.58\n\nHigher educational attainment is linked to lower heat vulnerability scores.\n\nMedian Household Income (Logged) vs.Â Percentage of Children Under 6 with High Blood Lead Levels\n\nCorrelation: -0.61\n\nHigher household incomes are linked to lower childhood lead exposure.\n\nMedian Household Income (Logged) vs.Â Prevalence of Current Asthma Among Adults\n\nCorrelation: -0.70\n\nReflects the inverse relationship between income levels and asthma prevalence.\n\nMedian Household Income (Logged) vs.Â HVI Score\n\nCorrelation: -0.78\n\nHighlights that higher-income areas are less vulnerable to heat-related risks.",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#key-patterns-and-implications",
    "href": "pages/DataAnalysis.html#key-patterns-and-implications",
    "title": "Getting Insights",
    "section": "Key Patterns and Implications",
    "text": "Key Patterns and Implications\n\nEnvironmental Benefits in Wealthier Areas\n\nA strong positive correlation exists between median household income and tree canopy coverage, suggesting environmental benefits are more prevalent in wealthier areas.\n\nSocioeconomic Disadvantages and Health Inequities\n\nNegative correlations between socioeconomic disadvantages (e.g., poverty, dependent populations) and health equity indicators underscore areas of concern for public health initiatives.\n\nComplex Relationships\n\nWeak correlations, such as between tree canopy and asthma rates, suggest the need for further investigation into non-linear or indirect relationships.",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#actionable-insights",
    "href": "pages/DataAnalysis.html#actionable-insights",
    "title": "Getting Insights",
    "section": "Actionable Insights",
    "text": "Actionable Insights\nGiven the initial findings, the heatmaps provide valuable guidance for targeted interventions:\n\nUrban Greening Programs: Focus on areas with high poverty and low tree canopy coverage.\nLead Abatement Efforts: Prioritize areas with high child blood lead levels and low income.\n\nBy integrating this analysis, we establish a foundation for exploring the relationships between socioeconomic and demographic characteristics with health outcomes, ultimately improving equitable public health and environmental justice outcomes.",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataAnalysis.html#conclusion",
    "href": "pages/DataAnalysis.html#conclusion",
    "title": "Getting Insights",
    "section": "Conclusion",
    "text": "Conclusion\nThese findings illustrate the disproportionate environmental and health challenges faced by marginalized communities, particularly those with higher percentages of non-white and lower-income populations. The relationships emphasize the need for targeted interventions to address these inequities and strive for environmental justice across Philadelphia.",
    "crumbs": [
      "2. Getting Insights"
    ]
  },
  {
    "objectID": "pages/DataSource.html",
    "href": "pages/DataSource.html",
    "title": "Data Source & Methodology",
    "section": "",
    "text": "Child Blood Lead Levels (2013-2015)\n\nIdentifies cases of children with blood lead levels over 5 Âµg/dL, mapped by census tract.\n\nSourced from the City of Philadelphia.\n\nDataset Link\n\nCancer and Asthma (2020)\n\nReports crude cancer and asthma prevalence rates among adults aged 18 and older.\n\nSourced from the Centers for Disease Control and Preventionâ€™s PLACES initiative.\n\nDataset Link\n\nHeat Vulnerability (2017-2019)\n\nCaptures heat vulnerability by census tract, considering heat exposure and sensitivity indicators.\n\nSourced from the City of Philadelphia.\n\nDataset Link\n\nTree Canopy (2015)\n\nIncludes point data for trees with a diameter greater than 6 inches, providing insights into urban tree distribution.\n\nSourced from the City of Philadelphia.\n\nDataset Link\n\nSocioeconomic and Demographic Data (2019)\n\nProvides indicators like median household income, racial composition, and educational attainment.\n\nSourced from the 2019 Census Bureau 5-Year American Community Survey.\n\nPulled via API.\n\nPhiladelphia Census Tract Boundaries (2010)\n\nContains spatial data for Philadelphiaâ€™s census tract boundaries.\n\nDataset Link\n\n\n\n\n\n\n\nEach dataset underwent a standardized cleaning process to ensure compatibility and consistency:\n\nVerified that the Coordinate Reference System (CRS) matched the Philadelphia Census Tract Boundary layer and reprojected datasets as necessary.\nConducted a spatial join to integrate datasets with the Census Tract Boundary layer, preserving essential columns like census tract names and GEOID.\nCreated preliminary visualizations of key variables by census tract to identify spatial patterns.\n\n\n\n\nAdditional steps were required to clean and prepare census data:\n\nRetrieved 2019 5-Year ACS data for Philadelphia by census tracts via an API, including over 30 columns of demographic and socioeconomic information.\nEnsured all relevant columns were numeric to enable further processing.\nComputed the following key variables:\n\nMedian Household Income\nPercentage Non-White Population\nPercentage Dependent Population (Ages 0-15 and 65 and older)\nPercentage of Population with Higher Education (At least a high school diploma)\n\nSpatially joined processed census data with the Census Tract Boundary layer.\nGenerated visualizations to identify potential patterns and relationships.",
    "crumbs": [
      "Data Source & Methodology"
    ]
  },
  {
    "objectID": "pages/DataSource.html#datasets",
    "href": "pages/DataSource.html#datasets",
    "title": "Data Source & Methodology",
    "section": "",
    "text": "Child Blood Lead Levels (2013-2015)\n\nIdentifies cases of children with blood lead levels over 5 Âµg/dL, mapped by census tract.\n\nSourced from the City of Philadelphia.\n\nDataset Link\n\nCancer and Asthma (2020)\n\nReports crude cancer and asthma prevalence rates among adults aged 18 and older.\n\nSourced from the Centers for Disease Control and Preventionâ€™s PLACES initiative.\n\nDataset Link\n\nHeat Vulnerability (2017-2019)\n\nCaptures heat vulnerability by census tract, considering heat exposure and sensitivity indicators.\n\nSourced from the City of Philadelphia.\n\nDataset Link\n\nTree Canopy (2015)\n\nIncludes point data for trees with a diameter greater than 6 inches, providing insights into urban tree distribution.\n\nSourced from the City of Philadelphia.\n\nDataset Link\n\nSocioeconomic and Demographic Data (2019)\n\nProvides indicators like median household income, racial composition, and educational attainment.\n\nSourced from the 2019 Census Bureau 5-Year American Community Survey.\n\nPulled via API.\n\nPhiladelphia Census Tract Boundaries (2010)\n\nContains spatial data for Philadelphiaâ€™s census tract boundaries.\n\nDataset Link",
    "crumbs": [
      "Data Source & Methodology"
    ]
  },
  {
    "objectID": "pages/DataSource.html#methodology",
    "href": "pages/DataSource.html#methodology",
    "title": "Data Source & Methodology",
    "section": "",
    "text": "Each dataset underwent a standardized cleaning process to ensure compatibility and consistency:\n\nVerified that the Coordinate Reference System (CRS) matched the Philadelphia Census Tract Boundary layer and reprojected datasets as necessary.\nConducted a spatial join to integrate datasets with the Census Tract Boundary layer, preserving essential columns like census tract names and GEOID.\nCreated preliminary visualizations of key variables by census tract to identify spatial patterns.\n\n\n\n\nAdditional steps were required to clean and prepare census data:\n\nRetrieved 2019 5-Year ACS data for Philadelphia by census tracts via an API, including over 30 columns of demographic and socioeconomic information.\nEnsured all relevant columns were numeric to enable further processing.\nComputed the following key variables:\n\nMedian Household Income\nPercentage Non-White Population\nPercentage Dependent Population (Ages 0-15 and 65 and older)\nPercentage of Population with Higher Education (At least a high school diploma)\n\nSpatially joined processed census data with the Census Tract Boundary layer.\nGenerated visualizations to identify potential patterns and relationships.",
    "crumbs": [
      "Data Source & Methodology"
    ]
  },
  {
    "objectID": "pages/Final-Copy3.html",
    "href": "pages/Final-Copy3.html",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "",
    "text": "Yujin Song and Lu Yii Wong\nMUSA 550\n26 December, 2024"
  },
  {
    "objectID": "pages/Final-Copy3.html#environment-setup",
    "href": "pages/Final-Copy3.html#environment-setup",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "Environment Setup",
    "text": "Environment Setup\n\n# Imports\nfrom census import Census\nimport pandas as pd\nimport os\nimport cenpy\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport seaborn as sns\nimport pygris\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\n\n# Set your Census API key\nCENSUS_API_KEY = \"c914e209b7760882fdf1c8aa19f82f743e584747\"\nc = Census(CENSUS_API_KEY)\n\n/opt/anaconda3/lib/python3.12/site-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')"
  },
  {
    "objectID": "pages/Final-Copy3.html#load-spatial-data",
    "href": "pages/Final-Copy3.html#load-spatial-data",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.1 Load Spatial Data",
    "text": "1.1 Load Spatial Data\nA GeoJSON holding for Philadelphia census tract boundary is available in the data/ directory.\n\ntract = gpd.read_file(\"data/Census_Tracts_2010 (2).geojson\")\n\ntract.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\nAWATER10\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n0\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-75.22927 39.96054, -75.22865 39.960...\n\n\n1\n2\n42\n101\n009500\n42101009500\n95\nCensus Tract 95\nG5020\nS\n319070\n0\n+39.9658709\n-075.2379140\n10430\nPOLYGON ((-75.23536 39.96852, -75.23545 39.969...\n\n\n2\n3\n42\n101\n009600\n42101009600\n96\nCensus Tract 96\nG5020\nS\n405273\n0\n+39.9655396\n-075.2435075\n10431\nPOLYGON ((-75.24343 39.9623, -75.24339 39.9622...\n\n\n3\n4\n42\n101\n013800\n42101013800\n138\nCensus Tract 138\nG5020\nS\n341256\n0\n+39.9764504\n-075.1771771\n10468\nPOLYGON ((-75.17341 39.97779, -75.17386 39.977...\n\n\n4\n5\n42\n101\n013900\n42101013900\n139\nCensus Tract 139\nG5020\nS\n562934\n0\n+39.9750563\n-075.1711846\n10469\nPOLYGON ((-75.17313 39.97776, -75.17321 39.977...\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\nax =tract.to_crs(epsg=3857).plot(ax=ax, facecolor=\"none\", edgecolor=\"black\")\n\nax.set_axis_off()\nax.set_aspect(\"equal\")"
  },
  {
    "objectID": "pages/Final-Copy3.html#child-lead-blood-level",
    "href": "pages/Final-Copy3.html#child-lead-blood-level",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.2 Child Lead Blood Level",
    "text": "1.2 Child Lead Blood Level\n\nlead = gpd.read_file(\"data/child_blood_lead_levels_by_ct.geojson\")\n\n\nlead.head()\nprint(lead.crs)\nprint(tract.crs)\n\nEPSG:4326\nEPSG:4326\n\n\n\ntract = tract.to_crs(epsg=3857)  # Ensure 'tract' is in projected CRS\nlead = lead.to_crs(epsg=3857) \n\n\n# Spatial join between ceansus tracts and lead data\njoined = gpd.sjoin(tract, lead, how=\"left\", predicate=\"intersects\")\n\njoined.head()\n\n\n\n\n\n\n\n\nOBJECTID\nSTATEFP10\nCOUNTYFP10\nTRACTCE10\nGEOID10\nNAME10\nNAMELSAD10\nMTFCC10\nFUNCSTAT10\nALAND10\n...\nINTPTLAT10\nINTPTLON10\nLOGRECNO\ngeometry\nindex_right\ncensus_tract\ndata_redacted\nnum_bll_5plus\nnum_screen\nperc_5plus\n\n\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n83\n42101008500\nFalse\n30.0\n492.0\n6.1\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n93\n42101009300\nFalse\n19.0\n315.0\n6.0\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n94\n42101009400\nFalse\n14.0\n306.0\n4.6\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n95\n42101009500\nFalse\n11.0\n253.0\n4.3\n\n\n0\n1\n42\n101\n009400\n42101009400\n94\nCensus Tract 94\nG5020\nS\n366717\n...\n+39.9632709\n-075.2322437\n10429\nPOLYGON ((-8374483.498 4860210.393, -8374414.8...\n101\n42101010200\nFalse\n17.0\n235.0\n7.2\n\n\n\n\n5 rows Ã— 21 columns\n\n\n\n\n# Replace 'NAMELSAD10' and 'perc_5plus' with the appropriate column names\nlead_aggregated = joined.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",  # Example: Average value from lead\n    \"geometry\": \"first\"     # Keep one geometry per tract\n}).reset_index()\n\nlead_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(type(lead_aggregated))\nprint(lead_aggregated.geometry.head())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n0    POLYGON ((-8364710.415 4858926.985, -8364708.8...\n1    POLYGON ((-8366008.694 4858067.328, -8366013.2...\n2    POLYGON ((-8365697.832 4857770.055, -8365707.4...\n3    POLYGON ((-8376459.164 4861101.785, -8376441.0...\n4    POLYGON ((-8375582.343 4861569.516, -8375572.4...\nName: geometry, dtype: geometry\n\n\n\nlead_aggregated = gpd.GeoDataFrame(lead_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n# Replace NaN values with -1 for visualization\nlead_aggregated[\"perc_5plus\"] = lead_aggregated[\"perc_5plus\"].fillna(-1)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\nlead_aggregated.plot(\n    ax=ax,\n    column=\"perc_5plus\",  # Use the column with lead level data\n    cmap=\"viridis\",       # Colormap for numerical data\n    edgecolor=\"white\",    # Boundary color\n    legend=True,          # Add legend\n    legend_kwds={\n        \"label\": \"Lead Level Percentage\\n(-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Format the plot\nax.set_title(\"Average Lead Level Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: City of Philadelphia (2013-2015)\", \n    ha=\"center\", fontsize=10, style=\"italic\"\n)\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy3.html#cancer-and-asthma",
    "href": "pages/Final-Copy3.html#cancer-and-asthma",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.3 Cancer and Asthma",
    "text": "1.3 Cancer and Asthma\n\ncancer_asthma= gpd.read_file(\"data/philadelphia_gdf.geojson\")\n\ncancer_asthma.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\ngeometry\n\n\n\n\n0\nPhiladelphia\n42101002500\n11.3\n5.2\n3769\nPOINT (-8365639.619 4856398.197)\n\n\n1\nPhiladelphia\n42101003702\n12.8\n4.8\n3707\nPOINT (-8369269.171 4854982.142)\n\n\n2\nPhiladelphia\n42101031401\n11.6\n4.1\n6664\nPOINT (-8356372.43 4872587.322)\n\n\n3\nPhiladelphia\n42101031502\n11.7\n6.2\n4018\nPOINT (-8355069.752 4871650.082)\n\n\n4\nPhiladelphia\n42101033200\n10.4\n6.7\n2741\nPOINT (-8353959.244 4872306.058)\n\n\n\n\n\n\n\n\ncancer_asthma = cancer_asthma.to_crs(epsg=3857)\n\n\nselected_columns = [\"countyname\", \"tractfips\",\"geometry\", \"casthma_crudeprev\", \"cancer_crudeprev\", \"totalpopulation\"]\nfiltered_gdf = cancer_asthma[selected_columns]\n\n# Check the result\nprint(filtered_gdf.head())\n\n     countyname    tractfips                          geometry  \\\n0  Philadelphia  42101002500  POINT (-8365639.619 4856398.197)   \n1  Philadelphia  42101003702  POINT (-8369269.171 4854982.142)   \n2  Philadelphia  42101031401   POINT (-8356372.43 4872587.322)   \n3  Philadelphia  42101031502  POINT (-8355069.752 4871650.082)   \n4  Philadelphia  42101033200  POINT (-8353959.244 4872306.058)   \n\n  casthma_crudeprev cancer_crudeprev totalpopulation  \n0              11.3              5.2            3769  \n1              12.8              4.8            3707  \n2              11.6              4.1            6664  \n3              11.7              6.2            4018  \n4              10.4              6.7            2741  \n\n\n\n# Filter for rows where CountyName is Philadelphia\nphiladelphia_gdf = filtered_gdf[filtered_gdf[\"countyname\"].str.contains(\"Philadelphia\", case=False, na=False)]\n\n# Check the result\nphiladelphia_gdf.head()\n\n\n\n\n\n\n\n\ncountyname\ntractfips\ngeometry\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\n\n\n\n\n0\nPhiladelphia\n42101002500\nPOINT (-8365639.619 4856398.197)\n11.3\n5.2\n3769\n\n\n1\nPhiladelphia\n42101003702\nPOINT (-8369269.171 4854982.142)\n12.8\n4.8\n3707\n\n\n2\nPhiladelphia\n42101031401\nPOINT (-8356372.43 4872587.322)\n11.6\n4.1\n6664\n\n\n3\nPhiladelphia\n42101031502\nPOINT (-8355069.752 4871650.082)\n11.7\n6.2\n4018\n\n\n4\nPhiladelphia\n42101033200\nPOINT (-8353959.244 4872306.058)\n10.4\n6.7\n2741\n\n\n\n\n\n\n\n\ncancer_asthma_aggregated = gpd.sjoin(lead_aggregated, philadelphia_gdf, how=\"left\", predicate=\"intersects\")\n\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ngeometry\nindex_right\ncountyname\ntractfips\ncasthma_crudeprev\ncancer_crudeprev\ntotalpopulation\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n347.0\nPhiladelphia\n42101000100\n9.2\n3.4\n3478\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n306.0\nPhiladelphia\n42101001001\n8.9\n8.4\n2603\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n201.0\nPhiladelphia\n42101001002\n9.0\n7.2\n3612\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n261.0\nPhiladelphia\n42101010000\n13.5\n4.6\n4366\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n177.0\nPhiladelphia\n42101010100\n13.6\n5.5\n5459\n\n\n\n\n\n\n\n\n# Get the number of rows\nnum_rows = cancer_asthma_aggregated.shape[0]\nprint(f\"Number of rows: {num_rows}\")\n\nNumber of rows: 386\n\n\n\nprint(cancer_asthma_aggregated[\"casthma_crudeprev\"].dtype)\nprint(cancer_asthma_aggregated[\"cancer_crudeprev\"].dtype)\n\nobject\nobject\n\n\n\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"casthma_crudeprev\"], errors=\"coerce\")\ncancer_asthma_aggregated[\"cancer_crudeprev\"] = pd.to_numeric(cancer_asthma_aggregated[\"cancer_crudeprev\"], errors=\"coerce\")\n\n\n# Get the range of 'casthma_crudeprev'\nasthma_min = cancer_asthma_aggregated[\"casthma_crudeprev\"].min()\nasthma_max = cancer_asthma_aggregated[\"casthma_crudeprev\"].max()\nprint(f\"Range of 'casthma_crudeprev': {asthma_min} to {asthma_max}\")\n\n# Get the range of 'cancer_crudeprev'\ncancer_min = cancer_asthma_aggregated[\"cancer_crudeprev\"].min()\ncancer_max = cancer_asthma_aggregated[\"cancer_crudeprev\"].max()\nprint(f\"Range of 'cancer_crudeprev': {cancer_min} to {cancer_max}\")\n\nRange of 'casthma_crudeprev': 8.3 to 17.4\nRange of 'cancer_crudeprev': 0.8 to 17.6\n\n\n\ncancer_asthma_aggregated = cancer_asthma_aggregated.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\ncancer_asthma_aggregated.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(f\"Number of rows after cleaning: {cancer_asthma_aggregated.shape[0]}\")\n\nNumber of rows after cleaning: 384\n\n\n\ncancer_asthma_aggregated = gpd.GeoDataFrame(cancer_asthma_aggregated, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n\n# Fill NaN values with a placeholder (-1) for \"No Data\"\ncancer_asthma_aggregated[\"cancer_crudeprev_filled\"] = cancer_asthma_aggregated[\"cancer_crudeprev\"].fillna(-1)\ncancer_asthma_aggregated[\"casthma_crudeprev\"] = cancer_asthma_aggregated[\"casthma_crudeprev\"].fillna(-1)\n\n\n# Plot Cancer and Asthma Prevalence \nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Cancer\ncancer_asthma_aggregated.plot(\n    ax=axes[0],\n    column=\"cancer_crudeprev\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Cancer Prevalence (-1 = No Data)\"},\n)\naxes[0].set_title(\"Cancer Prevalence by Census Tract\", fontsize = 14)\naxes[0].set_axis_off()\n\n# Plot 2: Asthma\ncancer_asthma_aggregated.plot(\n    ax=axes[1],\n    column=\"casthma_crudeprev\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n    legend_kwds={\"label\": \"Asthma Prevalence (-1 = No Data)\"},\n)\naxes[1].set_title(\"Asthma Prevalence by Census Tract\", fontsize = 14)\naxes[1].set_axis_off()\n\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: Centers for Disease Control and Preventionâ€™s PLACES initiative (2022)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy3.html#heat-vulnerability",
    "href": "pages/Final-Copy3.html#heat-vulnerability",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.4 Heat Vulnerability",
    "text": "1.4 Heat Vulnerability\n\nheatindex = gpd.read_file(\"data/heat_vulnerability_ct.geojson\")\n\nheatindex.head()\n\n\n\n\n\n\n\n\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n42101002100\n21\n0\n2023\n0.502262\n-1.481429\n0.639224\n1\n4.044948e+05\n2580.858471\nPOLYGON ((-75.1737 39.93624, -75.17378 39.9358...\n\n\n1\n42101002200\n22\n0\n2023\n-3.183298\n-1.658469\n-1.769318\n2\n3.894601e+05\n2518.894793\nPOLYGON ((-75.1737 39.93624, -75.17369 39.9362...\n\n\n2\n42101002300\n23\n0\n2023\n-6.884403\n-1.193579\n-4.362779\n3\n3.616223e+05\n2771.142380\nPOLYGON ((-75.16702 39.93675, -75.16696 39.936...\n\n\n3\n42101002400\n24\n0\n2023\n-7.107618\n-1.382308\n-4.462616\n4\n9.117703e+05\n4810.554362\nPOLYGON ((-75.16629 39.94004, -75.16623 39.940...\n\n\n4\n42101034803\n348.03\n0\n2023\n-7.830042\n-0.358619\n-5.684468\n5\n2.186876e+06\n6444.130598\nPOLYGON ((-75.00888 40.05866, -75.00915 40.059...\n\n\n\n\n\n\n\n\nheatindex = heatindex.to_crs(epsg=3857)\n\n# Perform the spatial join\njoined_with_heatindex = gpd.sjoin(cancer_asthma_aggregated, heatindex, how=\"left\", predicate=\"intersects\")\n\n\n# Display the first few rows\njoined_with_heatindex.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\ngeometry\ncancer_crudeprev_filled\nindex_right\ngeoid10\nname10\nn_veryhigh\nyear\nhsi_score\nhei_score\nhvi_score\nobjectid\nShape__Area\nShape__Length\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n177\n42101036600\n366\n0\n2023\n-8.418257\n-2.202868\n-5.749989\n178\n4.168056e+06\n12166.444233\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n291\n42101000100\n1\n0\n2023\n-11.402807\n-3.314470\n-7.514585\n292\n1.202257e+06\n4528.078584\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n314\n42101036700\n367\n0\n2023\n-8.857523\n-4.177542\n-5.601159\n315\n1.365371e+06\n4905.453398\n\n\n0\nCensus Tract 1\n42101000100\n0.0\n9.2\n3.4\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n3.4\n315\n42101037600\n376\n0\n2023\n-1.707536\n-2.097253\n-0.802943\n316\n1.222412e+06\n4704.678043\n\n\n1\nCensus Tract 10.01\n42101001001\n0.0\n8.9\n8.4\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n8.4\n23\n42101001001\n10.01\n0\n2023\n-8.117465\n-1.167082\n-5.634836\n24\n3.907849e+05\n2942.081107\n\n\n\n\n\n\n\n\n# Check the number of rows and columns\nprint(f\"Number of rows: {joined_with_heatindex.shape[0]}\")\nprint(f\"Number of columns: {joined_with_heatindex.shape[1]}\")\n\nNumber of rows: 1754\nNumber of columns: 18\n\n\n\naggregated_heat = joined_with_heatindex.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\naggregated_heat.head()\n\n\n\n\n\n\n\n\nNAMELSAD10\nGEOID10\nperc_5plus\ncasthma_crudeprev\ncancer_crudeprev\nhvi_score\ngeometry\n\n\n\n\n0\nCensus Tract 1\n42101000100\n0.000000\n9.2\n3.4\n-4.917169\nPOLYGON ((-8364710.415 4858926.985, -8364708.8...\n\n\n1\nCensus Tract 10.01\n42101001001\n0.000000\n8.9\n8.4\n-6.734700\nPOLYGON ((-8366008.694 4858067.328, -8366013.2...\n\n\n2\nCensus Tract 10.02\n42101001002\n0.000000\n9.0\n7.2\n-6.821269\nPOLYGON ((-8365697.832 4857770.055, -8365707.4...\n\n\n3\nCensus Tract 100\n42101010000\n6.180000\n13.5\n4.6\n2.479992\nPOLYGON ((-8376459.164 4861101.785, -8376441.0...\n\n\n4\nCensus Tract 101\n42101010100\n5.333333\n13.6\n5.5\n3.499149\nPOLYGON ((-8375582.343 4861569.516, -8375572.4...\n\n\n\n\n\n\n\n\nprint(f\"Number of rows: {aggregated_heat.shape[0]}\")\n\nNumber of rows: 384\n\n\n\naggregated_heat = gpd.GeoDataFrame(aggregated_heat, geometry=\"geometry\", crs=\"EPSG:3857\")\n\n# Handle missing data\naggregated_heat[\"hvi_score\"] = aggregated_heat[\"hvi_score\"].fillna(-1)  # Replace NaN with -1 for \"No Data\"\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_heat.plot(\n    ax=ax,\n    column=\"hvi_score\",  # Replace with the HVI column name\n    cmap=\"YlOrRd\",       # Colormap for heat index visualization\n    edgecolor=\"white\",  \n    linewidth = 0.5,\n    legend=True,         # Add a legend\n    legend_kwds={\n        \"label\": \"Heat Vulnerability Index (HVI) Score (-1 = No Data)\",\n        \"orientation\": \"vertical\",\n    },\n)\n\n# Add title and remove axis\nax.set_title(\"Heat Vulnerability Index (HVI) Score by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: City of Philadelphia (2017-2019)\", \n    ha=\"center\", fontsize=10, style=\"italic\"\n)\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy3.html#tree-canpoy",
    "href": "pages/Final-Copy3.html#tree-canpoy",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.5 Tree Canpoy",
    "text": "1.5 Tree Canpoy\n\ntree_canopy = gpd.read_file(\"data/ppr_tree_canopy_outlines_2015.geojson\")\n\n# Ensure CRS alignment\ntree_canopy = tree_canopy.to_crs(\"EPSG:3857\")\naggregated_heat = aggregated_heat.to_crs(\"EPSG:3857\")\n\n# Perform spatial intersection\nintersected = gpd.overlay(tree_canopy, aggregated_heat, how=\"intersection\")\n\n# Calculate tree canopy area (in square meters)\nintersected[\"canopy_area\"] = intersected.geometry.area\n\n\n\n\n\n\n\n\nobjectid\navg_height\npolyid\nfcode\nshape_length\nshape_area\ngeometry\n\n\n\n\n0\n2\n6\n3\n3000\n66.000526\n279.453508\nMULTIPOLYGON (((-75.27506 39.97746, -75.27506 ...\n\n\n1\n14\n17\n23\n3000\n70.425045\n351.315225\nMULTIPOLYGON (((-75.26884 39.97958, -75.26884 ...\n\n\n2\n15\n32\n24\n3000\n46.593473\n108.578054\nMULTIPOLYGON (((-75.2651 39.96519, -75.26512 3...\n\n\n3\n19\n15\n28\n3000\n67.783315\n293.959714\nMULTIPOLYGON (((-75.27271 39.97838, -75.27271 ...\n\n\n4\n28\n32\n37\n3000\n979.079210\n9433.259404\nMULTIPOLYGON (((-75.26491 39.96518, -75.26497 ...\n\n\n\n\n\n\n\n\naggregated_with_canopy = intersected.groupby([\"NAMELSAD10\", \"GEOID10\"]).agg({\n    \"perc_5plus\": \"mean\",        # Average percentage of lead exposure\n    \"casthma_crudeprev\": \"mean\", # Average asthma crude prevalence\n    \"cancer_crudeprev\": \"mean\",  # Average cancer crude prevalence\n    \"hvi_score\": \"mean\",   # Average of heat index data\n    \"canopy_area\": \"sum\",         # Total canopy area within each tract\n    \"geometry\": \"first\"          # Retain the first geometry\n}).reset_index()\n\n\n# Merge the aggregated results back with the original GeoDataFrame\naggregated_with_canopy_full = aggregated_heat.merge(\n    aggregated_with_canopy, \n    on=\"NAMELSAD10\", \n    how=\"left\", \n    suffixes=(\"\", \"_aggregated\")\n)\n\n# Rename columns\naggregated_with_canopy_full = aggregated_with_canopy_full.rename(\n    columns={\n        \"GEOID10\": \"GEOID\" # Rename GEOID to match Census\n    }\n)\n\n# Fill missing values for 'canopy_area' and 'canopy_percent' with 0\naggregated_with_canopy_full[\"canopy_area\"] = aggregated_with_canopy_full[\"canopy_area\"].fillna(0)\naggregated_with_canopy_full[\"canopy_percent\"] = aggregated_with_canopy_full[\"canopy_area\"] / aggregated_with_canopy_full.geometry.area * 100\n\nNumber of rows in aggregated_with_canopy_full: 384\n\n\n\nfig, ax = plt.subplots(figsize=(10, 10))\naggregated_with_canopy_full.plot(\n    ax=ax,\n    column=\"canopy_percent\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth = 0.2,\n    legend=True,\n    legend_kwds={\n        \"label\": \"Tree Canopy Percentage\",\n        \"orientation\": \"vertical\",\n    },\n)\n\nax.set_title(\"Tree Canopy Percentage by Census Tract\", fontsize=16)\nax.set_axis_off()\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: City of Philadelphia (2015)\", \n    ha=\"center\", fontsize=10, style=\"italic\"\n)\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy3.html#census-data",
    "href": "pages/Final-Copy3.html#census-data",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "1.6 Census Data",
    "text": "1.6 Census Data\n\navailable = cenpy.explorer.available()\n\n# Return a dataframe for 5 year ACS\n# Axis=0 means to filter the index labels!\nacs = available.filter(regex=\"^ACSDT5Y\", axis=0)\n\n/opt/anaconda3/lib/python3.12/site-packages/cenpy/explorer.py:70: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  listcols = raw_table.applymap(lambda x: isinstance(x, list)).any()\n\n\n\n\n\n\n\n\n\nc_isTimeseries\ntemporal\nspatial\nc_isAggregate\npublisher\nreferences\nprogramCode\nmodified\nlicense\nkeyword\n...\ndescription\nbureauCode\naccessLevel\ntitle\nc_isAvailable\nc_isCube\nc_isMicrodata\nc_documentationLink\nc_dataset\nvintage\n\n\n\n\nACSDT5Y2009\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-08-27 13:11:18.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2009.0\n\n\nACSDT5Y2010\nNaN\nNaN\nUnited States\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2010.0\n\n\nACSDT5Y2011\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2011.0\n\n\nACSDT5Y2012\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2012.0\n\n\nACSDT5Y2013\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2013.0\n\n\nACSDT5Y2014\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-04 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2014.0\n\n\nACSDT5Y2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-05 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2015.0\n\n\nACSDT5Y2016\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-07-05 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2016.0\n\n\nACSDT5Y2017\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2018-08-21 07:11:43.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2017.0\n\n\nACSDT5Y2018\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-22 16:28:02.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2018.0\n\n\nACSDT5Y2019\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-04-03 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2019.0\n\n\nACSDT5Y2020\nNaN\n2020/2020\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2021-07-13 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2020.0\n\n\nACSDT5Y2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-08-08 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2021.0\n\n\nACSDT5Y2022\nNaN\n2022/2022\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2023-09-05 12:01:39.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: D...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2022.0\n\n\nACSDT5Y2023\nNaN\n2023/2023\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2024-09-06 17:27:47.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Community Survey (ACS) is an ongo...\n006:07\npublic\nACS 5-Year Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5)\n2023.0\n\n\nACSDT5YAIAN2010\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-24 07:18:57.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: A...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2010.0\n\n\nACSDT5YAIAN2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-02-13 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nACS 5-Year AIAN Detailed Tables\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2015.0\n\n\nACSDT5YAIAN2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-11-29 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe American Indian and Alaska Native (AIAN) t...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: A...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, aian)\n2021.0\n\n\nACSDT5YSPT2010\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2019-10-11 14:16:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are rele...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2010.0\n\n\nACSDT5YSPT2015\nNaN\nNaN\nNaN\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2020-02-18 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are rele...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2015.0\n\n\nACSDT5YSPT2021\nNaN\n2021/2021\nUS\nTrue\nU.S. Census Bureau\nhttps://www.census.gov/developers/\n006:004\n2022-11-29 00:00:00.0\nhttps://creativecommons.org/publicdomain/zero/...\n(census,)\n...\nThe Selected Population Tables (SPT) are relea...\n006:07\npublic\nAmerican Community Survey: 5-Year Estimates: S...\nTrue\nTrue\nNaN\nhttps://www.census.gov/developer/\n(acs, acs5, spt)\n2021.0\n\n\n\n\n21 rows Ã— 23 columns\n\n\n\n\n# Choosing only 2019 ACS 5-Year\n## 2019 chosen over 2021 because of the number of census tracts\nacs = cenpy.remote.APIConnection(\"ACSDT5Y2019\")\n\nFor the purpose of this project, we are interested in finding the following:\n- Average Median Income - Percentage Non-White Population - Population with High School Dipolma or Higher (Age 25+) - Percent Dependent Population (Age 0-15 and 65 and older)\n\n# Variables from Census\nvariables = [\n    \"NAME\",\n    \"B03002_001E\",  # Total population\n    \"B03002_003E\",  # Not Hispanic, White\n    \"B19013_001E\",  # Median household income\n    \"B15003_017E\",  # High School diploma \n    \"B15003_018E\",  # GED or alternative\n    \"B15003_019E\",  # Some college\n    \"B15003_020E\",  # Some college, more than 1 year\n    \"B15003_021E\",  # Associate's Degree\n    \"B15003_022E\",  # Bachelor's degree\n    \"B15003_023E\",  # Master's degree\n    \"B15003_024E\",  # Professional School\n    \"B15003_025E\",  # Doctorate degree\n    \"B01001_003E\",  # Male Population under 5\n    \"B01001_004E\",  # Male Population 5-9\n    \"B01001_005E\",  # Male Population 10-14\n    \"B01001_020E\",  # Male Population 65-66\n    \"B01001_021E\",  # Male Population 67-69\n    \"B01001_022E\",  # Male Population 70-74\n    \"B01001_023E\",  # Male Population 75-79\n    \"B01001_024E\",  # Male Population 80-84\n    \"B01001_025E\",  # Male Population 85 and older\n    \"B01001_027E\",  # Female Population under 5\n    \"B01001_028E\",  # Female Population 5-9\n    \"B01001_029E\",  # Female Population 10-14\n    \"B01001_044E\",  # Female Population 65-66\n    \"B01001_045E\",  # Female Population 67-69\n    \"B01001_046E\",  # Female Population 70-74\n    \"B01001_047E\",  # Female Population 75-79\n    \"B01001_048E\",  # Female Population 80-84\n    \"B01001_049E\"   # Female Population 85 and older\n]\n\n\n# Define codes for Philly\nphilly_county_code = \"101\"\npa_state_code = \"42\"\n\n# Adjust the geo_unit to query census tracts\nphilly_census_data = acs.query(\n    cols=variables,\n    geo_unit=\"tract:*\", \n    geo_filter={\"state\": pa_state_code, \"county\": philly_county_code}\n)\n\n\n\n\n\n\n\n\nNAME\nB03002_001E\nB03002_003E\nB19013_001E\nB15003_017E\nB15003_018E\nB15003_019E\nB15003_020E\nB15003_021E\nB15003_022E\n...\nB01001_029E\nB01001_044E\nB01001_045E\nB01001_046E\nB01001_047E\nB01001_048E\nB01001_049E\nstate\ncounty\ntract\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n3055\n93\n52706\n854\n54\n128\n429\n220\n454\n...\n82\n75\n170\n71\n65\n39\n26\n42\n101\n026000\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4927\n130\n46166\n1148\n92\n216\n822\n226\n580\n...\n142\n21\n194\n266\n130\n89\n0\n42\n101\n026302\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5660\n36\n52895\n1077\n288\n269\n721\n506\n581\n...\n221\n32\n184\n277\n222\n111\n107\n42\n101\n026400\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6925\n122\n45540\n1637\n345\n590\n991\n101\n683\n...\n139\n43\n36\n213\n171\n69\n31\n42\n101\n010100\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3612\n176\n18476\n746\n130\n84\n373\n71\n135\n...\n160\n72\n29\n16\n68\n47\n0\n42\n101\n010700\n\n\n\n\n5 rows Ã— 34 columns\n\n\n\n\n# Check the data types for each column\n# print(philly_census_data.dtypes)\n\n# Convert the data types to numeric \nnumeric_columns = [\n    \"B03002_001E\", \"B03002_003E\", \"B19013_001E\", \n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\" \n]\n\nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].apply(pd.to_numeric, errors=\"coerce\")\n\n# Handle missing values \nphilly_census_data[numeric_columns] = philly_census_data[numeric_columns].fillna(0)\n\n\n# Combining Columns to aggregate population data\nphilly_census_data[\"Pop_15_and_Younger\"] = (\n    philly_census_data[\"B01001_003E\"] +  # Male under 5\n    philly_census_data[\"B01001_004E\"] +  # Male 5-9\n    philly_census_data[\"B01001_005E\"] +  # Male 10-14\n    philly_census_data[\"B01001_027E\"] +  # Female under 5\n    philly_census_data[\"B01001_028E\"] +  # Female 5-9\n    philly_census_data[\"B01001_029E\"]    # Female 10-14\n) \n\n\nphilly_census_data[\"Pop_65_and_Older\"] = (\n    philly_census_data[\"B01001_020E\"] +  # Male 65-66\n    philly_census_data[\"B01001_021E\"] +  # Male 67-69\n    philly_census_data[\"B01001_022E\"] +  # Male 70-74\n    philly_census_data[\"B01001_023E\"] +  # Male 75-79\n    philly_census_data[\"B01001_024E\"] +  # Male 80-84\n    philly_census_data[\"B01001_025E\"] +  # Male 85 and older\n    philly_census_data[\"B01001_044E\"] +  # Female 65-66\n    philly_census_data[\"B01001_045E\"] +  # Female 67-69\n    philly_census_data[\"B01001_046E\"] +  # Female 70-74\n    philly_census_data[\"B01001_047E\"] +  # Female 75-79\n    philly_census_data[\"B01001_048E\"] +  # Female 80-84\n    philly_census_data[\"B01001_049E\"]    # Female 85 and older\n)\n\n# Creating Dependent Population Column\nphilly_census_data[\"Dependent_Pop\"] = (\n    philly_census_data[\"Pop_15_and_Younger\"] + \n    philly_census_data[\"Pop_65_and_Older\"]\n)\n\n# Creating Percentage dependent population column\nphilly_census_data[\"Perc_Dependent_Pop\"] = (\n    (philly_census_data[\"Dependent_Pop\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n\n\n\n\n\n\nNAME\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n375\n619\n994\n32.54\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n741\n1343\n2084\n42.30\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n831\n1450\n2281\n40.30\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n1361\n870\n2231\n32.22\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n988\n302\n1290\n35.71\n\n\n\n\n\n\n\n\n# Combining Columns to aggregate education data\n# Education attainment that is at least high school or more\nphilly_census_data[\"Edu_HS_Higher\"] = (\n    philly_census_data[\"B15003_017E\"] +  # High School diploma \n    philly_census_data[\"B15003_018E\"] +  # GED or alternative\n    philly_census_data[\"B15003_019E\"] +  # Some college\n    philly_census_data[\"B15003_020E\"] +  # Some college, more than 1 year\n    philly_census_data[\"B15003_021E\"] +  # Associate's Degree\n    philly_census_data[\"B15003_022E\"] +  # Bachelor's degree\n    philly_census_data[\"B15003_023E\"] +  # Master's degree\n    philly_census_data[\"B15003_024E\"] +  # Professional School\n    philly_census_data[\"B15003_025E\"]    # Doctorate degree\n) \n\n# Creating Percentage HS attainment or higher column\nphilly_census_data[\"Perc_Edu_HS_Higher\"] = (\n    (philly_census_data[\"Edu_HS_Higher\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n\n\n\n\n\n\nNAME\nEdu_HS_Higher\nPerc_Edu_HS_Higher\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n2271\n74.34\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n3394\n68.89\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n3733\n65.95\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n4631\n66.87\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n1596\n44.19\n\n\n\n\n\n\n\n\n# Creating Non-White Population Column\nphilly_census_data[\"Non_White\"] = (\n    philly_census_data[\"B03002_001E\"] - philly_census_data[\"B03002_003E\"]\n)\n\n# Creating Percentage Non-White Population column\nphilly_census_data[\"Perc_Non_White\"] = (\n    (philly_census_data[\"Non_White\"] / philly_census_data[\"B03002_001E\"]) * 100\n).round(2)\n\n\n\n\n\n\n\n\nNAME\nNon_White\nPerc_Non_White\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n2962\n96.96\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4797\n97.36\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5624\n99.36\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6803\n98.24\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3436\n95.13\n\n\n\n\n\n\n\n\n# Rename columns\nphilly_census_data = philly_census_data.rename(\n    columns={\n        \"B03002_001E\": \"Total_Pop\", # Total Population\n        \"B03002_003E\": \"White_Only\",  # Not Hispanic, White\n        \"B19013_001E\": \"Median_Household_Income\"\n    }\n)\n\n\n# Drop columns that are redundant \nphilly_census_data = philly_census_data.drop(columns = [\n    \"B15003_017E\", \"B15003_018E\", \"B15003_019E\", \n    \"B15003_020E\", \"B15003_021E\", \"B15003_022E\",  \n    \"B15003_023E\", \"B15003_024E\", \"B15003_025E\",  \n    \"B01001_003E\", \"B01001_004E\", \"B01001_005E\", \n    \"B01001_020E\", \"B01001_021E\", \"B01001_022E\", \n    \"B01001_023E\", \"B01001_024E\", \"B01001_025E\", \n    \"B01001_027E\", \"B01001_028E\", \"B01001_029E\", \n    \"B01001_044E\", \"B01001_045E\", \"B01001_046E\", \n    \"B01001_047E\", \"B01001_048E\", \"B01001_049E\"]) \n\n\n\n\n\n\n\n\nNAME\nTotal_Pop\nWhite_Only\nMedian_Household_Income\nstate\ncounty\ntract\nPop_15_and_Younger\nPop_65_and_Older\nDependent_Pop\nPerc_Dependent_Pop\nEdu_HS_Higher\nPerc_Edu_HS_Higher\nNon_White\nPerc_Non_White\n\n\n\n\n0\nCensus Tract 260, Philadelphia County, Pennsyl...\n3055\n93\n52706\n42\n101\n026000\n375\n619\n994\n32.54\n2271\n74.34\n2962\n96.96\n\n\n1\nCensus Tract 263.02, Philadelphia County, Penn...\n4927\n130\n46166\n42\n101\n026302\n741\n1343\n2084\n42.30\n3394\n68.89\n4797\n97.36\n\n\n2\nCensus Tract 264, Philadelphia County, Pennsyl...\n5660\n36\n52895\n42\n101\n026400\n831\n1450\n2281\n40.30\n3733\n65.95\n5624\n99.36\n\n\n3\nCensus Tract 101, Philadelphia County, Pennsyl...\n6925\n122\n45540\n42\n101\n010100\n1361\n870\n2231\n32.22\n4631\n66.87\n6803\n98.24\n\n\n4\nCensus Tract 107, Philadelphia County, Pennsyl...\n3612\n176\n18476\n42\n101\n010700\n988\n302\n1290\n35.71\n1596\n44.19\n3436\n95.13\n\n\n\n\n\n\n\n\n# Fetch the census tracts for Philadelphia \nphilly_census_tracts = pygris.tracts(\n    state=pa_state_code, \n    county=philly_county_code, \n    year=2019\n)\n\n\n# Merge demographic data with geometries \ncensus_data = philly_census_tracts.merge(\n    philly_census_data,\n    left_on=[\"STATEFP\", \"COUNTYFP\", \"TRACTCE\"], \n    right_on=[\"state\", \"county\", \"tract\"],\n)\n\n\ncensus_data.explore(column=\"Total_Pop\", tiles=\"CartoDB positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Plot Population and Non-white Population\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Total Population\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Total_Pop\",\n    cmap=\"Blues\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Total Population by Census Tract\", fontsize = 14)\naxes[0].set_axis_off()\n\n# Plot 2: Percentage Non-White\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Perc_Non_White\",\n    cmap=\"Reds\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Percentage Non-Whites by Census Tract\", fontsize = 14)\naxes[1].set_axis_off()\n\n# Add a common subtitle\nfig.suptitle(\n    \"Demographic and Population Distribution (2019)\",\n    fontsize=20,\n    fontweight=\"bold\",\n    y=0.95,\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot total population by census tract\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\ncensus_data.plot(\n    column=\"Perc_Dependent_Pop\",  # Total population column\n    cmap=\"Blues\",          # Color map\n    legend=True,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    ax=ax\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\nax.set_title(\"Percentage Dependent Population by Census Tract in Philadelphia\", fontsize=14)\nax.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot Education Attainment and Median Household Income\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Plot 1: Education Attainment\ncensus_data.plot(\n    ax=axes[0],\n    column=\"Perc_Edu_HS_Higher\",\n    cmap=\"Greens\",\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[0].set_title(\"Education Attainment by Census Tract\", fontsize=14)\naxes[0].set_axis_off()\n\n# Plot 2: Median Household Income\ncensus_data.plot(\n    ax=axes[1],\n    column=\"Median_Household_Income\",\n    cmap=\"Purples\",\n    scheme=\"quantiles\",\n    k=5,\n    edgecolor=\"black\",\n    linewidth=0.2,\n    legend=True,\n)\naxes[1].set_title(\"Median Household Income by Census Tract\", fontsize=14)\naxes[1].set_axis_off()\n\n# Customize legend for Median Household Income\nincome_legend = axes[1].get_legend()\nincome_legend.set_bbox_to_anchor((1.2, 0.1))  # Adjust position to bottom-right\nincome_legend.set_title(\"Income Levels\")\n\n# Add a common title\nfig.suptitle(\n    \"Demographic and Population Distribution (2019)\",\n    fontsize=20,\n    fontweight=\"bold\",\n    y=0.95,\n)\n\n# Add data source\nfig.text(\n    0.5, 0.01, \"Source: US Census Bureau, ACS 5-Year Estimates (2019)\", \n    ha=\"center\", fontsize=12, style=\"italic\"\n)\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.92])\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy3.html#combining-all-data-sets",
    "href": "pages/Final-Copy3.html#combining-all-data-sets",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "2.1 Combining All Data Sets",
    "text": "2.1 Combining All Data Sets\n\n# Ensure both data frames have a common key column, e.g., \"GEOID\"\nif \"GEOID\" not in aggregated_with_canopy_full.columns or \"GEOID\" not in census_data.columns:\n    raise KeyError(\"Both data frames must contain a 'GEOID' column for merging.\")\n\n# Merge the two data frames\ncombined_data = pd.merge(\n    census_data,\n    aggregated_with_canopy_full,\n    on=\"GEOID\",\n    how=\"outer\",  # Use 'outer' to retain all data; use 'inner' for only matching rows\n    suffixes=('', '_canopy')  # Add suffix to distinguish overlapping column names\n)\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 384 entries, 0 to 383\nData columns (total 42 columns):\n #   Column                        Non-Null Count  Dtype   \n---  ------                        --------------  -----   \n 0   STATEFP                       384 non-null    object  \n 1   COUNTYFP                      384 non-null    object  \n 2   TRACTCE                       384 non-null    object  \n 3   GEOID                         384 non-null    object  \n 4   NAME_x                        384 non-null    object  \n 5   NAMELSAD                      384 non-null    object  \n 6   MTFCC                         384 non-null    object  \n 7   FUNCSTAT                      384 non-null    object  \n 8   ALAND                         384 non-null    int64   \n 9   AWATER                        384 non-null    int64   \n 10  INTPTLAT                      384 non-null    object  \n 11  INTPTLON                      384 non-null    object  \n 12  geometry                      384 non-null    geometry\n 13  NAME_y                        384 non-null    object  \n 14  Total_Pop                     384 non-null    int64   \n 15  White_Only                    384 non-null    int64   \n 16  Median_Household_Income       384 non-null    int64   \n 17  state                         384 non-null    object  \n 18  county                        384 non-null    object  \n 19  tract                         384 non-null    object  \n 20  Pop_15_and_Younger            384 non-null    int64   \n 21  Pop_65_and_Older              384 non-null    int64   \n 22  Dependent_Pop                 384 non-null    int64   \n 23  Perc_Dependent_Pop            376 non-null    float64 \n 24  Edu_HS_Higher                 384 non-null    int64   \n 25  Perc_Edu_HS_Higher            376 non-null    float64 \n 26  Non_White                     384 non-null    int64   \n 27  Perc_Non_White                376 non-null    float64 \n 28  NAMELSAD10                    384 non-null    object  \n 29  perc_5plus                    384 non-null    float64 \n 30  casthma_crudeprev             384 non-null    float64 \n 31  cancer_crudeprev              373 non-null    float64 \n 32  hvi_score                     384 non-null    float64 \n 33  geometry_canopy               384 non-null    geometry\n 34  GEOID10_aggregated            377 non-null    object  \n 35  perc_5plus_aggregated         377 non-null    float64 \n 36  casthma_crudeprev_aggregated  377 non-null    float64 \n 37  cancer_crudeprev_aggregated   366 non-null    float64 \n 38  hvi_score_aggregated          377 non-null    float64 \n 39  canopy_area                   384 non-null    float64 \n 40  geometry_aggregated           377 non-null    geometry\n 41  canopy_percent                384 non-null    float64 \ndtypes: float64(13), geometry(3), int64(10), object(16)\nmemory usage: 126.1+ KB\nNone"
  },
  {
    "objectID": "pages/Final-Copy3.html#log-transformation-of-median-household-income",
    "href": "pages/Final-Copy3.html#log-transformation-of-median-household-income",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "2.2 Log Transformation of Median Household Income",
    "text": "2.2 Log Transformation of Median Household Income\nThe log transformation is applied to the Median Household Income variable to address potential skewness in the data. Income distributions are often right-skewed, meaning that a small number of observations with very high incomes can disproportionately influence the analysis. By applying a log transformation, we can:\n\nReduce the impact of extreme values, making the data more normally distributed.\nEnhance the interpretability of relationships, as percentage changes in income are often more meaningful than absolute changes.\nImprove the performance of statistical models and clustering algorithms, which often assume normality or are sensitive to outliers.\n\nThe resulting Log_Median_Household_Income variable is used in subsequent analyses to ensure robust and meaningful insights. hts.\n\n# Create a new column with the logged values of \"Median_Household_Income\"\n# Use np.log1p to handle zeros and avoid -inf errors\ncombined_data[\"Log_Median_Household_Income\"] = np.log1p(combined_data[\"Median_Household_Income\"])\n\n   Median_Household_Income  Log_Median_Household_Income\n0                   103585                    11.548157\n1                    49871                    10.817215\n2                    86296                    11.365550\n3                    62986                    11.050684\n4                    78947                    11.276545\n\n\n/opt/anaconda3/lib/python3.12/site-packages/pandas/core/arraylike.py:399: RuntimeWarning: invalid value encountered in log1p\n  result = getattr(ufunc, method)(*inputs, **kwargs)"
  },
  {
    "objectID": "pages/Final-Copy3.html#scatter-plot-analysis",
    "href": "pages/Final-Copy3.html#scatter-plot-analysis",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "3.1 Scatter Plot Analysis",
    "text": "3.1 Scatter Plot Analysis\nTo identify social and economic demographic indicators associated with areas at risk of health inequities, we explore relationships between the following variables:\n\nIndependent Variables:\n\nPerc_Non_White\nPerc_Dependent_Pop\nPerc_Edu_HS_Higher\nLog_Median_Household_Income\n\nDependent Variables:\n\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\n\n\nThe scatter plot analysis provides insights into potential correlations, while the log transformation of income reduces the impact of extreme values, making the data more normally distributed.\n\n# Independent and dependent variables\nindependent_vars = [\"Perc_Non_White\", \"Perc_Dependent_Pop\", \"Perc_Edu_HS_Higher\", \"Log_Median_Household_Income\"]\ndependent_vars = [\"perc_5plus_aggregated\", \"casthma_crudeprev_aggregated\", \"cancer_crudeprev_aggregated\", \"hvi_score_aggregated\"]\n\n# Enhanced scatter plot generation\nfor indep in independent_vars:\n    for dep in dependent_vars:\n        try:\n            plt.figure(figsize=(10, 6))\n            sns.scatterplot(data=combined_data, x=indep, y=dep, alpha=0.7, edgecolor=None)\n            plt.title(f\"Relationship Between {indep.replace('_', ' ')} and {dep.replace('_', ' ')}\", fontsize=14)\n            plt.xlabel(indep.replace('_', ' '), fontsize=12)\n            plt.ylabel(dep.replace('_', ' '), fontsize=12)\n            plt.grid(True, linestyle='--', alpha=0.5)\n            plt.tight_layout()\n            plt.show()\n        except Exception as e:\n            print(f\"Error encountered while plotting {indep} vs {dep}: {e}\")"
  },
  {
    "objectID": "pages/Final-Copy3.html#correlation-heatmap-of-features",
    "href": "pages/Final-Copy3.html#correlation-heatmap-of-features",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "3.2 Correlation Heatmap of Features",
    "text": "3.2 Correlation Heatmap of Features\nThe heatmap visualizes the Pearson correlation coefficients between selected social, economic, and health-related features. These values range from -1 to 1, where:\n\n1 indicates a perfect positive correlation.\n-1 indicates a perfect negative correlation.\n0 indicates no linear correlation.\n\nBy plotting the heatmap, we can identify: - Strong Positive Correlations: Features that move in the same direction. - Strong Negative Correlations: Features that move in opposite directions. - Weak or No Correlations: Features with little or no linear relationship.\nThis helps in understanding the relationships between demographic indicators and health inequities, providing valuable insights for further analysis.\n\n# Define the new column names as a dictionary\ncolumn_rename_map = {\n    \"Perc_Non_White\": \"Percent Non-White\",\n    \"Perc_Dependent_Pop\": \"Percent Dependent Population\",\n    \"Perc_Edu_HS_Higher\": \"Percent with HS or Higher Education\",\n    \"Log_Median_Household_Income\": \"Log Median Household Income\",\n    \"perc_5plus_aggregated\": \"Lead Exposure Percent\",\n    \"casthma_crudeprev_aggregated\": \"Asthma Prevalence\",\n    \"cancer_crudeprev_aggregated\": \"Cancer Prevalence\",\n    \"hvi_score_aggregated\": \"Heat Vulnerability Index\",\n}\n\n# Rename the columns in the dataset\nrenamed_data = combined_data.rename(columns=column_rename_map)\n\n# Select only the renamed columns for the heatmap\nfeature_cols = list(column_rename_map.values())\n\n# Plot the heatmap\nsns.heatmap(\n    renamed_data[feature_cols].corr(), \n    cmap=\"coolwarm\", \n    annot=True, \n    vmin=-1, \n    vmax=1\n)\n\n# Add title and show the plot\nplt.title(\"Correlation Heatmap of Features\")\nplt.show()"
  },
  {
    "objectID": "pages/Final-Copy3.html#need-a-explanation-for-this-heatmap",
    "href": "pages/Final-Copy3.html#need-a-explanation-for-this-heatmap",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "need a explanation for this heatmap",
    "text": "need a explanation for this heatmap\n\nPercent of Non-white population vs Percent of children under the age of 6 with higher blood lead levels: Positive relationship (0.63)\nPercent of Non-white population vs Prevalence of current asthma among adults aged &gt;=18 years : Positive relationship (0.71)\nPercent of Non-white population vs HVI Score : Positive relationship (0.89)\nPercent of Dependent Population vs Prevalence of cancer (excluding skin cancer) among adults aged &gt;=18 years: Positive relationship (0.62)\nPercent of High Degree vs Percent of children under the age of 6 with higher blood lead levels: Negative relationship (0.40)\nPercent of High Degree vs Prevalence of current asthma among adults aged &gt;=18 years: Negative relationship (0.54)\nPercent of High Degree vs HVI Score: Negative relationship (0.58)\nMedian Household Income (Logged) vs Percent of children under the age of 6 with higher blood lead levels: Negative relationship (0.61)\nMedian Household Income (Logged) vs Prevalence of current asthma among adults aged &gt;=18 years : Negative relationship (0.70)\nMedian Household Income (Logged) vs HVI Score: Negative relationship (0.78)"
  },
  {
    "objectID": "pages/Final-Copy3.html#non-spatial-clustering",
    "href": "pages/Final-Copy3.html#non-spatial-clustering",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "4.1 Non-Spatial Clustering",
    "text": "4.1 Non-Spatial Clustering\nTo analyze the socio-economic status and its potential impact on health outcomes, we create a new DataFrame focusing on tree canopy effects. The goal is to examine whether areas with similar socio-economic characteristics exhibit differences in the distribution of cancer prevalence, asthma rates, and the heat vulnerability index.\nIf significant differences are observed, it suggests the need for tailored policy interventions by the City of Philadelphia to address these disparities effectively.\nFor clustering, the following socio-economic variables were used as criteria: - Perc_Non_White (Percent Non-White) - Perc_Dependent_Pop (Percent Dependent Population) - Perc_Edu_HS_Higher (Percent with HS or Higher Education) - Log_Median_Household_Income (Log Median Househod Income)\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\n\n\n# Check for null values\nprint(combined_data[['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']].isnull().sum())\n\nPerc_Non_White                  8\nPerc_Dependent_Pop              8\nPerc_Edu_HS_Higher              8\nLog_Median_Household_Income    10\ndtype: int64\n\n\n\n# Input missing values, using mean as proxy\nimputer = SimpleImputer(strategy=\"mean\") \ncombined_data[['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']] = imputer.fit_transform(\n    combined_data[['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']]\n)\n\n\n# Step 1: Set the environment variable to suppress memory leak warning\nos.environ['OMP_NUM_THREADS'] = '2'\n\n# Step 2: Scale the data\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(combined_data[['Perc_Non_White', \n                                                  'Perc_Dependent_Pop', \n                                                  'Perc_Edu_HS_Higher', \n                                                  'Log_Median_Household_Income']])\n\n# Step 3: Run KMeans\nkmeans = KMeans(n_clusters=3, random_state=42)  # Adjust number of clusters\nkmeans.fit(data_scaled)\n\n# Step 4: Add labels to the original DataFrame\ncombined_data['label'] = kmeans.labels_\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME_x\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\n...\nGEOID10_aggregated\nperc_5plus_aggregated\ncasthma_crudeprev_aggregated\ncancer_crudeprev_aggregated\nhvi_score_aggregated\ncanopy_area\ngeometry_aggregated\ncanopy_percent\nLog_Median_Household_Income\nlabel\n\n\n\n\n0\n42\n101\n000100\n42101000100\n1\nCensus Tract 1\nG5020\nS\n704917\n0\n...\n42101000100\n0.0\n9.2\n3.4\n-4.917169\n15295.431073\nPOLYGON ((-8365601.29 4859085.382, -8365600.73...\n1.272227\n11.548157\n1\n\n\n1\n42\n101\n000200\n42101000200\n2\nCensus Tract 2\nG5020\nS\n382481\n0\n...\n42101000200\n0.0\n8.3\n3.2\n-2.456924\n81.808400\nPOLYGON ((-8365814.579 4859375.53, -8365814.35...\n0.012554\n10.817215\n2\n\n\n2\n42\n101\n000300\n42101000300\n3\nCensus Tract 3\nG5020\nS\n546269\n22680\n...\n42101000300\n0.0\n9.5\n5.1\n-3.437875\n13232.065668\nPOLYGON ((-8367581.108 4859520.898, -8367580.6...\n1.419802\n11.365550\n1\n\n\n3\n42\n101\n000401\n42101000401\n4.01\nCensus Tract 4.01\nG5020\nS\n216838\n15884\n...\n42101000401\n0.0\n9.3\n5.1\n-4.305632\n5301.358134\nMULTIPOLYGON (((-8368816.086 4859067.085, -836...\n1.332644\n11.050684\n1\n\n\n4\n42\n101\n000402\n42101000402\n4.02\nCensus Tract 4.02\nG5020\nS\n303680\n0\n...\n42101000402\n0.0\n8.9\n10.0\n-2.525256\n3666.039706\nPOLYGON ((-8367759.219 4859363.332, -8367758.8...\n0.708517\n11.276545\n1\n\n\n\n\n5 rows Ã— 44 columns"
  },
  {
    "objectID": "pages/Final-Copy3.html#plot-of-clustering-by-similar-socio-economic-status",
    "href": "pages/Final-Copy3.html#plot-of-clustering-by-similar-socio-economic-status",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "4.2 Plot of Clustering by Similar Socio-Economic Status",
    "text": "4.2 Plot of Clustering by Similar Socio-Economic Status\nThis code visualizes KMeans clustering results on a map using GeoPandas and Matplotli.\n\n# Step 1: Convert the DataFrame to a GeoDataFrame if not already one\ngeo_combined_data = gpd.GeoDataFrame(combined_data, geometry='geometry')\n\n# Step 2: Ensure CRS is set and transform to EPSG:3857\nif geo_combined_data.crs is None:\n    geo_combined_data.set_crs(\"EPSG:4326\", inplace=True)  # Assuming original CRS is EPSG:4326\ngeo_combined_data = geo_combined_data.to_crs(\"EPSG:3857\")\n\n# Step 3: Plot the clusters without x and y information\nfig, ax = plt.subplots(figsize=(10, 8))\ngeo_combined_data.plot(column='label', categorical=True, legend=True, cmap='tab10', ax=ax, legend_kwds={'frameon': False})\n\n# Step 4: Add a title\nax.set_title('KMeans Clustering by Labels', fontsize=16)\n\n# Step 5: Remove axis labels, ticks, and bounding box\nax.set_axis_off()  # Turn off the entire axis\nplt.tight_layout()\n\n# Step 6: Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n4.3 Export Clusters by Label\nThis code ensures that the GeoDataFrame has only one active geometry column and exports each cluster as a separate GeoJSON file:\n\n# Handle Geometry Columns\ngeo_combined_data = geo_combined_data[[col for col in geo_combined_data.columns if not col.startswith('geometry_')]]\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n\n# Step 1: Define the base output directory\nbase_path = \"data/\"\noutput_dir = os.path.join(base_path, \"output_by_label\")\nos.makedirs(output_dir, exist_ok=True)\n\n# Step 2: Ensure only one geometry column\n# Drop other geometry columns if they exist\ngeometry_columns = [col for col in geo_combined_data.columns if geo_combined_data[col].dtype.name == 'geometry']\nif len(geometry_columns) &gt; 1:\n    print(\"Multiple geometry columns detected. Dropping all but the active one.\")\n    geo_combined_data = geo_combined_data.drop(columns=[col for col in geometry_columns if col != 'geometry'])\n\n# Ensure the 'geometry' column is set as the active geometry\ngeo_combined_data = geo_combined_data.set_geometry('geometry')\n\n# Step 3: Iterate over unique labels and save each subset\nfor label in geo_combined_data['label'].unique():\n    label_data = geo_combined_data[geo_combined_data['label'] == label]\n    file_path = os.path.join(output_dir, f\"label_{label}.geojson\")  # Output file path\n    label_data.to_file(file_path, driver=\"GeoJSON\")  # Save as GeoJSON\n    print(f\"Saved data for label {label} to {file_path}\")\n\nSaved data for label 1 to data/output_by_label/label_1.geojson\nSaved data for label 2 to data/output_by_label/label_2.geojson\nSaved data for label 0 to data/output_by_label/label_0.geojson\n\n\n\n\n5.1 Clustering Analysis\nThis code creates box plots to analyze the distribution of selected socio-economic variables across different clusters.\n\n# List of columns to analyze\ncolumns_to_plot = ['Perc_Non_White', 'Perc_Dependent_Pop', 'Perc_Edu_HS_Higher', 'Log_Median_Household_Income']\n\n# Create a box plot for each column\nfor column in columns_to_plot:\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n    plt.title(f\"Distribution of {column} Across Clusters\", fontsize=16)\n    plt.xlabel(\"Cluster Labels\", fontsize=12)\n    plt.ylabel(column, fontsize=12)\n    plt.tight_layout()\n    plt.show()\n\n/var/folders/hv/13df42ds78l435f3912yyj5c0000gn/T/ipykernel_65225/3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\n/var/folders/hv/13df42ds78l435f3912yyj5c0000gn/T/ipykernel_65225/3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\n/var/folders/hv/13df42ds78l435f3912yyj5c0000gn/T/ipykernel_65225/3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")\n\n\n\n\n\n\n\n\n\n/var/folders/hv/13df42ds78l435f3912yyj5c0000gn/T/ipykernel_65225/3578143473.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='label', y=column, data=geo_combined_data, palette=\"Set2\")"
  },
  {
    "objectID": "pages/Final-Copy3.html#box-plot-explanation",
    "href": "pages/Final-Copy3.html#box-plot-explanation",
    "title": "Final: Defining the Health Equity Index in Philadelphia at the Census Tract Level",
    "section": "Box Plot Explanation",
    "text": "Box Plot Explanation\n\nLabel == 0: Represents a group with low median household income, low percentage of individuals with a high school degree or higher, low dependent population percentage, and a relatively high percentage of non-white population.\nLabel == 1: Represents a group with high median income, high education levels, medium dependent population percentage, and a low percentage of non-white population.\nLabel == 2: Represents a group with a high percentage of non-white population and dependent population, along with relatively low median household income and lower education levels. In contrast to Label == 0 and Label == 1, this group has a significant number of outliers, suggesting the need to exclude these outliers in further analysis.\n\n\nFrom the box plots: - Label == 0 represents a socio-economically vulnerable population, with lower median household income, lower education levels, and a higher percentage of non-white population. - While Label == 1 has a higher dependent population percentage, Label == 0 demonstrates more socio-economic vulnerabilites overall.\n\n5.2 Tree Canopy Effect on Public Health\nThis analysis examines the relationship between tree canopy coverage and public health outcomes within clusters of similar socio-economic status.\n\nKey Variables: Includes tree canopy percentage, lead exposure, asthma prevalence, cancer prevalence, and heat vulnerability index.\nMethodology: For each cluster, correlations between these variables are computed and visualized using heatmaps.\nObjective: To identify how tree canopy affects public health indicators across different socio-economic groups.\n\n\n# Directory containing the GeoJSON files\ninput_dir = \"data/output_by_label\"\n\n# Iterate through each GeoJSON file\nfor file_name in os.listdir(input_dir):\n    if file_name.endswith(\".geojson\"):\n        file_path = os.path.join(input_dir, file_name)\n        \n        # Load the GeoJSON file into a GeoDataFrame\n        gdf = gpd.read_file(file_path)\n        \n        # Extract the required columns\n        required_columns = ['canopy_percent', 'perc_5plus_aggregated', \n                            'casthma_crudeprev_aggregated', 'cancer_crudeprev_aggregated', \n                            'hvi_score_aggregated']\n        \n        # Ensure columns exist in the GeoDataFrame\n        missing_columns = [col for col in required_columns if col not in gdf.columns]\n        if missing_columns:\n            print(f\"Skipping {file_name}: Missing columns {missing_columns}\")\n            continue\n        \n        # Compute the correlation matrix\n        correlation_matrix = gdf[required_columns].corr()\n        \n        # Plot the correlation matrix as a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", cbar=True)\n        plt.title(f\"Correlation Matrix for {file_name}\", fontsize=16)\n        plt.tight_layout()\n        \n        # Display the heatmap\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\nThis analysis highlights the role of tree canopy coverage in influencing public health outcomes across different socio-economic groups in Philadelphia.\n\nGroup 0 (Label-0 in Clustering):\n\nSocio-Economic Characteristics: Represents a socio-economically vulnerable population with lower median household income, lower education levels, lower dependent population percentage, and a higher percentage of non-white residents.\nFindings: Tree canopy coverage shows a negative correlation with:\n\nLead exposure (perc_5plus_aggregated)\nAsthma rate (casthma_crudeprev_aggregated)\nCancer rate (cancer_crudeprev_aggregated)\nHeat Vulnerability Index (hvi_score_aggregated)\n\nImplications: These results suggest that increasing tree canopy in vulnerable areas could lead to substantial improvements in public health outcomes. The City of Philadelphia should prioritize aggressive tree-planting initiatives in these regions.\n\n\n\nGroup 1 (Label-1 in Clustering):\n\nSocio-Economic Characteristics: Represents a less vulnerable population with higher median household income, higher education levels, medium dependent population percentage, and a lower percentage of non-white residents.\nFindings:\n\nNegative correlation between tree canopy and lead exposure, as well as asthma rates, indicating a continued beneficial effect of tree canopy coverage on these outcomes.\nWeak positive correlations between tree canopy and both cancer rates (cancer_crudeprev_aggregated) and heat vulnerability index (hvi_score_aggregated), suggesting a more complex relationship in this group.\n\nImplications: Tree canopy remains important in less vulnerable areas, but its impact may be more limited for certain public health indicators like cancer rates and heat vulnerability.\n\n\n\nGroup 2 (Label-2 in Clustering):\n\nExclusion: This group was excluded from the analysis due to significant outliers identified in the box plots, which undermine the reliability of the results for this cluster.\n\n\n\nKey Takeaways:\n\nThere is a distinct difference in the relationship between tree canopy coverage and public health outcomes across socio-economic groups.\n\nVulnerable Groups (Group 0): Strong negative correlations highlight the urgent need for targeted tree-planting initiatives to improve health outcomes.\nLess Vulnerable Groups (Group 1): While tree canopy remains beneficial, the impact is less pronounced, with some indicators showing positive correlations.\n\nThe City of Philadelphia should prioritize tree-planting efforts in highly vulnerable areas characterized by:\n\nLow median household income\nLow education levels\nLower dependent population percentages\nHigher non-white population percentages\n\n\nBy addressing health inequities through targeted tree canopy initiatives, the city can improve public health outcomes in communities that need it most."
  },
  {
    "objectID": "pages/Introduction.html",
    "href": "pages/Introduction.html",
    "title": "Health Equity in Philadelphia: A Comprehensive Analysis",
    "section": "",
    "text": "Health equity is a pressing concern in urban settings, where environmental and socioeconomic disparities significantly impact community well-being. In Philadelphia, these disparities are particularly pronounced, with marginalized communities facing heightened exposure to environmental hazards and limited access to resources that promote healthy living.\nThis report introduces the Health Equity Index (HEI), a tool designed to evaluate health outcomes and identify vulnerable areas at the census tract level. By integrating environmental data (e.g., tree canopy coverage, heat vulnerability, asthma and cancer prevalence, and child blood lead levels) with socioeconomic indicators (e.g., income, education, and racial composition), the HEI provides a holistic framework to analyze health inequities in Philadelphia.\n\n\n\nHighlight socioeconomic and demographic indicators that underscore areas at risk of health inequities.\nIdentify neighborhoods requiring prioritization for targeted public health interventions.\nExplore the relationships between socioeconomic factors and environmental health outcomes.\n\nThe findings aim to support Philadelphiaâ€™s environmental justice goals, as outlined in local initiatives like the Philly Tree Plan, by providing actionable insights that inform equity-driven public health and environmental strategies. By bridging data analysis with urban policy, this research seeks to promote healthier, more equitable communities across the city.",
    "crumbs": [
      "0. Introduction"
    ]
  },
  {
    "objectID": "pages/Introduction.html#introduction",
    "href": "pages/Introduction.html#introduction",
    "title": "Health Equity in Philadelphia: A Comprehensive Analysis",
    "section": "",
    "text": "Health equity is a pressing concern in urban settings, where environmental and socioeconomic disparities significantly impact community well-being. In Philadelphia, these disparities are particularly pronounced, with marginalized communities facing heightened exposure to environmental hazards and limited access to resources that promote healthy living.\nThis report introduces the Health Equity Index (HEI), a tool designed to evaluate health outcomes and identify vulnerable areas at the census tract level. By integrating environmental data (e.g., tree canopy coverage, heat vulnerability, asthma and cancer prevalence, and child blood lead levels) with socioeconomic indicators (e.g., income, education, and racial composition), the HEI provides a holistic framework to analyze health inequities in Philadelphia.\n\n\n\nHighlight socioeconomic and demographic indicators that underscore areas at risk of health inequities.\nIdentify neighborhoods requiring prioritization for targeted public health interventions.\nExplore the relationships between socioeconomic factors and environmental health outcomes.\n\nThe findings aim to support Philadelphiaâ€™s environmental justice goals, as outlined in local initiatives like the Philly Tree Plan, by providing actionable insights that inform equity-driven public health and environmental strategies. By bridging data analysis with urban policy, this research seeks to promote healthier, more equitable communities across the city.",
    "crumbs": [
      "0. Introduction"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550: Final Project",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. Itâ€™s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, youâ€™re welcome (and encouraged) to make as many changes as you like to best fit your project.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#welcome-to-our-final-project",
    "href": "index.html#welcome-to-our-final-project",
    "title": "Defining the Health Equity Index in Philadelphia\nAt the Census Tract Level",
    "section": "",
    "text": "We are excited to present Defining the Health Equity Index in Philadelphia at the Census Tract Level.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#about-the-project",
    "href": "index.html#about-the-project",
    "title": "Defining the Health Equity Index in Philadelphia\nAt the Census Tract Level",
    "section": "About the Project",
    "text": "About the Project\nHealth equity is a vital issue in urban areas, where environmental and socioeconomic disparities shape the well-being of communities. In Philadelphia, these challenges are especially pronounced, with marginalized populations disproportionately affected by environmental hazards and limited access to resources that support healthy living.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#introducing-the-health-equity-index-hei",
    "href": "index.html#introducing-the-health-equity-index-hei",
    "title": "Defining the Health Equity Index in Philadelphia at the census tract level",
    "section": "",
    "text": "Our project introduces the Health Equity Index (HEI), a tool designed to:\n\nAnalyze health outcomes\nIdentify vulnerable areas across the city\n\n\n\n\nEnvironmental Data: Tree canopy coverage, heat vulnerability, asthma and cancer rates, childhood blood lead levels.\nSocioeconomic Indicators: Income, education, and racial composition.\n\nThe HEI provides a comprehensive framework for understanding health inequities.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#our-vision",
    "href": "index.html#our-vision",
    "title": "Defining the Health Equity Index in Philadelphia\nAt the Census Tract Level",
    "section": "Our Vision",
    "text": "Our Vision\nOur project introduces the Health Equity Index (HEI), a tool designed to analyze health outcomes and identify vulnerable areas across the city. By combining environmental dataâ€”such as tree canopy coverage, heat vulnerability, asthma and cancer rates, and childhood blood lead levelsâ€”with socioeconomic indicators like income, education, and racial composition, the HEI provides a comprehensive framework for understanding health inequities.\nWe hope this work contributes valuable insights and fosters meaningful discussions around promoting health equity in Philadelphia.\nThank you for exploring our project!",
    "crumbs": [
      "Home"
    ]
  }
]